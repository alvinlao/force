
projectpart1.elf:     file format elf32-littlenios2
projectpart1.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x010001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x01000000 paddr 0x01000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x01000020 paddr 0x01000020 align 2**12
         filesz 0x00004280 memsz 0x00004280 flags r-x
    LOAD off    0x000052a0 vaddr 0x010042a0 paddr 0x01005970 align 2**12
         filesz 0x000016d0 memsz 0x000016d0 flags rw-
    LOAD off    0x00007040 vaddr 0x01007040 paddr 0x01007040 align 2**12
         filesz 0x00000000 memsz 0x000002ac flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01000000  01000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  01000020  01000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000403c  010001b4  010001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000b0  010041f0  010041f0  000051f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000016d0  010042a0  01005970  000052a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002ac  01007040  01007040  00007040  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00006970  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000598  00000000  00000000  00006998  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000a6c  00000000  00000000  00006f30  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000bc8b  00000000  00000000  0000799c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000027f3  00000000  00000000  00013627  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000073b8  00000000  00000000  00015e1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000a84  00000000  00000000  0001d1d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000d49  00000000  00000000  0001dc58  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001102  00000000  00000000  0001e9a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0001faa4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000090  00000000  00000000  0001fab8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0002196c  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0002196f  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0002197b  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0002197c  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0002197d  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00021988  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00021993  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  0002199e  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000042  00000000  00000000  000219a9  2**0
                  CONTENTS, READONLY
 26 .jdi          0000538f  00000000  00000000  000219eb  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0007d327  00000000  00000000  00026d7a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01000000 l    d  .entry	00000000 .entry
01000020 l    d  .exceptions	00000000 .exceptions
010001b4 l    d  .text	00000000 .text
010041f0 l    d  .rodata	00000000 .rodata
010042a0 l    d  .rwdata	00000000 .rwdata
01007040 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
010001ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 video_output.c
00000000 l    df *ABS*	00000000 alt_load.c
0100039c l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
010042a0 l     O .rwdata	00001060 jtag_uart_0
01005300 l     O .rwdata	00000048 char_drawer
01005348 l     O .rwdata	00000054 pixel_buffer_dma
010007a0 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
010009e0 l     F .text	00000228 altera_avalon_jtag_uart_irq
01000c08 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
01002d7c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
01002df8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
01002ed8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0100337c l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
010034cc l     F .text	000000f8 alt_file_locked
01003750 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
01005544 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
01003fa0 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
0100418c l     F .text	00000040 alt_sim_halt
01000408 g     F .text	0000006c alt_main
01002218 g     F .text	000003d8 alt_up_pixel_buffer_dma_draw_vline
0100705c g     O .bss	00000100 alt_irq
01005970 g       *ABS*	00000000 __flash_rwdata_start
01001418 g     F .text	00000114 alt_up_char_buffer_string
01001348 g     F .text	000000d0 alt_up_char_buffer_draw
010015c8 g     F .text	000001ac alt_up_pixel_buffer_dma_draw
00000000  w      *UND*	00000000 __errno
01001588 g     F .text	00000040 alt_up_pixel_buffer_dma_open_dev
01000000 g     F .entry	0000000c __reset
01000020 g       *ABS*	00000000 __flash_exceptions_start
01007058 g     O .bss	00000004 errno
01000000 g       *ABS*	00000000 __alt_mem_sdram_controller
01007044 g     O .bss	00000004 alt_argv
0100d944 g       *ABS*	00000000 _gp
01001774 g     F .text	00000058 alt_up_pixel_buffer_dma_change_back_buffer_address
010053c4 g     O .rwdata	00000180 alt_fd_list
01003000 g     F .text	00000094 alt_find_dev
01003c9c g     F .text	000000a0 memcpy
0100152c g     F .text	0000005c alt_up_char_buffer_clear
01003454 g     F .text	00000078 alt_io_redirect
010041f0 g       *ABS*	00000000 __DTOR_END__
01001824 g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
01000e20 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
01001ec0 g     F .text	00000358 alt_up_pixel_buffer_dma_draw_hline
010026b4 g     F .text	000000d8 helper_plot_pixel
01005954 g     O .rwdata	00000004 alt_max_fd
01001858 g     F .text	0000016c alt_up_pixel_buffer_dma_clear_screen
0100596c g     O .rwdata	00000004 _global_impure_ptr
010072ec g       *ABS*	00000000 __bss_end
01003284 g     F .text	000000f8 alt_iic_isr_register
010019c4 g     F .text	000004fc alt_up_pixel_buffer_dma_draw_box
010038c0 g     F .text	0000010c alt_tick
0100323c g     F .text	00000048 alt_ic_irq_enabled
01003828 g     F .text	00000098 alt_alarm_stop
0100704c g     O .bss	00000004 alt_irq_active
010000ec g     F .exceptions	000000c8 alt_irq_handler
0100539c g     O .rwdata	00000028 alt_dev_null
01002ddc g     F .text	0000001c alt_dcache_flush_all
010025f0 g     F .text	000000c4 alt_up_pixel_buffer_dma_draw_rectangle
01005970 g       *ABS*	00000000 __ram_rwdata_end
0100594c g     O .rwdata	00000008 alt_dev_list
0100278c g     F .text	0000039c alt_up_pixel_buffer_dma_draw_line
010042a0 g       *ABS*	00000000 __ram_rodata_end
010072ec g       *ABS*	00000000 end
01001284 g     F .text	00000084 alt_up_char_buffer_init
01000920 g     F .text	000000c0 altera_avalon_jtag_uart_init
010041ec g       *ABS*	00000000 __CTOR_LIST__
01800000 g       *ABS*	00000000 __alt_stack_pointer
01001044 g     F .text	00000240 altera_avalon_jtag_uart_write
01003fa4 g     F .text	000001b0 __call_exitprocs
010001b4 g     F .text	0000003c _start
01007050 g     O .bss	00000004 _alt_tick_rate
01007054 g     O .bss	00000004 _alt_nticks
010004a8 g     F .text	000002f8 alt_sys_init
01003e6c g     F .text	00000134 __register_exitproc
01000cb8 g     F .text	00000074 altera_avalon_jtag_uart_close
01004154 g     F .text	00000038 __mulsi3
010042a0 g       *ABS*	00000000 __ram_rwdata_start
010041f0 g       *ABS*	00000000 __ram_rodata_start
010007d8 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
01003b0c g     F .text	000000d0 alt_get_fd
01003c28 g     F .text	00000074 memcmp
01000888 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
010072ec g       *ABS*	00000000 __alt_stack_base
010008d0 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
010039ec g     F .text	00000120 alt_find_file
01002e24 g     F .text	000000b4 alt_dev_llist_insert
01007040 g       *ABS*	00000000 __bss_start
010001f0 g     F .text	0000012c main
01007048 g     O .bss	00000004 alt_envp
010017cc g     F .text	00000058 alt_up_pixel_buffer_dma_swap_buffers
01001308 g     F .text	00000040 alt_up_char_buffer_open_dev
01000830 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0100715c g     O .bss	00000190 _atexit0
01005958 g     O .rwdata	00000004 alt_errno
010041f0 g       *ABS*	00000000 __CTOR_END__
01003d3c g     F .text	000000bc strcmp
010041f0 g       *ABS*	00000000 __flash_rodata_start
010041f0 g       *ABS*	00000000 __DTOR_LIST__
01000474 g     F .text	00000034 alt_irq_init
010037b0 g     F .text	00000078 alt_release_fd
01003bdc g     F .text	00000014 atexit
01005968 g     O .rwdata	00000004 _impure_ptr
01007040 g     O .bss	00000004 alt_argc
01002f9c g     F .text	00000064 _do_dtors
01000020 g       .exceptions	00000000 alt_irq_entry
01005944 g     O .rwdata	00000008 alt_fs_list
01000020 g       *ABS*	00000000 __ram_exceptions_start
010030b0 g     F .text	00000050 alt_ic_isr_register
01005970 g       *ABS*	00000000 _edata
010072ec g       *ABS*	00000000 _end
010001b4 g       *ABS*	00000000 __ram_exceptions_end
01000d2c g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0100319c g     F .text	000000a0 alt_ic_irq_disable
010039cc g     F .text	00000020 altera_nios2_qsys_irq_init
01003bf0 g     F .text	00000038 exit
01800000 g       *ABS*	00000000 __alt_data_end
01000020 g     F .exceptions	00000000 alt_exception
010041cc g     F .text	00000020 _exit
01002b28 g     F .text	00000154 alt_alarm_start
01003df8 g     F .text	00000074 strlen
010035c4 g     F .text	0000018c open
01003094 g     F .text	0000001c alt_icache_flush_all
0100595c g     O .rwdata	00000004 alt_priority_mask
01003100 g     F .text	0000009c alt_ic_irq_enable
01005960 g     O .rwdata	00000008 alt_alarm_list
01002f38 g     F .text	00000064 _do_ctors
01002c7c g     F .text	00000100 close
0100031c g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

01000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1000000:	00404034 	movhi	at,256
    ori r1, r1, %lo(_start)
 1000004:	08406d14 	ori	at,at,436
    jmp r1
 1000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

01000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 1000020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 1000024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 1000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 100002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 100003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1000040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 1000044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 1000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 100004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 100005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 100006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 100007c:	10000326 	beq	r2,zero,100008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1000080:	20000226 	beq	r4,zero,100008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1000084:	10000ec0 	call	10000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1000088:	00000306 	br	1000098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 100008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 1000090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 1000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 1000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 100009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 10000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 10000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 10000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 10000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 10000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 10000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 10000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 10000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 10000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 10000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 10000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 10000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 10000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 10000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 10000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 10000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 10000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 10000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 10000e8:	ef80083a 	eret

010000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 10000ec:	defff904 	addi	sp,sp,-28
 10000f0:	dfc00615 	stw	ra,24(sp)
 10000f4:	df000515 	stw	fp,20(sp)
 10000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 10000fc:	0005313a 	rdctl	r2,ipending
 1000100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 1000104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 1000108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 100010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1000110:	00800044 	movi	r2,1
 1000114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 1000118:	e0ffff17 	ldw	r3,-4(fp)
 100011c:	e0bffe17 	ldw	r2,-8(fp)
 1000120:	1884703a 	and	r2,r3,r2
 1000124:	1005003a 	cmpeq	r2,r2,zero
 1000128:	1000161e 	bne	r2,zero,1000184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 100012c:	e0bffd17 	ldw	r2,-12(fp)
 1000130:	00c04034 	movhi	r3,256
 1000134:	18dc1704 	addi	r3,r3,28764
 1000138:	100490fa 	slli	r2,r2,3
 100013c:	10c5883a 	add	r2,r2,r3
 1000140:	11400017 	ldw	r5,0(r2)
 1000144:	e0bffd17 	ldw	r2,-12(fp)
 1000148:	00c04034 	movhi	r3,256
 100014c:	18dc1704 	addi	r3,r3,28764
 1000150:	100490fa 	slli	r2,r2,3
 1000154:	10c5883a 	add	r2,r2,r3
 1000158:	10800104 	addi	r2,r2,4
 100015c:	11000017 	ldw	r4,0(r2)
 1000160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1000164:	0005313a 	rdctl	r2,ipending
 1000168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 100016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 1000170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 1000174:	e0bfff17 	ldw	r2,-4(fp)
 1000178:	1004c03a 	cmpne	r2,r2,zero
 100017c:	103fe31e 	bne	r2,zero,100010c <alt_irq_handler+0x20>
 1000180:	00000706 	br	10001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 1000184:	e0bffe17 	ldw	r2,-8(fp)
 1000188:	1085883a 	add	r2,r2,r2
 100018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 1000190:	e0bffd17 	ldw	r2,-12(fp)
 1000194:	10800044 	addi	r2,r2,1
 1000198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 100019c:	003fde06 	br	1000118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 10001a0:	e037883a 	mov	sp,fp
 10001a4:	dfc00117 	ldw	ra,4(sp)
 10001a8:	df000017 	ldw	fp,0(sp)
 10001ac:	dec00204 	addi	sp,sp,8
 10001b0:	f800283a 	ret

Disassembly of section .text:

010001b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 10001b4:	06c06034 	movhi	sp,384
    ori sp, sp, %lo(__alt_stack_pointer)
 10001b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 10001bc:	06804034 	movhi	gp,256
    ori gp, gp, %lo(_gp)
 10001c0:	d6b65114 	ori	gp,gp,55620
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 10001c4:	00804034 	movhi	r2,256
    ori r2, r2, %lo(__bss_start)
 10001c8:	109c1014 	ori	r2,r2,28736

    movhi r3, %hi(__bss_end)
 10001cc:	00c04034 	movhi	r3,256
    ori r3, r3, %lo(__bss_end)
 10001d0:	18dcbb14 	ori	r3,r3,29420

    beq r2, r3, 1f
 10001d4:	10c00326 	beq	r2,r3,10001e4 <_start+0x30>

0:
    stw zero, (r2)
 10001d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 10001dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 10001e0:	10fffd36 	bltu	r2,r3,10001d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 10001e4:	100031c0 	call	100031c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 10001e8:	10004080 	call	1000408 <alt_main>

010001ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 10001ec:	003fff06 	br	10001ec <alt_after_alt_main>

010001f0 <main>:
#include "altera_up_avalon_video_pixel_buffer_dma.h"
#include <unistd.h>
#define drawer_base (volatile int *) 0xb020

int main()
{
 10001f0:	defff804 	addi	sp,sp,-32
 10001f4:	dfc00715 	stw	ra,28(sp)
 10001f8:	df000615 	stw	fp,24(sp)
 10001fc:	df000604 	addi	fp,sp,24
	alt_up_pixel_buffer_dma_dev* pixel_buffer;
	pixel_buffer = alt_up_pixel_buffer_dma_open_dev("/dev/pixel_buffer_dma");
 1000200:	01004034 	movhi	r4,256
 1000204:	21107c04 	addi	r4,r4,16880
 1000208:	10015880 	call	1001588 <alt_up_pixel_buffer_dma_open_dev>
 100020c:	e0bfff15 	stw	r2,-4(fp)
	if (pixel_buffer == 0) {
		//printf("error initializing pixel buffer (check name in alt_up_pixel_buffer_dma_open_dev)\n");
	}

	char *pixelEn = (char*) 0xb070;
 1000210:	00ac1c14 	movui	r2,45168
 1000214:	e0bffe15 	stw	r2,-8(fp)
	long *rgb = (long *) 0xb060;
 1000218:	00ac1814 	movui	r2,45152
 100021c:	e0bffd15 	stw	r2,-12(fp)
	int *positionX = (int *) 0xb040;
 1000220:	00ac1014 	movui	r2,45120
 1000224:	e0bffc15 	stw	r2,-16(fp)
	int *positionY = (int *) 0xb050;
 1000228:	00ac1414 	movui	r2,45136
 100022c:	e0bffb15 	stw	r2,-20(fp)
	unsigned int addr = 0;
 1000230:	e03ffa15 	stw	zero,-24(fp)

	alt_up_pixel_buffer_dma_change_back_buffer_address(pixel_buffer, PIXEL_BUFFER_BASE);
 1000234:	e13fff17 	ldw	r4,-4(fp)
 1000238:	01400234 	movhi	r5,8
 100023c:	10017740 	call	1001774 <alt_up_pixel_buffer_dma_change_back_buffer_address>
	alt_up_pixel_buffer_dma_swap_buffers(pixel_buffer);
 1000240:	e13fff17 	ldw	r4,-4(fp)
 1000244:	10017cc0 	call	10017cc <alt_up_pixel_buffer_dma_swap_buffers>
	while (alt_up_pixel_buffer_dma_check_swap_buffers_status(pixel_buffer));
 1000248:	e13fff17 	ldw	r4,-4(fp)
 100024c:	10018240 	call	1001824 <alt_up_pixel_buffer_dma_check_swap_buffers_status>
 1000250:	1004c03a 	cmpne	r2,r2,zero
 1000254:	103ffc1e 	bne	r2,zero,1000248 <main+0x58>
	alt_up_pixel_buffer_dma_clear_screen(pixel_buffer, 0);
 1000258:	e13fff17 	ldw	r4,-4(fp)
 100025c:	000b883a 	mov	r5,zero
 1000260:	10018580 	call	1001858 <alt_up_pixel_buffer_dma_clear_screen>

//		int hw = 1;
//
//		if (*pixelEn > 0) {
//			if (hw) {
				addr = 0;
 1000264:	e03ffa15 	stw	zero,-24(fp)
				addr |= ((*positionX & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
 1000268:	e0bffc17 	ldw	r2,-16(fp)
 100026c:	10800017 	ldw	r2,0(r2)
 1000270:	1007883a 	mov	r3,r2
 1000274:	e0bfff17 	ldw	r2,-4(fp)
 1000278:	10801217 	ldw	r2,72(r2)
 100027c:	1886703a 	and	r3,r3,r2
 1000280:	e0bfff17 	ldw	r2,-4(fp)
 1000284:	10801117 	ldw	r2,68(r2)
 1000288:	1886983a 	sll	r3,r3,r2
 100028c:	e0bffa17 	ldw	r2,-24(fp)
 1000290:	10c4b03a 	or	r2,r2,r3
 1000294:	e0bffa15 	stw	r2,-24(fp)
				addr |= ((*positionY & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
 1000298:	e0bffb17 	ldw	r2,-20(fp)
 100029c:	10800017 	ldw	r2,0(r2)
 10002a0:	1007883a 	mov	r3,r2
 10002a4:	e0bfff17 	ldw	r2,-4(fp)
 10002a8:	10801417 	ldw	r2,80(r2)
 10002ac:	1886703a 	and	r3,r3,r2
 10002b0:	e0bfff17 	ldw	r2,-4(fp)
 10002b4:	10801317 	ldw	r2,76(r2)
 10002b8:	1886983a 	sll	r3,r3,r2
 10002bc:	e0bffa17 	ldw	r2,-24(fp)
 10002c0:	10c4b03a 	or	r2,r2,r3
 10002c4:	e0bffa15 	stw	r2,-24(fp)
				IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, *rgb);
 10002c8:	e0bfff17 	ldw	r2,-4(fp)
 10002cc:	10800c17 	ldw	r2,48(r2)
 10002d0:	1007883a 	mov	r3,r2
 10002d4:	e0bffa17 	ldw	r2,-24(fp)
 10002d8:	1889883a 	add	r4,r3,r2
 10002dc:	e0bffd17 	ldw	r2,-12(fp)
 10002e0:	10c00017 	ldw	r3,0(r2)
 10002e4:	2005883a 	mov	r2,r4
 10002e8:	10c0002d 	sthio	r3,0(r2)
//			} else {
////				alt_up_pixel_buffer_dma_draw(pixel_buffer, 0xffff, 10, 10);
//				alt_up_pixel_buffer_dma_draw(pixel_buffer, *rgb, *positionX, *positionY);
//			}
//		}
			alt_up_pixel_buffer_dma_draw(pixel_buffer, *rgb, *positionX, *positionY);
 10002ec:	e0bffd17 	ldw	r2,-12(fp)
 10002f0:	10800017 	ldw	r2,0(r2)
 10002f4:	100b883a 	mov	r5,r2
 10002f8:	e0bffc17 	ldw	r2,-16(fp)
 10002fc:	10800017 	ldw	r2,0(r2)
 1000300:	100d883a 	mov	r6,r2
 1000304:	e0bffb17 	ldw	r2,-20(fp)
 1000308:	10800017 	ldw	r2,0(r2)
 100030c:	100f883a 	mov	r7,r2
 1000310:	e13fff17 	ldw	r4,-4(fp)
 1000314:	10015c80 	call	10015c8 <alt_up_pixel_buffer_dma_draw>
	}
 1000318:	003fd206 	br	1000264 <main+0x74>

0100031c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 100031c:	defffe04 	addi	sp,sp,-8
 1000320:	dfc00115 	stw	ra,4(sp)
 1000324:	df000015 	stw	fp,0(sp)
 1000328:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 100032c:	01004034 	movhi	r4,256
 1000330:	21165c04 	addi	r4,r4,22896
 1000334:	01404034 	movhi	r5,256
 1000338:	2950a804 	addi	r5,r5,17056
 100033c:	01804034 	movhi	r6,256
 1000340:	31965c04 	addi	r6,r6,22896
 1000344:	100039c0 	call	100039c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 1000348:	01004034 	movhi	r4,256
 100034c:	21000804 	addi	r4,r4,32
 1000350:	01404034 	movhi	r5,256
 1000354:	29400804 	addi	r5,r5,32
 1000358:	01804034 	movhi	r6,256
 100035c:	31806d04 	addi	r6,r6,436
 1000360:	100039c0 	call	100039c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 1000364:	01004034 	movhi	r4,256
 1000368:	21107c04 	addi	r4,r4,16880
 100036c:	01404034 	movhi	r5,256
 1000370:	29507c04 	addi	r5,r5,16880
 1000374:	01804034 	movhi	r6,256
 1000378:	3190a804 	addi	r6,r6,17056
 100037c:	100039c0 	call	100039c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 1000380:	1002ddc0 	call	1002ddc <alt_dcache_flush_all>
  alt_icache_flush_all();
 1000384:	10030940 	call	1003094 <alt_icache_flush_all>
}
 1000388:	e037883a 	mov	sp,fp
 100038c:	dfc00117 	ldw	ra,4(sp)
 1000390:	df000017 	ldw	fp,0(sp)
 1000394:	dec00204 	addi	sp,sp,8
 1000398:	f800283a 	ret

0100039c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 100039c:	defffc04 	addi	sp,sp,-16
 10003a0:	df000315 	stw	fp,12(sp)
 10003a4:	df000304 	addi	fp,sp,12
 10003a8:	e13ffd15 	stw	r4,-12(fp)
 10003ac:	e17ffe15 	stw	r5,-8(fp)
 10003b0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 10003b4:	e0fffe17 	ldw	r3,-8(fp)
 10003b8:	e0bffd17 	ldw	r2,-12(fp)
 10003bc:	18800e26 	beq	r3,r2,10003f8 <alt_load_section+0x5c>
  {
    while( to != end )
 10003c0:	00000a06 	br	10003ec <alt_load_section+0x50>
    {
      *to++ = *from++;
 10003c4:	e0bffd17 	ldw	r2,-12(fp)
 10003c8:	10c00017 	ldw	r3,0(r2)
 10003cc:	e0bffe17 	ldw	r2,-8(fp)
 10003d0:	10c00015 	stw	r3,0(r2)
 10003d4:	e0bffe17 	ldw	r2,-8(fp)
 10003d8:	10800104 	addi	r2,r2,4
 10003dc:	e0bffe15 	stw	r2,-8(fp)
 10003e0:	e0bffd17 	ldw	r2,-12(fp)
 10003e4:	10800104 	addi	r2,r2,4
 10003e8:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 10003ec:	e0fffe17 	ldw	r3,-8(fp)
 10003f0:	e0bfff17 	ldw	r2,-4(fp)
 10003f4:	18bff31e 	bne	r3,r2,10003c4 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 10003f8:	e037883a 	mov	sp,fp
 10003fc:	df000017 	ldw	fp,0(sp)
 1000400:	dec00104 	addi	sp,sp,4
 1000404:	f800283a 	ret

01000408 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 1000408:	defffd04 	addi	sp,sp,-12
 100040c:	dfc00215 	stw	ra,8(sp)
 1000410:	df000115 	stw	fp,4(sp)
 1000414:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 1000418:	0009883a 	mov	r4,zero
 100041c:	10004740 	call	1000474 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 1000420:	10004a80 	call	10004a8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 1000424:	01004034 	movhi	r4,256
 1000428:	21108204 	addi	r4,r4,16904
 100042c:	01404034 	movhi	r5,256
 1000430:	29508204 	addi	r5,r5,16904
 1000434:	01804034 	movhi	r6,256
 1000438:	31908204 	addi	r6,r6,16904
 100043c:	10034540 	call	1003454 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 1000440:	1002f380 	call	1002f38 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 1000444:	01004034 	movhi	r4,256
 1000448:	210be704 	addi	r4,r4,12188
 100044c:	1003bdc0 	call	1003bdc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 1000450:	d125bf17 	ldw	r4,-26884(gp)
 1000454:	d165c017 	ldw	r5,-26880(gp)
 1000458:	d1a5c117 	ldw	r6,-26876(gp)
 100045c:	10001f00 	call	10001f0 <main>
 1000460:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 1000464:	01000044 	movi	r4,1
 1000468:	1002c7c0 	call	1002c7c <close>
  exit (result);
 100046c:	e13fff17 	ldw	r4,-4(fp)
 1000470:	1003bf00 	call	1003bf0 <exit>

01000474 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 1000474:	defffd04 	addi	sp,sp,-12
 1000478:	dfc00215 	stw	ra,8(sp)
 100047c:	df000115 	stw	fp,4(sp)
 1000480:	df000104 	addi	fp,sp,4
 1000484:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
 1000488:	10039cc0 	call	10039cc <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 100048c:	00800044 	movi	r2,1
 1000490:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 1000494:	e037883a 	mov	sp,fp
 1000498:	dfc00117 	ldw	ra,4(sp)
 100049c:	df000017 	ldw	fp,0(sp)
 10004a0:	dec00204 	addi	sp,sp,8
 10004a4:	f800283a 	ret

010004a8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 10004a8:	defffd04 	addi	sp,sp,-12
 10004ac:	dfc00215 	stw	ra,8(sp)
 10004b0:	df000115 	stw	fp,4(sp)
 10004b4:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 10004b8:	01004034 	movhi	r4,256
 10004bc:	2110b204 	addi	r4,r4,17096
 10004c0:	000b883a 	mov	r5,zero
 10004c4:	01800144 	movi	r6,5
 10004c8:	10009200 	call	1000920 <altera_avalon_jtag_uart_init>
 10004cc:	01004034 	movhi	r4,256
 10004d0:	2110a804 	addi	r4,r4,17056
 10004d4:	10007a00 	call	10007a0 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( CHAR_DRAWER, char_drawer);
 10004d8:	00804034 	movhi	r2,256
 10004dc:	1094c004 	addi	r2,r2,21248
 10004e0:	10800a17 	ldw	r2,40(r2)
 10004e4:	10800104 	addi	r2,r2,4
 10004e8:	10800017 	ldw	r2,0(r2)
 10004ec:	10ffffcc 	andi	r3,r2,65535
 10004f0:	00804034 	movhi	r2,256
 10004f4:	1094c004 	addi	r2,r2,21248
 10004f8:	10c00c15 	stw	r3,48(r2)
 10004fc:	00804034 	movhi	r2,256
 1000500:	1094c004 	addi	r2,r2,21248
 1000504:	10800a17 	ldw	r2,40(r2)
 1000508:	10800104 	addi	r2,r2,4
 100050c:	10800017 	ldw	r2,0(r2)
 1000510:	1005d43a 	srai	r2,r2,16
 1000514:	10ffffcc 	andi	r3,r2,65535
 1000518:	00804034 	movhi	r2,256
 100051c:	1094c004 	addi	r2,r2,21248
 1000520:	10c00d15 	stw	r3,52(r2)
 1000524:	00804034 	movhi	r2,256
 1000528:	1094c004 	addi	r2,r2,21248
 100052c:	10800c17 	ldw	r2,48(r2)
 1000530:	10801068 	cmpgeui	r2,r2,65
 1000534:	1000081e 	bne	r2,zero,1000558 <alt_sys_init+0xb0>
 1000538:	00c04034 	movhi	r3,256
 100053c:	18d4c004 	addi	r3,r3,21248
 1000540:	00800fc4 	movi	r2,63
 1000544:	18800f15 	stw	r2,60(r3)
 1000548:	00c04034 	movhi	r3,256
 100054c:	18d4c004 	addi	r3,r3,21248
 1000550:	00800184 	movi	r2,6
 1000554:	18801015 	stw	r2,64(r3)
 1000558:	00804034 	movhi	r2,256
 100055c:	1094c004 	addi	r2,r2,21248
 1000560:	10800d17 	ldw	r2,52(r2)
 1000564:	10800868 	cmpgeui	r2,r2,33
 1000568:	1000041e 	bne	r2,zero,100057c <alt_sys_init+0xd4>
 100056c:	00c04034 	movhi	r3,256
 1000570:	18d4c004 	addi	r3,r3,21248
 1000574:	008007c4 	movi	r2,31
 1000578:	18801115 	stw	r2,68(r3)
 100057c:	01004034 	movhi	r4,256
 1000580:	2114c004 	addi	r4,r4,21248
 1000584:	10012840 	call	1001284 <alt_up_char_buffer_init>
 1000588:	01004034 	movhi	r4,256
 100058c:	2114c004 	addi	r4,r4,21248
 1000590:	10007a00 	call	10007a0 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( PIXEL_BUFFER_DMA, pixel_buffer_dma);
 1000594:	00804034 	movhi	r2,256
 1000598:	1094d204 	addi	r2,r2,21320
 100059c:	10800a17 	ldw	r2,40(r2)
 10005a0:	10800017 	ldw	r2,0(r2)
 10005a4:	1007883a 	mov	r3,r2
 10005a8:	00804034 	movhi	r2,256
 10005ac:	1094d204 	addi	r2,r2,21320
 10005b0:	10c00b15 	stw	r3,44(r2)
 10005b4:	00804034 	movhi	r2,256
 10005b8:	1094d204 	addi	r2,r2,21320
 10005bc:	10800a17 	ldw	r2,40(r2)
 10005c0:	10800104 	addi	r2,r2,4
 10005c4:	10800017 	ldw	r2,0(r2)
 10005c8:	1007883a 	mov	r3,r2
 10005cc:	00804034 	movhi	r2,256
 10005d0:	1094d204 	addi	r2,r2,21320
 10005d4:	10c00c15 	stw	r3,48(r2)
 10005d8:	00804034 	movhi	r2,256
 10005dc:	1094d204 	addi	r2,r2,21320
 10005e0:	10800a17 	ldw	r2,40(r2)
 10005e4:	10800204 	addi	r2,r2,8
 10005e8:	10800017 	ldw	r2,0(r2)
 10005ec:	10ffffcc 	andi	r3,r2,65535
 10005f0:	00804034 	movhi	r2,256
 10005f4:	1094d204 	addi	r2,r2,21320
 10005f8:	10c00f15 	stw	r3,60(r2)
 10005fc:	00804034 	movhi	r2,256
 1000600:	1094d204 	addi	r2,r2,21320
 1000604:	10800a17 	ldw	r2,40(r2)
 1000608:	10800204 	addi	r2,r2,8
 100060c:	10800017 	ldw	r2,0(r2)
 1000610:	1005d43a 	srai	r2,r2,16
 1000614:	10ffffcc 	andi	r3,r2,65535
 1000618:	00804034 	movhi	r2,256
 100061c:	1094d204 	addi	r2,r2,21320
 1000620:	10c01015 	stw	r3,64(r2)
 1000624:	00804034 	movhi	r2,256
 1000628:	1094d204 	addi	r2,r2,21320
 100062c:	10800a17 	ldw	r2,40(r2)
 1000630:	10800304 	addi	r2,r2,12
 1000634:	10800017 	ldw	r2,0(r2)
 1000638:	1005d07a 	srai	r2,r2,1
 100063c:	10c0004c 	andi	r3,r2,1
 1000640:	00804034 	movhi	r2,256
 1000644:	1094d204 	addi	r2,r2,21320
 1000648:	10c00d15 	stw	r3,52(r2)
 100064c:	00804034 	movhi	r2,256
 1000650:	1094d204 	addi	r2,r2,21320
 1000654:	10800a17 	ldw	r2,40(r2)
 1000658:	10800304 	addi	r2,r2,12
 100065c:	10800017 	ldw	r2,0(r2)
 1000660:	1005d13a 	srai	r2,r2,4
 1000664:	10c003cc 	andi	r3,r2,15
 1000668:	00804034 	movhi	r2,256
 100066c:	1094d204 	addi	r2,r2,21320
 1000670:	10c00e15 	stw	r3,56(r2)
 1000674:	00804034 	movhi	r2,256
 1000678:	1094d204 	addi	r2,r2,21320
 100067c:	10800a17 	ldw	r2,40(r2)
 1000680:	10800304 	addi	r2,r2,12
 1000684:	10800017 	ldw	r2,0(r2)
 1000688:	1005d43a 	srai	r2,r2,16
 100068c:	1007883a 	mov	r3,r2
 1000690:	00bfffc4 	movi	r2,-1
 1000694:	1884703a 	and	r2,r3,r2
 1000698:	e0bfff45 	stb	r2,-3(fp)
 100069c:	00804034 	movhi	r2,256
 10006a0:	1094d204 	addi	r2,r2,21320
 10006a4:	10800a17 	ldw	r2,40(r2)
 10006a8:	10800304 	addi	r2,r2,12
 10006ac:	10800017 	ldw	r2,0(r2)
 10006b0:	1005d63a 	srai	r2,r2,24
 10006b4:	1007883a 	mov	r3,r2
 10006b8:	00bfffc4 	movi	r2,-1
 10006bc:	1884703a 	and	r2,r3,r2
 10006c0:	e0bfff05 	stb	r2,-4(fp)
 10006c4:	00804034 	movhi	r2,256
 10006c8:	1094d204 	addi	r2,r2,21320
 10006cc:	10800e17 	ldw	r2,56(r2)
 10006d0:	10800058 	cmpnei	r2,r2,1
 10006d4:	1000041e 	bne	r2,zero,10006e8 <alt_sys_init+0x240>
 10006d8:	00804034 	movhi	r2,256
 10006dc:	1094d204 	addi	r2,r2,21320
 10006e0:	10001115 	stw	zero,68(r2)
 10006e4:	00000e06 	br	1000720 <alt_sys_init+0x278>
 10006e8:	00804034 	movhi	r2,256
 10006ec:	1094d204 	addi	r2,r2,21320
 10006f0:	10800e17 	ldw	r2,56(r2)
 10006f4:	10800098 	cmpnei	r2,r2,2
 10006f8:	1000051e 	bne	r2,zero,1000710 <alt_sys_init+0x268>
 10006fc:	00c04034 	movhi	r3,256
 1000700:	18d4d204 	addi	r3,r3,21320
 1000704:	00800044 	movi	r2,1
 1000708:	18801115 	stw	r2,68(r3)
 100070c:	00000406 	br	1000720 <alt_sys_init+0x278>
 1000710:	00c04034 	movhi	r3,256
 1000714:	18d4d204 	addi	r3,r3,21320
 1000718:	00800084 	movi	r2,2
 100071c:	18801115 	stw	r2,68(r3)
 1000720:	e0ffff43 	ldbu	r3,-3(fp)
 1000724:	00800804 	movi	r2,32
 1000728:	10c7c83a 	sub	r3,r2,r3
 100072c:	00bfffc4 	movi	r2,-1
 1000730:	10c6d83a 	srl	r3,r2,r3
 1000734:	00804034 	movhi	r2,256
 1000738:	1094d204 	addi	r2,r2,21320
 100073c:	10c01215 	stw	r3,72(r2)
 1000740:	e0ffff43 	ldbu	r3,-3(fp)
 1000744:	00804034 	movhi	r2,256
 1000748:	1094d204 	addi	r2,r2,21320
 100074c:	10801117 	ldw	r2,68(r2)
 1000750:	1887883a 	add	r3,r3,r2
 1000754:	00804034 	movhi	r2,256
 1000758:	1094d204 	addi	r2,r2,21320
 100075c:	10c01315 	stw	r3,76(r2)
 1000760:	e0ffff03 	ldbu	r3,-4(fp)
 1000764:	00800804 	movi	r2,32
 1000768:	10c7c83a 	sub	r3,r2,r3
 100076c:	00bfffc4 	movi	r2,-1
 1000770:	10c6d83a 	srl	r3,r2,r3
 1000774:	00804034 	movhi	r2,256
 1000778:	1094d204 	addi	r2,r2,21320
 100077c:	10c01415 	stw	r3,80(r2)
 1000780:	01004034 	movhi	r4,256
 1000784:	2114d204 	addi	r4,r4,21320
 1000788:	10007a00 	call	10007a0 <alt_dev_reg>
}
 100078c:	e037883a 	mov	sp,fp
 1000790:	dfc00117 	ldw	ra,4(sp)
 1000794:	df000017 	ldw	fp,0(sp)
 1000798:	dec00204 	addi	sp,sp,8
 100079c:	f800283a 	ret

010007a0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 10007a0:	defffd04 	addi	sp,sp,-12
 10007a4:	dfc00215 	stw	ra,8(sp)
 10007a8:	df000115 	stw	fp,4(sp)
 10007ac:	df000104 	addi	fp,sp,4
 10007b0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 10007b4:	e13fff17 	ldw	r4,-4(fp)
 10007b8:	01404034 	movhi	r5,256
 10007bc:	29565304 	addi	r5,r5,22860
 10007c0:	1002e240 	call	1002e24 <alt_dev_llist_insert>
}
 10007c4:	e037883a 	mov	sp,fp
 10007c8:	dfc00117 	ldw	ra,4(sp)
 10007cc:	df000017 	ldw	fp,0(sp)
 10007d0:	dec00204 	addi	sp,sp,8
 10007d4:	f800283a 	ret

010007d8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 10007d8:	defffa04 	addi	sp,sp,-24
 10007dc:	dfc00515 	stw	ra,20(sp)
 10007e0:	df000415 	stw	fp,16(sp)
 10007e4:	df000404 	addi	fp,sp,16
 10007e8:	e13ffd15 	stw	r4,-12(fp)
 10007ec:	e17ffe15 	stw	r5,-8(fp)
 10007f0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 10007f4:	e0bffd17 	ldw	r2,-12(fp)
 10007f8:	10800017 	ldw	r2,0(r2)
 10007fc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 1000800:	e0bffc17 	ldw	r2,-16(fp)
 1000804:	11000a04 	addi	r4,r2,40
 1000808:	e0bffd17 	ldw	r2,-12(fp)
 100080c:	11c00217 	ldw	r7,8(r2)
 1000810:	e17ffe17 	ldw	r5,-8(fp)
 1000814:	e1bfff17 	ldw	r6,-4(fp)
 1000818:	1000e200 	call	1000e20 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 100081c:	e037883a 	mov	sp,fp
 1000820:	dfc00117 	ldw	ra,4(sp)
 1000824:	df000017 	ldw	fp,0(sp)
 1000828:	dec00204 	addi	sp,sp,8
 100082c:	f800283a 	ret

01000830 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 1000830:	defffa04 	addi	sp,sp,-24
 1000834:	dfc00515 	stw	ra,20(sp)
 1000838:	df000415 	stw	fp,16(sp)
 100083c:	df000404 	addi	fp,sp,16
 1000840:	e13ffd15 	stw	r4,-12(fp)
 1000844:	e17ffe15 	stw	r5,-8(fp)
 1000848:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 100084c:	e0bffd17 	ldw	r2,-12(fp)
 1000850:	10800017 	ldw	r2,0(r2)
 1000854:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 1000858:	e0bffc17 	ldw	r2,-16(fp)
 100085c:	11000a04 	addi	r4,r2,40
 1000860:	e0bffd17 	ldw	r2,-12(fp)
 1000864:	11c00217 	ldw	r7,8(r2)
 1000868:	e17ffe17 	ldw	r5,-8(fp)
 100086c:	e1bfff17 	ldw	r6,-4(fp)
 1000870:	10010440 	call	1001044 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 1000874:	e037883a 	mov	sp,fp
 1000878:	dfc00117 	ldw	ra,4(sp)
 100087c:	df000017 	ldw	fp,0(sp)
 1000880:	dec00204 	addi	sp,sp,8
 1000884:	f800283a 	ret

01000888 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 1000888:	defffc04 	addi	sp,sp,-16
 100088c:	dfc00315 	stw	ra,12(sp)
 1000890:	df000215 	stw	fp,8(sp)
 1000894:	df000204 	addi	fp,sp,8
 1000898:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 100089c:	e0bfff17 	ldw	r2,-4(fp)
 10008a0:	10800017 	ldw	r2,0(r2)
 10008a4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 10008a8:	e0bffe17 	ldw	r2,-8(fp)
 10008ac:	11000a04 	addi	r4,r2,40
 10008b0:	e0bfff17 	ldw	r2,-4(fp)
 10008b4:	11400217 	ldw	r5,8(r2)
 10008b8:	1000cb80 	call	1000cb8 <altera_avalon_jtag_uart_close>
}
 10008bc:	e037883a 	mov	sp,fp
 10008c0:	dfc00117 	ldw	ra,4(sp)
 10008c4:	df000017 	ldw	fp,0(sp)
 10008c8:	dec00204 	addi	sp,sp,8
 10008cc:	f800283a 	ret

010008d0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 10008d0:	defffa04 	addi	sp,sp,-24
 10008d4:	dfc00515 	stw	ra,20(sp)
 10008d8:	df000415 	stw	fp,16(sp)
 10008dc:	df000404 	addi	fp,sp,16
 10008e0:	e13ffd15 	stw	r4,-12(fp)
 10008e4:	e17ffe15 	stw	r5,-8(fp)
 10008e8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 10008ec:	e0bffd17 	ldw	r2,-12(fp)
 10008f0:	10800017 	ldw	r2,0(r2)
 10008f4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 10008f8:	e0bffc17 	ldw	r2,-16(fp)
 10008fc:	11000a04 	addi	r4,r2,40
 1000900:	e17ffe17 	ldw	r5,-8(fp)
 1000904:	e1bfff17 	ldw	r6,-4(fp)
 1000908:	1000d2c0 	call	1000d2c <altera_avalon_jtag_uart_ioctl>
}
 100090c:	e037883a 	mov	sp,fp
 1000910:	dfc00117 	ldw	ra,4(sp)
 1000914:	df000017 	ldw	fp,0(sp)
 1000918:	dec00204 	addi	sp,sp,8
 100091c:	f800283a 	ret

01000920 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 1000920:	defffa04 	addi	sp,sp,-24
 1000924:	dfc00515 	stw	ra,20(sp)
 1000928:	df000415 	stw	fp,16(sp)
 100092c:	df000404 	addi	fp,sp,16
 1000930:	e13ffd15 	stw	r4,-12(fp)
 1000934:	e17ffe15 	stw	r5,-8(fp)
 1000938:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 100093c:	e0fffd17 	ldw	r3,-12(fp)
 1000940:	00800044 	movi	r2,1
 1000944:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 1000948:	e0bffd17 	ldw	r2,-12(fp)
 100094c:	10800017 	ldw	r2,0(r2)
 1000950:	11000104 	addi	r4,r2,4
 1000954:	e0bffd17 	ldw	r2,-12(fp)
 1000958:	10800817 	ldw	r2,32(r2)
 100095c:	1007883a 	mov	r3,r2
 1000960:	2005883a 	mov	r2,r4
 1000964:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 1000968:	e13ffe17 	ldw	r4,-8(fp)
 100096c:	e17fff17 	ldw	r5,-4(fp)
 1000970:	d8000015 	stw	zero,0(sp)
 1000974:	01804034 	movhi	r6,256
 1000978:	31827804 	addi	r6,r6,2528
 100097c:	e1fffd17 	ldw	r7,-12(fp)
 1000980:	10030b00 	call	10030b0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 1000984:	e0bffd17 	ldw	r2,-12(fp)
 1000988:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 100098c:	e0bffd17 	ldw	r2,-12(fp)
 1000990:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 1000994:	00804034 	movhi	r2,256
 1000998:	109c1404 	addi	r2,r2,28752
 100099c:	10800017 	ldw	r2,0(r2)
 10009a0:	100b883a 	mov	r5,r2
 10009a4:	01804034 	movhi	r6,256
 10009a8:	31830204 	addi	r6,r6,3080
 10009ac:	e1fffd17 	ldw	r7,-12(fp)
 10009b0:	1002b280 	call	1002b28 <alt_alarm_start>
 10009b4:	1004403a 	cmpge	r2,r2,zero
 10009b8:	1000041e 	bne	r2,zero,10009cc <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 10009bc:	e0fffd17 	ldw	r3,-12(fp)
 10009c0:	00a00034 	movhi	r2,32768
 10009c4:	10bfffc4 	addi	r2,r2,-1
 10009c8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 10009cc:	e037883a 	mov	sp,fp
 10009d0:	dfc00117 	ldw	ra,4(sp)
 10009d4:	df000017 	ldw	fp,0(sp)
 10009d8:	dec00204 	addi	sp,sp,8
 10009dc:	f800283a 	ret

010009e0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 10009e0:	defff804 	addi	sp,sp,-32
 10009e4:	df000715 	stw	fp,28(sp)
 10009e8:	df000704 	addi	fp,sp,28
 10009ec:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 10009f0:	e0bfff17 	ldw	r2,-4(fp)
 10009f4:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
 10009f8:	e0bffe17 	ldw	r2,-8(fp)
 10009fc:	10800017 	ldw	r2,0(r2)
 1000a00:	e0bffd15 	stw	r2,-12(fp)
 1000a04:	00000006 	br	1000a08 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1000a08:	e0bffd17 	ldw	r2,-12(fp)
 1000a0c:	10800104 	addi	r2,r2,4
 1000a10:	10800037 	ldwio	r2,0(r2)
 1000a14:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 1000a18:	e0bffc17 	ldw	r2,-16(fp)
 1000a1c:	1080c00c 	andi	r2,r2,768
 1000a20:	1005003a 	cmpeq	r2,r2,zero
 1000a24:	1000741e 	bne	r2,zero,1000bf8 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 1000a28:	e0bffc17 	ldw	r2,-16(fp)
 1000a2c:	1080400c 	andi	r2,r2,256
 1000a30:	1005003a 	cmpeq	r2,r2,zero
 1000a34:	1000351e 	bne	r2,zero,1000b0c <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 1000a38:	00800074 	movhi	r2,1
 1000a3c:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1000a40:	e0bffe17 	ldw	r2,-8(fp)
 1000a44:	10800a17 	ldw	r2,40(r2)
 1000a48:	10800044 	addi	r2,r2,1
 1000a4c:	1081ffcc 	andi	r2,r2,2047
 1000a50:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
 1000a54:	e0bffe17 	ldw	r2,-8(fp)
 1000a58:	10c00b17 	ldw	r3,44(r2)
 1000a5c:	e0bffa17 	ldw	r2,-24(fp)
 1000a60:	18801626 	beq	r3,r2,1000abc <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 1000a64:	e0bffd17 	ldw	r2,-12(fp)
 1000a68:	10800037 	ldwio	r2,0(r2)
 1000a6c:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 1000a70:	e0bffb17 	ldw	r2,-20(fp)
 1000a74:	10a0000c 	andi	r2,r2,32768
 1000a78:	1005003a 	cmpeq	r2,r2,zero
 1000a7c:	10000f1e 	bne	r2,zero,1000abc <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 1000a80:	e0bffe17 	ldw	r2,-8(fp)
 1000a84:	10c00a17 	ldw	r3,40(r2)
 1000a88:	e0bffb17 	ldw	r2,-20(fp)
 1000a8c:	1009883a 	mov	r4,r2
 1000a90:	e0bffe17 	ldw	r2,-8(fp)
 1000a94:	1885883a 	add	r2,r3,r2
 1000a98:	10800e04 	addi	r2,r2,56
 1000a9c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1000aa0:	e0bffe17 	ldw	r2,-8(fp)
 1000aa4:	10800a17 	ldw	r2,40(r2)
 1000aa8:	10800044 	addi	r2,r2,1
 1000aac:	10c1ffcc 	andi	r3,r2,2047
 1000ab0:	e0bffe17 	ldw	r2,-8(fp)
 1000ab4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 1000ab8:	003fe106 	br	1000a40 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 1000abc:	e0bffb17 	ldw	r2,-20(fp)
 1000ac0:	10bfffec 	andhi	r2,r2,65535
 1000ac4:	1005003a 	cmpeq	r2,r2,zero
 1000ac8:	1000101e 	bne	r2,zero,1000b0c <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1000acc:	e0bffe17 	ldw	r2,-8(fp)
 1000ad0:	10c00817 	ldw	r3,32(r2)
 1000ad4:	00bfff84 	movi	r2,-2
 1000ad8:	1886703a 	and	r3,r3,r2
 1000adc:	e0bffe17 	ldw	r2,-8(fp)
 1000ae0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 1000ae4:	e0bffd17 	ldw	r2,-12(fp)
 1000ae8:	11000104 	addi	r4,r2,4
 1000aec:	e0bffe17 	ldw	r2,-8(fp)
 1000af0:	10800817 	ldw	r2,32(r2)
 1000af4:	1007883a 	mov	r3,r2
 1000af8:	2005883a 	mov	r2,r4
 1000afc:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1000b00:	e0bffd17 	ldw	r2,-12(fp)
 1000b04:	10800104 	addi	r2,r2,4
 1000b08:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 1000b0c:	e0bffc17 	ldw	r2,-16(fp)
 1000b10:	1080800c 	andi	r2,r2,512
 1000b14:	1005003a 	cmpeq	r2,r2,zero
 1000b18:	103fbb1e 	bne	r2,zero,1000a08 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 1000b1c:	e0bffc17 	ldw	r2,-16(fp)
 1000b20:	10bfffec 	andhi	r2,r2,65535
 1000b24:	1004d43a 	srli	r2,r2,16
 1000b28:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 1000b2c:	00001506 	br	1000b84 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 1000b30:	e13ffd17 	ldw	r4,-12(fp)
 1000b34:	e0bffe17 	ldw	r2,-8(fp)
 1000b38:	10c00d17 	ldw	r3,52(r2)
 1000b3c:	e0bffe17 	ldw	r2,-8(fp)
 1000b40:	1885883a 	add	r2,r3,r2
 1000b44:	10820e04 	addi	r2,r2,2104
 1000b48:	10800003 	ldbu	r2,0(r2)
 1000b4c:	10c03fcc 	andi	r3,r2,255
 1000b50:	18c0201c 	xori	r3,r3,128
 1000b54:	18ffe004 	addi	r3,r3,-128
 1000b58:	2005883a 	mov	r2,r4
 1000b5c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1000b60:	e0bffe17 	ldw	r2,-8(fp)
 1000b64:	10800d17 	ldw	r2,52(r2)
 1000b68:	10800044 	addi	r2,r2,1
 1000b6c:	10c1ffcc 	andi	r3,r2,2047
 1000b70:	e0bffe17 	ldw	r2,-8(fp)
 1000b74:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 1000b78:	e0bff917 	ldw	r2,-28(fp)
 1000b7c:	10bfffc4 	addi	r2,r2,-1
 1000b80:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 1000b84:	e0bff917 	ldw	r2,-28(fp)
 1000b88:	1005003a 	cmpeq	r2,r2,zero
 1000b8c:	1000051e 	bne	r2,zero,1000ba4 <altera_avalon_jtag_uart_irq+0x1c4>
 1000b90:	e0bffe17 	ldw	r2,-8(fp)
 1000b94:	10c00d17 	ldw	r3,52(r2)
 1000b98:	e0bffe17 	ldw	r2,-8(fp)
 1000b9c:	10800c17 	ldw	r2,48(r2)
 1000ba0:	18bfe31e 	bne	r3,r2,1000b30 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 1000ba4:	e0bff917 	ldw	r2,-28(fp)
 1000ba8:	1005003a 	cmpeq	r2,r2,zero
 1000bac:	103f961e 	bne	r2,zero,1000a08 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 1000bb0:	e0bffe17 	ldw	r2,-8(fp)
 1000bb4:	10c00817 	ldw	r3,32(r2)
 1000bb8:	00bfff44 	movi	r2,-3
 1000bbc:	1886703a 	and	r3,r3,r2
 1000bc0:	e0bffe17 	ldw	r2,-8(fp)
 1000bc4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1000bc8:	e0bffe17 	ldw	r2,-8(fp)
 1000bcc:	10800017 	ldw	r2,0(r2)
 1000bd0:	11000104 	addi	r4,r2,4
 1000bd4:	e0bffe17 	ldw	r2,-8(fp)
 1000bd8:	10800817 	ldw	r2,32(r2)
 1000bdc:	1007883a 	mov	r3,r2
 1000be0:	2005883a 	mov	r2,r4
 1000be4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1000be8:	e0bffd17 	ldw	r2,-12(fp)
 1000bec:	10800104 	addi	r2,r2,4
 1000bf0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 1000bf4:	003f8406 	br	1000a08 <altera_avalon_jtag_uart_irq+0x28>
}
 1000bf8:	e037883a 	mov	sp,fp
 1000bfc:	df000017 	ldw	fp,0(sp)
 1000c00:	dec00104 	addi	sp,sp,4
 1000c04:	f800283a 	ret

01000c08 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 1000c08:	defffc04 	addi	sp,sp,-16
 1000c0c:	df000315 	stw	fp,12(sp)
 1000c10:	df000304 	addi	fp,sp,12
 1000c14:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 1000c18:	e0bfff17 	ldw	r2,-4(fp)
 1000c1c:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 1000c20:	e0bffe17 	ldw	r2,-8(fp)
 1000c24:	10800017 	ldw	r2,0(r2)
 1000c28:	10800104 	addi	r2,r2,4
 1000c2c:	10800037 	ldwio	r2,0(r2)
 1000c30:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 1000c34:	e0bffd17 	ldw	r2,-12(fp)
 1000c38:	1081000c 	andi	r2,r2,1024
 1000c3c:	1005003a 	cmpeq	r2,r2,zero
 1000c40:	10000c1e 	bne	r2,zero,1000c74 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 1000c44:	e0bffe17 	ldw	r2,-8(fp)
 1000c48:	10800017 	ldw	r2,0(r2)
 1000c4c:	11000104 	addi	r4,r2,4
 1000c50:	e0bffe17 	ldw	r2,-8(fp)
 1000c54:	10800817 	ldw	r2,32(r2)
 1000c58:	10810014 	ori	r2,r2,1024
 1000c5c:	1007883a 	mov	r3,r2
 1000c60:	2005883a 	mov	r2,r4
 1000c64:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 1000c68:	e0bffe17 	ldw	r2,-8(fp)
 1000c6c:	10000915 	stw	zero,36(r2)
 1000c70:	00000a06 	br	1000c9c <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 1000c74:	e0bffe17 	ldw	r2,-8(fp)
 1000c78:	10c00917 	ldw	r3,36(r2)
 1000c7c:	00a00034 	movhi	r2,32768
 1000c80:	10bfff04 	addi	r2,r2,-4
 1000c84:	10c00536 	bltu	r2,r3,1000c9c <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
 1000c88:	e0bffe17 	ldw	r2,-8(fp)
 1000c8c:	10800917 	ldw	r2,36(r2)
 1000c90:	10c00044 	addi	r3,r2,1
 1000c94:	e0bffe17 	ldw	r2,-8(fp)
 1000c98:	10c00915 	stw	r3,36(r2)
 1000c9c:	00804034 	movhi	r2,256
 1000ca0:	109c1404 	addi	r2,r2,28752
 1000ca4:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 1000ca8:	e037883a 	mov	sp,fp
 1000cac:	df000017 	ldw	fp,0(sp)
 1000cb0:	dec00104 	addi	sp,sp,4
 1000cb4:	f800283a 	ret

01000cb8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 1000cb8:	defffc04 	addi	sp,sp,-16
 1000cbc:	df000315 	stw	fp,12(sp)
 1000cc0:	df000304 	addi	fp,sp,12
 1000cc4:	e13ffd15 	stw	r4,-12(fp)
 1000cc8:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 1000ccc:	00000706 	br	1000cec <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 1000cd0:	e0bffe17 	ldw	r2,-8(fp)
 1000cd4:	1090000c 	andi	r2,r2,16384
 1000cd8:	1005003a 	cmpeq	r2,r2,zero
 1000cdc:	1000031e 	bne	r2,zero,1000cec <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 1000ce0:	00bffd44 	movi	r2,-11
 1000ce4:	e0bfff15 	stw	r2,-4(fp)
 1000ce8:	00000b06 	br	1000d18 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 1000cec:	e0bffd17 	ldw	r2,-12(fp)
 1000cf0:	10c00d17 	ldw	r3,52(r2)
 1000cf4:	e0bffd17 	ldw	r2,-12(fp)
 1000cf8:	10800c17 	ldw	r2,48(r2)
 1000cfc:	18800526 	beq	r3,r2,1000d14 <altera_avalon_jtag_uart_close+0x5c>
 1000d00:	e0bffd17 	ldw	r2,-12(fp)
 1000d04:	10c00917 	ldw	r3,36(r2)
 1000d08:	e0bffd17 	ldw	r2,-12(fp)
 1000d0c:	10800117 	ldw	r2,4(r2)
 1000d10:	18bfef36 	bltu	r3,r2,1000cd0 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 1000d14:	e03fff15 	stw	zero,-4(fp)
 1000d18:	e0bfff17 	ldw	r2,-4(fp)
}
 1000d1c:	e037883a 	mov	sp,fp
 1000d20:	df000017 	ldw	fp,0(sp)
 1000d24:	dec00104 	addi	sp,sp,4
 1000d28:	f800283a 	ret

01000d2c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 1000d2c:	defff804 	addi	sp,sp,-32
 1000d30:	df000715 	stw	fp,28(sp)
 1000d34:	df000704 	addi	fp,sp,28
 1000d38:	e13ffb15 	stw	r4,-20(fp)
 1000d3c:	e17ffc15 	stw	r5,-16(fp)
 1000d40:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 1000d44:	00bff9c4 	movi	r2,-25
 1000d48:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 1000d4c:	e0bffc17 	ldw	r2,-16(fp)
 1000d50:	e0bfff15 	stw	r2,-4(fp)
 1000d54:	e0ffff17 	ldw	r3,-4(fp)
 1000d58:	189a8060 	cmpeqi	r2,r3,27137
 1000d5c:	1000041e 	bne	r2,zero,1000d70 <altera_avalon_jtag_uart_ioctl+0x44>
 1000d60:	e0ffff17 	ldw	r3,-4(fp)
 1000d64:	189a80a0 	cmpeqi	r2,r3,27138
 1000d68:	10001b1e 	bne	r2,zero,1000dd8 <altera_avalon_jtag_uart_ioctl+0xac>
 1000d6c:	00002706 	br	1000e0c <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 1000d70:	e0bffb17 	ldw	r2,-20(fp)
 1000d74:	10c00117 	ldw	r3,4(r2)
 1000d78:	00a00034 	movhi	r2,32768
 1000d7c:	10bfffc4 	addi	r2,r2,-1
 1000d80:	18802226 	beq	r3,r2,1000e0c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 1000d84:	e0bffd17 	ldw	r2,-12(fp)
 1000d88:	10800017 	ldw	r2,0(r2)
 1000d8c:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 1000d90:	e0bff917 	ldw	r2,-28(fp)
 1000d94:	10800090 	cmplti	r2,r2,2
 1000d98:	1000071e 	bne	r2,zero,1000db8 <altera_avalon_jtag_uart_ioctl+0x8c>
 1000d9c:	e0fff917 	ldw	r3,-28(fp)
 1000da0:	00a00034 	movhi	r2,32768
 1000da4:	10bfffc4 	addi	r2,r2,-1
 1000da8:	18800326 	beq	r3,r2,1000db8 <altera_avalon_jtag_uart_ioctl+0x8c>
 1000dac:	e0bff917 	ldw	r2,-28(fp)
 1000db0:	e0bffe15 	stw	r2,-8(fp)
 1000db4:	00000306 	br	1000dc4 <altera_avalon_jtag_uart_ioctl+0x98>
 1000db8:	00e00034 	movhi	r3,32768
 1000dbc:	18ffff84 	addi	r3,r3,-2
 1000dc0:	e0fffe15 	stw	r3,-8(fp)
 1000dc4:	e0bffb17 	ldw	r2,-20(fp)
 1000dc8:	e0fffe17 	ldw	r3,-8(fp)
 1000dcc:	10c00115 	stw	r3,4(r2)
      rc = 0;
 1000dd0:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 1000dd4:	00000d06 	br	1000e0c <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 1000dd8:	e0bffb17 	ldw	r2,-20(fp)
 1000ddc:	10c00117 	ldw	r3,4(r2)
 1000de0:	00a00034 	movhi	r2,32768
 1000de4:	10bfffc4 	addi	r2,r2,-1
 1000de8:	18800826 	beq	r3,r2,1000e0c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 1000dec:	e13ffd17 	ldw	r4,-12(fp)
 1000df0:	e0bffb17 	ldw	r2,-20(fp)
 1000df4:	10c00917 	ldw	r3,36(r2)
 1000df8:	e0bffb17 	ldw	r2,-20(fp)
 1000dfc:	10800117 	ldw	r2,4(r2)
 1000e00:	1885803a 	cmpltu	r2,r3,r2
 1000e04:	20800015 	stw	r2,0(r4)
      rc = 0;
 1000e08:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 1000e0c:	e0bffa17 	ldw	r2,-24(fp)
}
 1000e10:	e037883a 	mov	sp,fp
 1000e14:	df000017 	ldw	fp,0(sp)
 1000e18:	dec00104 	addi	sp,sp,4
 1000e1c:	f800283a 	ret

01000e20 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 1000e20:	defff204 	addi	sp,sp,-56
 1000e24:	dfc00d15 	stw	ra,52(sp)
 1000e28:	df000c15 	stw	fp,48(sp)
 1000e2c:	df000c04 	addi	fp,sp,48
 1000e30:	e13ffb15 	stw	r4,-20(fp)
 1000e34:	e17ffc15 	stw	r5,-16(fp)
 1000e38:	e1bffd15 	stw	r6,-12(fp)
 1000e3c:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 1000e40:	e0bffc17 	ldw	r2,-16(fp)
 1000e44:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 1000e48:	00004806 	br	1000f6c <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 1000e4c:	e0bffb17 	ldw	r2,-20(fp)
 1000e50:	10800a17 	ldw	r2,40(r2)
 1000e54:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 1000e58:	e0bffb17 	ldw	r2,-20(fp)
 1000e5c:	10800b17 	ldw	r2,44(r2)
 1000e60:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
 1000e64:	e0fff717 	ldw	r3,-36(fp)
 1000e68:	e0bff617 	ldw	r2,-40(fp)
 1000e6c:	18800536 	bltu	r3,r2,1000e84 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 1000e70:	e0bff717 	ldw	r2,-36(fp)
 1000e74:	e0fff617 	ldw	r3,-40(fp)
 1000e78:	10c5c83a 	sub	r2,r2,r3
 1000e7c:	e0bff815 	stw	r2,-32(fp)
 1000e80:	00000406 	br	1000e94 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 1000e84:	00820004 	movi	r2,2048
 1000e88:	e0fff617 	ldw	r3,-40(fp)
 1000e8c:	10c5c83a 	sub	r2,r2,r3
 1000e90:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 1000e94:	e0bff817 	ldw	r2,-32(fp)
 1000e98:	1005003a 	cmpeq	r2,r2,zero
 1000e9c:	10001f1e 	bne	r2,zero,1000f1c <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
 1000ea0:	e0fffd17 	ldw	r3,-12(fp)
 1000ea4:	e0bff817 	ldw	r2,-32(fp)
 1000ea8:	1880022e 	bgeu	r3,r2,1000eb4 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 1000eac:	e0bffd17 	ldw	r2,-12(fp)
 1000eb0:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 1000eb4:	e0bffb17 	ldw	r2,-20(fp)
 1000eb8:	10c00e04 	addi	r3,r2,56
 1000ebc:	e0bff617 	ldw	r2,-40(fp)
 1000ec0:	1887883a 	add	r3,r3,r2
 1000ec4:	e0bffa17 	ldw	r2,-24(fp)
 1000ec8:	1009883a 	mov	r4,r2
 1000ecc:	180b883a 	mov	r5,r3
 1000ed0:	e1bff817 	ldw	r6,-32(fp)
 1000ed4:	1003c9c0 	call	1003c9c <memcpy>
      ptr   += n;
 1000ed8:	e0fff817 	ldw	r3,-32(fp)
 1000edc:	e0bffa17 	ldw	r2,-24(fp)
 1000ee0:	10c5883a 	add	r2,r2,r3
 1000ee4:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
 1000ee8:	e0fffd17 	ldw	r3,-12(fp)
 1000eec:	e0bff817 	ldw	r2,-32(fp)
 1000ef0:	1885c83a 	sub	r2,r3,r2
 1000ef4:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1000ef8:	e0fff617 	ldw	r3,-40(fp)
 1000efc:	e0bff817 	ldw	r2,-32(fp)
 1000f00:	1885883a 	add	r2,r3,r2
 1000f04:	10c1ffcc 	andi	r3,r2,2047
 1000f08:	e0bffb17 	ldw	r2,-20(fp)
 1000f0c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 1000f10:	e0bffd17 	ldw	r2,-12(fp)
 1000f14:	10800048 	cmpgei	r2,r2,1
 1000f18:	103fcc1e 	bne	r2,zero,1000e4c <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
 1000f1c:	e0fffa17 	ldw	r3,-24(fp)
 1000f20:	e0bffc17 	ldw	r2,-16(fp)
 1000f24:	1880141e 	bne	r3,r2,1000f78 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 1000f28:	e0bffe17 	ldw	r2,-8(fp)
 1000f2c:	1090000c 	andi	r2,r2,16384
 1000f30:	1004c03a 	cmpne	r2,r2,zero
 1000f34:	1000101e 	bne	r2,zero,1000f78 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 1000f38:	e0bffb17 	ldw	r2,-20(fp)
 1000f3c:	10c00a17 	ldw	r3,40(r2)
 1000f40:	e0bff717 	ldw	r2,-36(fp)
 1000f44:	1880051e 	bne	r3,r2,1000f5c <altera_avalon_jtag_uart_read+0x13c>
 1000f48:	e0bffb17 	ldw	r2,-20(fp)
 1000f4c:	10c00917 	ldw	r3,36(r2)
 1000f50:	e0bffb17 	ldw	r2,-20(fp)
 1000f54:	10800117 	ldw	r2,4(r2)
 1000f58:	18bff736 	bltu	r3,r2,1000f38 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 1000f5c:	e0bffb17 	ldw	r2,-20(fp)
 1000f60:	10c00a17 	ldw	r3,40(r2)
 1000f64:	e0bff717 	ldw	r2,-36(fp)
 1000f68:	18800326 	beq	r3,r2,1000f78 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 1000f6c:	e0bffd17 	ldw	r2,-12(fp)
 1000f70:	10800048 	cmpgei	r2,r2,1
 1000f74:	103fb51e 	bne	r2,zero,1000e4c <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 1000f78:	e0fffa17 	ldw	r3,-24(fp)
 1000f7c:	e0bffc17 	ldw	r2,-16(fp)
 1000f80:	18801926 	beq	r3,r2,1000fe8 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1000f84:	0005303a 	rdctl	r2,status
 1000f88:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1000f8c:	e0fff517 	ldw	r3,-44(fp)
 1000f90:	00bfff84 	movi	r2,-2
 1000f94:	1884703a 	and	r2,r3,r2
 1000f98:	1001703a 	wrctl	status,r2
  
  return context;
 1000f9c:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 1000fa0:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1000fa4:	e0bffb17 	ldw	r2,-20(fp)
 1000fa8:	10800817 	ldw	r2,32(r2)
 1000fac:	10c00054 	ori	r3,r2,1
 1000fb0:	e0bffb17 	ldw	r2,-20(fp)
 1000fb4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1000fb8:	e0bffb17 	ldw	r2,-20(fp)
 1000fbc:	10800017 	ldw	r2,0(r2)
 1000fc0:	11000104 	addi	r4,r2,4
 1000fc4:	e0bffb17 	ldw	r2,-20(fp)
 1000fc8:	10800817 	ldw	r2,32(r2)
 1000fcc:	1007883a 	mov	r3,r2
 1000fd0:	2005883a 	mov	r2,r4
 1000fd4:	10c00035 	stwio	r3,0(r2)
 1000fd8:	e0bff917 	ldw	r2,-28(fp)
 1000fdc:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1000fe0:	e0bff417 	ldw	r2,-48(fp)
 1000fe4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 1000fe8:	e0fffa17 	ldw	r3,-24(fp)
 1000fec:	e0bffc17 	ldw	r2,-16(fp)
 1000ff0:	18800526 	beq	r3,r2,1001008 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
 1000ff4:	e0fffa17 	ldw	r3,-24(fp)
 1000ff8:	e0bffc17 	ldw	r2,-16(fp)
 1000ffc:	1887c83a 	sub	r3,r3,r2
 1001000:	e0ffff15 	stw	r3,-4(fp)
 1001004:	00000906 	br	100102c <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 1001008:	e0bffe17 	ldw	r2,-8(fp)
 100100c:	1090000c 	andi	r2,r2,16384
 1001010:	1005003a 	cmpeq	r2,r2,zero
 1001014:	1000031e 	bne	r2,zero,1001024 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 1001018:	00bffd44 	movi	r2,-11
 100101c:	e0bfff15 	stw	r2,-4(fp)
 1001020:	00000206 	br	100102c <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 1001024:	00bffec4 	movi	r2,-5
 1001028:	e0bfff15 	stw	r2,-4(fp)
 100102c:	e0bfff17 	ldw	r2,-4(fp)
}
 1001030:	e037883a 	mov	sp,fp
 1001034:	dfc00117 	ldw	ra,4(sp)
 1001038:	df000017 	ldw	fp,0(sp)
 100103c:	dec00204 	addi	sp,sp,8
 1001040:	f800283a 	ret

01001044 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 1001044:	defff204 	addi	sp,sp,-56
 1001048:	dfc00d15 	stw	ra,52(sp)
 100104c:	df000c15 	stw	fp,48(sp)
 1001050:	df000c04 	addi	fp,sp,48
 1001054:	e13ffb15 	stw	r4,-20(fp)
 1001058:	e17ffc15 	stw	r5,-16(fp)
 100105c:	e1bffd15 	stw	r6,-12(fp)
 1001060:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 1001064:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 1001068:	e0bffc17 	ldw	r2,-16(fp)
 100106c:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 1001070:	00003a06 	br	100115c <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 1001074:	e0bffb17 	ldw	r2,-20(fp)
 1001078:	10800c17 	ldw	r2,48(r2)
 100107c:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
 1001080:	e0bffb17 	ldw	r2,-20(fp)
 1001084:	10800d17 	ldw	r2,52(r2)
 1001088:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
 100108c:	e0fffa17 	ldw	r3,-24(fp)
 1001090:	e0bff917 	ldw	r2,-28(fp)
 1001094:	1880062e 	bgeu	r3,r2,10010b0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 1001098:	e0fff917 	ldw	r3,-28(fp)
 100109c:	e0bffa17 	ldw	r2,-24(fp)
 10010a0:	1885c83a 	sub	r2,r3,r2
 10010a4:	10bfffc4 	addi	r2,r2,-1
 10010a8:	e0bff815 	stw	r2,-32(fp)
 10010ac:	00000c06 	br	10010e0 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
 10010b0:	e0bff917 	ldw	r2,-28(fp)
 10010b4:	1005003a 	cmpeq	r2,r2,zero
 10010b8:	1000051e 	bne	r2,zero,10010d0 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 10010bc:	00820004 	movi	r2,2048
 10010c0:	e0fffa17 	ldw	r3,-24(fp)
 10010c4:	10c5c83a 	sub	r2,r2,r3
 10010c8:	e0bff815 	stw	r2,-32(fp)
 10010cc:	00000406 	br	10010e0 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 10010d0:	0081ffc4 	movi	r2,2047
 10010d4:	e0fffa17 	ldw	r3,-24(fp)
 10010d8:	10c5c83a 	sub	r2,r2,r3
 10010dc:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 10010e0:	e0bff817 	ldw	r2,-32(fp)
 10010e4:	1005003a 	cmpeq	r2,r2,zero
 10010e8:	10001f1e 	bne	r2,zero,1001168 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
 10010ec:	e0fffd17 	ldw	r3,-12(fp)
 10010f0:	e0bff817 	ldw	r2,-32(fp)
 10010f4:	1880022e 	bgeu	r3,r2,1001100 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
 10010f8:	e0bffd17 	ldw	r2,-12(fp)
 10010fc:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 1001100:	e0bffb17 	ldw	r2,-20(fp)
 1001104:	10c20e04 	addi	r3,r2,2104
 1001108:	e0bffa17 	ldw	r2,-24(fp)
 100110c:	1885883a 	add	r2,r3,r2
 1001110:	e0fffc17 	ldw	r3,-16(fp)
 1001114:	1009883a 	mov	r4,r2
 1001118:	180b883a 	mov	r5,r3
 100111c:	e1bff817 	ldw	r6,-32(fp)
 1001120:	1003c9c0 	call	1003c9c <memcpy>
      ptr   += n;
 1001124:	e0fff817 	ldw	r3,-32(fp)
 1001128:	e0bffc17 	ldw	r2,-16(fp)
 100112c:	10c5883a 	add	r2,r2,r3
 1001130:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 1001134:	e0fffd17 	ldw	r3,-12(fp)
 1001138:	e0bff817 	ldw	r2,-32(fp)
 100113c:	1885c83a 	sub	r2,r3,r2
 1001140:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1001144:	e0fffa17 	ldw	r3,-24(fp)
 1001148:	e0bff817 	ldw	r2,-32(fp)
 100114c:	1885883a 	add	r2,r3,r2
 1001150:	10c1ffcc 	andi	r3,r2,2047
 1001154:	e0bffb17 	ldw	r2,-20(fp)
 1001158:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 100115c:	e0bffd17 	ldw	r2,-12(fp)
 1001160:	10800048 	cmpgei	r2,r2,1
 1001164:	103fc31e 	bne	r2,zero,1001074 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1001168:	0005303a 	rdctl	r2,status
 100116c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1001170:	e0fff517 	ldw	r3,-44(fp)
 1001174:	00bfff84 	movi	r2,-2
 1001178:	1884703a 	and	r2,r3,r2
 100117c:	1001703a 	wrctl	status,r2
  
  return context;
 1001180:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 1001184:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 1001188:	e0bffb17 	ldw	r2,-20(fp)
 100118c:	10800817 	ldw	r2,32(r2)
 1001190:	10c00094 	ori	r3,r2,2
 1001194:	e0bffb17 	ldw	r2,-20(fp)
 1001198:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 100119c:	e0bffb17 	ldw	r2,-20(fp)
 10011a0:	10800017 	ldw	r2,0(r2)
 10011a4:	11000104 	addi	r4,r2,4
 10011a8:	e0bffb17 	ldw	r2,-20(fp)
 10011ac:	10800817 	ldw	r2,32(r2)
 10011b0:	1007883a 	mov	r3,r2
 10011b4:	2005883a 	mov	r2,r4
 10011b8:	10c00035 	stwio	r3,0(r2)
 10011bc:	e0bff717 	ldw	r2,-36(fp)
 10011c0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10011c4:	e0bff417 	ldw	r2,-48(fp)
 10011c8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 10011cc:	e0bffd17 	ldw	r2,-12(fp)
 10011d0:	10800050 	cmplti	r2,r2,1
 10011d4:	1000111e 	bne	r2,zero,100121c <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
 10011d8:	e0bffe17 	ldw	r2,-8(fp)
 10011dc:	1090000c 	andi	r2,r2,16384
 10011e0:	1004c03a 	cmpne	r2,r2,zero
 10011e4:	1000101e 	bne	r2,zero,1001228 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 10011e8:	e0bffb17 	ldw	r2,-20(fp)
 10011ec:	10c00d17 	ldw	r3,52(r2)
 10011f0:	e0bff917 	ldw	r2,-28(fp)
 10011f4:	1880051e 	bne	r3,r2,100120c <altera_avalon_jtag_uart_write+0x1c8>
 10011f8:	e0bffb17 	ldw	r2,-20(fp)
 10011fc:	10c00917 	ldw	r3,36(r2)
 1001200:	e0bffb17 	ldw	r2,-20(fp)
 1001204:	10800117 	ldw	r2,4(r2)
 1001208:	18bff736 	bltu	r3,r2,10011e8 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 100120c:	e0bffb17 	ldw	r2,-20(fp)
 1001210:	10c00d17 	ldw	r3,52(r2)
 1001214:	e0bff917 	ldw	r2,-28(fp)
 1001218:	18800326 	beq	r3,r2,1001228 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
 100121c:	e0bffd17 	ldw	r2,-12(fp)
 1001220:	10800048 	cmpgei	r2,r2,1
 1001224:	103fcd1e 	bne	r2,zero,100115c <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 1001228:	e0fffc17 	ldw	r3,-16(fp)
 100122c:	e0bff617 	ldw	r2,-40(fp)
 1001230:	18800526 	beq	r3,r2,1001248 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
 1001234:	e0fffc17 	ldw	r3,-16(fp)
 1001238:	e0bff617 	ldw	r2,-40(fp)
 100123c:	1887c83a 	sub	r3,r3,r2
 1001240:	e0ffff15 	stw	r3,-4(fp)
 1001244:	00000906 	br	100126c <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
 1001248:	e0bffe17 	ldw	r2,-8(fp)
 100124c:	1090000c 	andi	r2,r2,16384
 1001250:	1005003a 	cmpeq	r2,r2,zero
 1001254:	1000031e 	bne	r2,zero,1001264 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
 1001258:	00bffd44 	movi	r2,-11
 100125c:	e0bfff15 	stw	r2,-4(fp)
 1001260:	00000206 	br	100126c <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 1001264:	00bffec4 	movi	r2,-5
 1001268:	e0bfff15 	stw	r2,-4(fp)
 100126c:	e0bfff17 	ldw	r2,-4(fp)
}
 1001270:	e037883a 	mov	sp,fp
 1001274:	dfc00117 	ldw	ra,4(sp)
 1001278:	df000017 	ldw	fp,0(sp)
 100127c:	dec00204 	addi	sp,sp,8
 1001280:	f800283a 	ret

01001284 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
 1001284:	defffc04 	addi	sp,sp,-16
 1001288:	dfc00315 	stw	ra,12(sp)
 100128c:	df000215 	stw	fp,8(sp)
 1001290:	df000204 	addi	fp,sp,8
 1001294:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
 1001298:	e0bfff17 	ldw	r2,-4(fp)
 100129c:	10800217 	ldw	r2,8(r2)
 10012a0:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
 10012a4:	00000c06 	br	10012d8 <alt_up_char_buffer_init+0x54>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
 10012a8:	e13ffe17 	ldw	r4,-8(fp)
 10012ac:	01404034 	movhi	r5,256
 10012b0:	29509d04 	addi	r5,r5,17012
 10012b4:	1003d3c0 	call	1003d3c <strcmp>
 10012b8:	1004c03a 	cmpne	r2,r2,zero
 10012bc:	1000031e 	bne	r2,zero,10012cc <alt_up_char_buffer_init+0x48>
			(*name) = '\0';
 10012c0:	e0bffe17 	ldw	r2,-8(fp)
 10012c4:	10000005 	stb	zero,0(r2)
			break;
 10012c8:	00000a06 	br	10012f4 <alt_up_char_buffer_init+0x70>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
 10012cc:	e0bffe17 	ldw	r2,-8(fp)
 10012d0:	10800044 	addi	r2,r2,1
 10012d4:	e0bffe15 	stw	r2,-8(fp)
 10012d8:	e0bffe17 	ldw	r2,-8(fp)
 10012dc:	10800003 	ldbu	r2,0(r2)
 10012e0:	10803fcc 	andi	r2,r2,255
 10012e4:	1080201c 	xori	r2,r2,128
 10012e8:	10bfe004 	addi	r2,r2,-128
 10012ec:	1004c03a 	cmpne	r2,r2,zero
 10012f0:	103fed1e 	bne	r2,zero,10012a8 <alt_up_char_buffer_init+0x24>
			break;
		}
	}
	
	return;
}
 10012f4:	e037883a 	mov	sp,fp
 10012f8:	dfc00117 	ldw	ra,4(sp)
 10012fc:	df000017 	ldw	fp,0(sp)
 1001300:	dec00204 	addi	sp,sp,8
 1001304:	f800283a 	ret

01001308 <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
 1001308:	defffc04 	addi	sp,sp,-16
 100130c:	dfc00315 	stw	ra,12(sp)
 1001310:	df000215 	stw	fp,8(sp)
 1001314:	df000204 	addi	fp,sp,8
 1001318:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
 100131c:	e13fff17 	ldw	r4,-4(fp)
 1001320:	01404034 	movhi	r5,256
 1001324:	29565304 	addi	r5,r5,22860
 1001328:	10030000 	call	1003000 <alt_find_dev>
 100132c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 1001330:	e0bffe17 	ldw	r2,-8(fp)
}
 1001334:	e037883a 	mov	sp,fp
 1001338:	dfc00117 	ldw	ra,4(sp)
 100133c:	df000017 	ldw	fp,0(sp)
 1001340:	dec00204 	addi	sp,sp,8
 1001344:	f800283a 	ret

01001348 <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
 1001348:	defff904 	addi	sp,sp,-28
 100134c:	df000615 	stw	fp,24(sp)
 1001350:	df000604 	addi	fp,sp,24
 1001354:	e13ffb15 	stw	r4,-20(fp)
 1001358:	e1bffd15 	stw	r6,-12(fp)
 100135c:	e1fffe15 	stw	r7,-8(fp)
 1001360:	e17ffc05 	stb	r5,-16(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
 1001364:	e0bffb17 	ldw	r2,-20(fp)
 1001368:	10c00c17 	ldw	r3,48(r2)
 100136c:	e0bffd17 	ldw	r2,-12(fp)
 1001370:	10c0042e 	bgeu	r2,r3,1001384 <alt_up_char_buffer_draw+0x3c>
 1001374:	e0bffb17 	ldw	r2,-20(fp)
 1001378:	10c00d17 	ldw	r3,52(r2)
 100137c:	e0bffe17 	ldw	r2,-8(fp)
 1001380:	10c00336 	bltu	r2,r3,1001390 <alt_up_char_buffer_draw+0x48>
		return -1;
 1001384:	00bfffc4 	movi	r2,-1
 1001388:	e0bfff15 	stw	r2,-4(fp)
 100138c:	00001d06 	br	1001404 <alt_up_char_buffer_draw+0xbc>
	
	unsigned int addr = 0;
 1001390:	e03ffa15 	stw	zero,-24(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
 1001394:	e0bffb17 	ldw	r2,-20(fp)
 1001398:	10c00f17 	ldw	r3,60(r2)
 100139c:	e0bffd17 	ldw	r2,-12(fp)
 10013a0:	1886703a 	and	r3,r3,r2
 10013a4:	e0bffb17 	ldw	r2,-20(fp)
 10013a8:	10800e17 	ldw	r2,56(r2)
 10013ac:	1886983a 	sll	r3,r3,r2
 10013b0:	e0bffa17 	ldw	r2,-24(fp)
 10013b4:	10c4b03a 	or	r2,r2,r3
 10013b8:	e0bffa15 	stw	r2,-24(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
 10013bc:	e0bffb17 	ldw	r2,-20(fp)
 10013c0:	10c01117 	ldw	r3,68(r2)
 10013c4:	e0bffe17 	ldw	r2,-8(fp)
 10013c8:	1886703a 	and	r3,r3,r2
 10013cc:	e0bffb17 	ldw	r2,-20(fp)
 10013d0:	10801017 	ldw	r2,64(r2)
 10013d4:	1886983a 	sll	r3,r3,r2
 10013d8:	e0bffa17 	ldw	r2,-24(fp)
 10013dc:	10c4b03a 	or	r2,r2,r3
 10013e0:	e0bffa15 	stw	r2,-24(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
 10013e4:	e0bffb17 	ldw	r2,-20(fp)
 10013e8:	10800b17 	ldw	r2,44(r2)
 10013ec:	1007883a 	mov	r3,r2
 10013f0:	e0bffa17 	ldw	r2,-24(fp)
 10013f4:	1885883a 	add	r2,r3,r2
 10013f8:	e0fffc03 	ldbu	r3,-16(fp)
 10013fc:	10c00025 	stbio	r3,0(r2)

	return 0;
 1001400:	e03fff15 	stw	zero,-4(fp)
 1001404:	e0bfff17 	ldw	r2,-4(fp)
}
 1001408:	e037883a 	mov	sp,fp
 100140c:	df000017 	ldw	fp,0(sp)
 1001410:	dec00104 	addi	sp,sp,4
 1001414:	f800283a 	ret

01001418 <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
 1001418:	defff904 	addi	sp,sp,-28
 100141c:	df000615 	stw	fp,24(sp)
 1001420:	df000604 	addi	fp,sp,24
 1001424:	e13ffb15 	stw	r4,-20(fp)
 1001428:	e17ffc15 	stw	r5,-16(fp)
 100142c:	e1bffd15 	stw	r6,-12(fp)
 1001430:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
 1001434:	e0bffb17 	ldw	r2,-20(fp)
 1001438:	10c00c17 	ldw	r3,48(r2)
 100143c:	e0bffd17 	ldw	r2,-12(fp)
 1001440:	10c0042e 	bgeu	r2,r3,1001454 <alt_up_char_buffer_string+0x3c>
 1001444:	e0bffb17 	ldw	r2,-20(fp)
 1001448:	10c00d17 	ldw	r3,52(r2)
 100144c:	e0bffe17 	ldw	r2,-8(fp)
 1001450:	10c00336 	bltu	r2,r3,1001460 <alt_up_char_buffer_string+0x48>
		return -1;
 1001454:	00bfffc4 	movi	r2,-1
 1001458:	e0bfff15 	stw	r2,-4(fp)
 100145c:	00002e06 	br	1001518 <alt_up_char_buffer_string+0x100>
	
	unsigned int offset = 0;
 1001460:	e03ffa15 	stw	zero,-24(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
 1001464:	e0bffb17 	ldw	r2,-20(fp)
 1001468:	10801017 	ldw	r2,64(r2)
 100146c:	1007883a 	mov	r3,r2
 1001470:	e0bffe17 	ldw	r2,-8(fp)
 1001474:	10c6983a 	sll	r3,r2,r3
 1001478:	e0bffd17 	ldw	r2,-12(fp)
 100147c:	1885883a 	add	r2,r3,r2
 1001480:	e0bffa15 	stw	r2,-24(fp)

	while ( *ptr )
 1001484:	00001c06 	br	10014f8 <alt_up_char_buffer_string+0xe0>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
 1001488:	e0bffb17 	ldw	r2,-20(fp)
 100148c:	10800b17 	ldw	r2,44(r2)
 1001490:	1007883a 	mov	r3,r2
 1001494:	e0bffa17 	ldw	r2,-24(fp)
 1001498:	1889883a 	add	r4,r3,r2
 100149c:	e0bffc17 	ldw	r2,-16(fp)
 10014a0:	10800003 	ldbu	r2,0(r2)
 10014a4:	10c03fcc 	andi	r3,r2,255
 10014a8:	18c0201c 	xori	r3,r3,128
 10014ac:	18ffe004 	addi	r3,r3,-128
 10014b0:	2005883a 	mov	r2,r4
 10014b4:	10c00025 	stbio	r3,0(r2)
		++ptr;
 10014b8:	e0bffc17 	ldw	r2,-16(fp)
 10014bc:	10800044 	addi	r2,r2,1
 10014c0:	e0bffc15 	stw	r2,-16(fp)
		if (++x >= char_buffer->x_resolution)
 10014c4:	e0bffd17 	ldw	r2,-12(fp)
 10014c8:	10800044 	addi	r2,r2,1
 10014cc:	e0bffd15 	stw	r2,-12(fp)
 10014d0:	e0bffb17 	ldw	r2,-20(fp)
 10014d4:	10c00c17 	ldw	r3,48(r2)
 10014d8:	e0bffd17 	ldw	r2,-12(fp)
 10014dc:	10c00336 	bltu	r2,r3,10014ec <alt_up_char_buffer_string+0xd4>
			return -1;
 10014e0:	00bfffc4 	movi	r2,-1
 10014e4:	e0bfff15 	stw	r2,-4(fp)
 10014e8:	00000b06 	br	1001518 <alt_up_char_buffer_string+0x100>
		++offset;
 10014ec:	e0bffa17 	ldw	r2,-24(fp)
 10014f0:	10800044 	addi	r2,r2,1
 10014f4:	e0bffa15 	stw	r2,-24(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
 10014f8:	e0bffc17 	ldw	r2,-16(fp)
 10014fc:	10800003 	ldbu	r2,0(r2)
 1001500:	10803fcc 	andi	r2,r2,255
 1001504:	1080201c 	xori	r2,r2,128
 1001508:	10bfe004 	addi	r2,r2,-128
 100150c:	1004c03a 	cmpne	r2,r2,zero
 1001510:	103fdd1e 	bne	r2,zero,1001488 <alt_up_char_buffer_string+0x70>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
 1001514:	e03fff15 	stw	zero,-4(fp)
 1001518:	e0bfff17 	ldw	r2,-4(fp)
}
 100151c:	e037883a 	mov	sp,fp
 1001520:	df000017 	ldw	fp,0(sp)
 1001524:	dec00104 	addi	sp,sp,4
 1001528:	f800283a 	ret

0100152c <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
 100152c:	defffe04 	addi	sp,sp,-8
 1001530:	df000115 	stw	fp,4(sp)
 1001534:	df000104 	addi	fp,sp,4
 1001538:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
 100153c:	e0bfff17 	ldw	r2,-4(fp)
 1001540:	10800a17 	ldw	r2,40(r2)
 1001544:	10800084 	addi	r2,r2,2
 1001548:	1007883a 	mov	r3,r2
 100154c:	00800044 	movi	r2,1
 1001550:	18800025 	stbio	r2,0(r3)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
 1001554:	e0bfff17 	ldw	r2,-4(fp)
 1001558:	10800a17 	ldw	r2,40(r2)
 100155c:	10800084 	addi	r2,r2,2
 1001560:	10800023 	ldbuio	r2,0(r2)
 1001564:	1080004c 	andi	r2,r2,1
 1001568:	10803fcc 	andi	r2,r2,255
 100156c:	1004c03a 	cmpne	r2,r2,zero
 1001570:	103ff81e 	bne	r2,zero,1001554 <alt_up_char_buffer_clear+0x28>
	return 0;
 1001574:	0005883a 	mov	r2,zero
}
 1001578:	e037883a 	mov	sp,fp
 100157c:	df000017 	ldw	fp,0(sp)
 1001580:	dec00104 	addi	sp,sp,4
 1001584:	f800283a 	ret

01001588 <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
 1001588:	defffc04 	addi	sp,sp,-16
 100158c:	dfc00315 	stw	ra,12(sp)
 1001590:	df000215 	stw	fp,8(sp)
 1001594:	df000204 	addi	fp,sp,8
 1001598:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
 100159c:	e13fff17 	ldw	r4,-4(fp)
 10015a0:	01404034 	movhi	r5,256
 10015a4:	29565304 	addi	r5,r5,22860
 10015a8:	10030000 	call	1003000 <alt_find_dev>
 10015ac:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 10015b0:	e0bffe17 	ldw	r2,-8(fp)
}
 10015b4:	e037883a 	mov	sp,fp
 10015b8:	dfc00117 	ldw	ra,4(sp)
 10015bc:	df000017 	ldw	fp,0(sp)
 10015c0:	dec00204 	addi	sp,sp,8
 10015c4:	f800283a 	ret

010015c8 <alt_up_pixel_buffer_dma_draw>:

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
 10015c8:	defff804 	addi	sp,sp,-32
 10015cc:	dfc00715 	stw	ra,28(sp)
 10015d0:	df000615 	stw	fp,24(sp)
 10015d4:	df000604 	addi	fp,sp,24
 10015d8:	e13ffb15 	stw	r4,-20(fp)
 10015dc:	e17ffc15 	stw	r5,-16(fp)
 10015e0:	e1bffd15 	stw	r6,-12(fp)
 10015e4:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
 10015e8:	e0bffb17 	ldw	r2,-20(fp)
 10015ec:	10c00f17 	ldw	r3,60(r2)
 10015f0:	e0bffd17 	ldw	r2,-12(fp)
 10015f4:	10c0042e 	bgeu	r2,r3,1001608 <alt_up_pixel_buffer_dma_draw+0x40>
 10015f8:	e0bffb17 	ldw	r2,-20(fp)
 10015fc:	10c01017 	ldw	r3,64(r2)
 1001600:	e0bffe17 	ldw	r2,-8(fp)
 1001604:	10c00336 	bltu	r2,r3,1001614 <alt_up_pixel_buffer_dma_draw+0x4c>
		return -1;
 1001608:	00bfffc4 	movi	r2,-1
 100160c:	e0bfff15 	stw	r2,-4(fp)
 1001610:	00005206 	br	100175c <alt_up_pixel_buffer_dma_draw+0x194>

	unsigned int addr = 0;
 1001614:	e03ffa15 	stw	zero,-24(fp)
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 1001618:	e0bffb17 	ldw	r2,-20(fp)
 100161c:	10800d17 	ldw	r2,52(r2)
 1001620:	1004c03a 	cmpne	r2,r2,zero
 1001624:	1000151e 	bne	r2,zero,100167c <alt_up_pixel_buffer_dma_draw+0xb4>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr |= ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
 1001628:	e0bffb17 	ldw	r2,-20(fp)
 100162c:	10c01217 	ldw	r3,72(r2)
 1001630:	e0bffd17 	ldw	r2,-12(fp)
 1001634:	1886703a 	and	r3,r3,r2
 1001638:	e0bffb17 	ldw	r2,-20(fp)
 100163c:	10801117 	ldw	r2,68(r2)
 1001640:	1886983a 	sll	r3,r3,r2
 1001644:	e0bffa17 	ldw	r2,-24(fp)
 1001648:	10c4b03a 	or	r2,r2,r3
 100164c:	e0bffa15 	stw	r2,-24(fp)
		addr |= ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
 1001650:	e0bffb17 	ldw	r2,-20(fp)
 1001654:	10c01417 	ldw	r3,80(r2)
 1001658:	e0bffe17 	ldw	r2,-8(fp)
 100165c:	1886703a 	and	r3,r3,r2
 1001660:	e0bffb17 	ldw	r2,-20(fp)
 1001664:	10801317 	ldw	r2,76(r2)
 1001668:	1886983a 	sll	r3,r3,r2
 100166c:	e0bffa17 	ldw	r2,-24(fp)
 1001670:	10c4b03a 	or	r2,r2,r3
 1001674:	e0bffa15 	stw	r2,-24(fp)
 1001678:	00001806 	br	10016dc <alt_up_pixel_buffer_dma_draw+0x114>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
 100167c:	e0bffb17 	ldw	r2,-20(fp)
 1001680:	10c01217 	ldw	r3,72(r2)
 1001684:	e0bffd17 	ldw	r2,-12(fp)
 1001688:	1886703a 	and	r3,r3,r2
 100168c:	e0bffb17 	ldw	r2,-20(fp)
 1001690:	10801117 	ldw	r2,68(r2)
 1001694:	1886983a 	sll	r3,r3,r2
 1001698:	e0bffa17 	ldw	r2,-24(fp)
 100169c:	10c5883a 	add	r2,r2,r3
 10016a0:	e0bffa15 	stw	r2,-24(fp)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
 10016a4:	e0bffb17 	ldw	r2,-20(fp)
 10016a8:	10c01417 	ldw	r3,80(r2)
 10016ac:	e0bffe17 	ldw	r2,-8(fp)
 10016b0:	1888703a 	and	r4,r3,r2
 10016b4:	e0bffb17 	ldw	r2,-20(fp)
 10016b8:	11400f17 	ldw	r5,60(r2)
 10016bc:	10041540 	call	1004154 <__mulsi3>
 10016c0:	1007883a 	mov	r3,r2
 10016c4:	e0bffb17 	ldw	r2,-20(fp)
 10016c8:	10801117 	ldw	r2,68(r2)
 10016cc:	1886983a 	sll	r3,r3,r2
 10016d0:	e0bffa17 	ldw	r2,-24(fp)
 10016d4:	10c5883a 	add	r2,r2,r3
 10016d8:	e0bffa15 	stw	r2,-24(fp)
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 10016dc:	e0bffb17 	ldw	r2,-20(fp)
 10016e0:	10800e17 	ldw	r2,56(r2)
 10016e4:	10800058 	cmpnei	r2,r2,1
 10016e8:	1000081e 	bne	r2,zero,100170c <alt_up_pixel_buffer_dma_draw+0x144>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 10016ec:	e0bffb17 	ldw	r2,-20(fp)
 10016f0:	10800c17 	ldw	r2,48(r2)
 10016f4:	1007883a 	mov	r3,r2
 10016f8:	e0bffa17 	ldw	r2,-24(fp)
 10016fc:	1885883a 	add	r2,r3,r2
 1001700:	e0fffc17 	ldw	r3,-16(fp)
 1001704:	10c00025 	stbio	r3,0(r2)
 1001708:	00001306 	br	1001758 <alt_up_pixel_buffer_dma_draw+0x190>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 100170c:	e0bffb17 	ldw	r2,-20(fp)
 1001710:	10800e17 	ldw	r2,56(r2)
 1001714:	10800098 	cmpnei	r2,r2,2
 1001718:	1000081e 	bne	r2,zero,100173c <alt_up_pixel_buffer_dma_draw+0x174>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 100171c:	e0bffb17 	ldw	r2,-20(fp)
 1001720:	10800c17 	ldw	r2,48(r2)
 1001724:	1007883a 	mov	r3,r2
 1001728:	e0bffa17 	ldw	r2,-24(fp)
 100172c:	1885883a 	add	r2,r3,r2
 1001730:	e0fffc17 	ldw	r3,-16(fp)
 1001734:	10c0002d 	sthio	r3,0(r2)
 1001738:	00000706 	br	1001758 <alt_up_pixel_buffer_dma_draw+0x190>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 100173c:	e0bffb17 	ldw	r2,-20(fp)
 1001740:	10800c17 	ldw	r2,48(r2)
 1001744:	1007883a 	mov	r3,r2
 1001748:	e0bffa17 	ldw	r2,-24(fp)
 100174c:	1885883a 	add	r2,r3,r2
 1001750:	e0fffc17 	ldw	r3,-16(fp)
 1001754:	10c00035 	stwio	r3,0(r2)
	}

	return 0;
 1001758:	e03fff15 	stw	zero,-4(fp)
 100175c:	e0bfff17 	ldw	r2,-4(fp)
}
 1001760:	e037883a 	mov	sp,fp
 1001764:	dfc00117 	ldw	ra,4(sp)
 1001768:	df000017 	ldw	fp,0(sp)
 100176c:	dec00204 	addi	sp,sp,8
 1001770:	f800283a 	ret

01001774 <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
 1001774:	defffd04 	addi	sp,sp,-12
 1001778:	df000215 	stw	fp,8(sp)
 100177c:	df000204 	addi	fp,sp,8
 1001780:	e13ffe15 	stw	r4,-8(fp)
 1001784:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
 1001788:	e0bffe17 	ldw	r2,-8(fp)
 100178c:	10800a17 	ldw	r2,40(r2)
 1001790:	10800104 	addi	r2,r2,4
 1001794:	e0ffff17 	ldw	r3,-4(fp)
 1001798:	10c00035 	stwio	r3,0(r2)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
 100179c:	e0bffe17 	ldw	r2,-8(fp)
 10017a0:	10800a17 	ldw	r2,40(r2)
 10017a4:	10800104 	addi	r2,r2,4
 10017a8:	10800037 	ldwio	r2,0(r2)
 10017ac:	1007883a 	mov	r3,r2
 10017b0:	e0bffe17 	ldw	r2,-8(fp)
 10017b4:	10c00c15 	stw	r3,48(r2)
	return 0;
 10017b8:	0005883a 	mov	r2,zero
}
 10017bc:	e037883a 	mov	sp,fp
 10017c0:	df000017 	ldw	fp,0(sp)
 10017c4:	dec00104 	addi	sp,sp,4
 10017c8:	f800283a 	ret

010017cc <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
 10017cc:	defffe04 	addi	sp,sp,-8
 10017d0:	df000115 	stw	fp,4(sp)
 10017d4:	df000104 	addi	fp,sp,4
 10017d8:	e13fff15 	stw	r4,-4(fp)
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
 10017dc:	e0bfff17 	ldw	r2,-4(fp)
 10017e0:	11000c17 	ldw	r4,48(r2)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
 10017e4:	e0bfff17 	ldw	r2,-4(fp)
 10017e8:	10800a17 	ldw	r2,40(r2)
 10017ec:	1007883a 	mov	r3,r2
 10017f0:	00800044 	movi	r2,1
 10017f4:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
 10017f8:	e0bfff17 	ldw	r2,-4(fp)
 10017fc:	10c00b17 	ldw	r3,44(r2)
 1001800:	e0bfff17 	ldw	r2,-4(fp)
 1001804:	10c00c15 	stw	r3,48(r2)
	pixel_buffer->buffer_start_address = temp;
 1001808:	e0bfff17 	ldw	r2,-4(fp)
 100180c:	11000b15 	stw	r4,44(r2)
	return 0;
 1001810:	0005883a 	mov	r2,zero
}
 1001814:	e037883a 	mov	sp,fp
 1001818:	df000017 	ldw	fp,0(sp)
 100181c:	dec00104 	addi	sp,sp,4
 1001820:	f800283a 	ret

01001824 <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
int alt_up_pixel_buffer_dma_check_swap_buffers_status(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
 1001824:	defffe04 	addi	sp,sp,-8
 1001828:	df000115 	stw	fp,4(sp)
 100182c:	df000104 	addi	fp,sp,4
 1001830:	e13fff15 	stw	r4,-4(fp)
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
 1001834:	e0bfff17 	ldw	r2,-4(fp)
 1001838:	10800a17 	ldw	r2,40(r2)
 100183c:	10800304 	addi	r2,r2,12
 1001840:	10800037 	ldwio	r2,0(r2)
 1001844:	1080004c 	andi	r2,r2,1
}
 1001848:	e037883a 	mov	sp,fp
 100184c:	df000017 	ldw	fp,0(sp)
 1001850:	dec00104 	addi	sp,sp,4
 1001854:	f800283a 	ret

01001858 <alt_up_pixel_buffer_dma_clear_screen>:

void alt_up_pixel_buffer_dma_clear_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
 1001858:	defff504 	addi	sp,sp,-44
 100185c:	dfc00a15 	stw	ra,40(sp)
 1001860:	df000915 	stw	fp,36(sp)
 1001864:	df000904 	addi	fp,sp,36
 1001868:	e13ff715 	stw	r4,-36(fp)
 100186c:	e17ff815 	stw	r5,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 1001870:	e0bff817 	ldw	r2,-32(fp)
 1001874:	10800058 	cmpnei	r2,r2,1
 1001878:	1000041e 	bne	r2,zero,100188c <alt_up_pixel_buffer_dma_clear_screen+0x34>
		addr = pixel_buffer->back_buffer_start_address;
 100187c:	e0bff717 	ldw	r2,-36(fp)
 1001880:	10800c17 	ldw	r2,48(r2)
 1001884:	e0bfff15 	stw	r2,-4(fp)
 1001888:	00000306 	br	1001898 <alt_up_pixel_buffer_dma_clear_screen+0x40>
	else
		addr = pixel_buffer->buffer_start_address;
 100188c:	e0bff717 	ldw	r2,-36(fp)
 1001890:	10800b17 	ldw	r2,44(r2)
 1001894:	e0bfff15 	stw	r2,-4(fp)
	limit_x = pixel_buffer->x_resolution;
 1001898:	e0bff717 	ldw	r2,-36(fp)
 100189c:	10800f17 	ldw	r2,60(r2)
 10018a0:	e0bffe15 	stw	r2,-8(fp)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 10018a4:	e0bff717 	ldw	r2,-36(fp)
 10018a8:	10800e17 	ldw	r2,56(r2)
 10018ac:	10800098 	cmpnei	r2,r2,2
 10018b0:	1000051e 	bne	r2,zero,10018c8 <alt_up_pixel_buffer_dma_clear_screen+0x70>
		limit_x = limit_x << 1;
 10018b4:	e0fffe17 	ldw	r3,-8(fp)
 10018b8:	e0fffe17 	ldw	r3,-8(fp)
 10018bc:	18c5883a 	add	r2,r3,r3
 10018c0:	e0bffe15 	stw	r2,-8(fp)
 10018c4:	00000506 	br	10018dc <alt_up_pixel_buffer_dma_clear_screen+0x84>
	} else {
		limit_x = limit_x << 2;
 10018c8:	e13ffe17 	ldw	r4,-8(fp)
 10018cc:	e13ffe17 	ldw	r4,-8(fp)
 10018d0:	2105883a 	add	r2,r4,r4
 10018d4:	1085883a 	add	r2,r2,r2
 10018d8:	e0bffe15 	stw	r2,-8(fp)
	}	
	limit_y = pixel_buffer->y_resolution;
 10018dc:	e0bff717 	ldw	r2,-36(fp)
 10018e0:	10801017 	ldw	r2,64(r2)
 10018e4:	e0bffd15 	stw	r2,-12(fp)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 10018e8:	e0bff717 	ldw	r2,-36(fp)
 10018ec:	10800d17 	ldw	r2,52(r2)
 10018f0:	1004c03a 	cmpne	r2,r2,zero
 10018f4:	10001e1e 	bne	r2,zero,1001970 <alt_up_pixel_buffer_dma_clear_screen+0x118>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 10018f8:	e0bff717 	ldw	r2,-36(fp)
 10018fc:	10801317 	ldw	r2,76(r2)
 1001900:	e0bffa15 	stw	r2,-24(fp)

		for (y = 0; y < limit_y; y++)
 1001904:	e03ffb15 	stw	zero,-20(fp)
 1001908:	00001506 	br	1001960 <alt_up_pixel_buffer_dma_clear_screen+0x108>
		{
			for (x = 0; x < limit_x; x = x + 4)
 100190c:	e03ffc15 	stw	zero,-16(fp)
 1001910:	00000706 	br	1001930 <alt_up_pixel_buffer_dma_clear_screen+0xd8>
			{
				IOWR_32DIRECT(addr, x, 0);
 1001914:	e0ffff17 	ldw	r3,-4(fp)
 1001918:	e0bffc17 	ldw	r2,-16(fp)
 100191c:	1885883a 	add	r2,r3,r2
 1001920:	10000035 	stwio	zero,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
 1001924:	e0bffc17 	ldw	r2,-16(fp)
 1001928:	10800104 	addi	r2,r2,4
 100192c:	e0bffc15 	stw	r2,-16(fp)
 1001930:	e0fffc17 	ldw	r3,-16(fp)
 1001934:	e13ffe17 	ldw	r4,-8(fp)
 1001938:	193ff636 	bltu	r3,r4,1001914 <alt_up_pixel_buffer_dma_clear_screen+0xbc>
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
 100193c:	e0fffa17 	ldw	r3,-24(fp)
 1001940:	00800044 	movi	r2,1
 1001944:	10c4983a 	sll	r2,r2,r3
 1001948:	e0ffff17 	ldw	r3,-4(fp)
 100194c:	1887883a 	add	r3,r3,r2
 1001950:	e0ffff15 	stw	r3,-4(fp)
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
 1001954:	e13ffb17 	ldw	r4,-20(fp)
 1001958:	21000044 	addi	r4,r4,1
 100195c:	e13ffb15 	stw	r4,-20(fp)
 1001960:	e0bffb17 	ldw	r2,-20(fp)
 1001964:	e0fffd17 	ldw	r3,-12(fp)
 1001968:	10ffe836 	bltu	r2,r3,100190c <alt_up_pixel_buffer_dma_clear_screen+0xb4>
 100196c:	00001006 	br	10019b0 <alt_up_pixel_buffer_dma_clear_screen+0x158>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
 1001970:	e13ffd17 	ldw	r4,-12(fp)
 1001974:	e17ffe17 	ldw	r5,-8(fp)
 1001978:	10041540 	call	1004154 <__mulsi3>
 100197c:	e0bffd15 	stw	r2,-12(fp)

		for (x = 0; x < limit_y; x = x + 4)
 1001980:	e03ff915 	stw	zero,-28(fp)
 1001984:	00000706 	br	10019a4 <alt_up_pixel_buffer_dma_clear_screen+0x14c>
		{
			IOWR_32DIRECT(addr, x, 0);
 1001988:	e0ffff17 	ldw	r3,-4(fp)
 100198c:	e0bff917 	ldw	r2,-28(fp)
 1001990:	1885883a 	add	r2,r3,r2
 1001994:	10000035 	stwio	zero,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
 1001998:	e13ff917 	ldw	r4,-28(fp)
 100199c:	21000104 	addi	r4,r4,4
 10019a0:	e13ff915 	stw	r4,-28(fp)
 10019a4:	e0bff917 	ldw	r2,-28(fp)
 10019a8:	e0fffd17 	ldw	r3,-12(fp)
 10019ac:	10fff636 	bltu	r2,r3,1001988 <alt_up_pixel_buffer_dma_clear_screen+0x130>
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
 10019b0:	e037883a 	mov	sp,fp
 10019b4:	dfc00117 	ldw	ra,4(sp)
 10019b8:	df000017 	ldw	fp,0(sp)
 10019bc:	dec00204 	addi	sp,sp,8
 10019c0:	f800283a 	ret

010019c4 <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
 10019c4:	deffec04 	addi	sp,sp,-80
 10019c8:	dfc01315 	stw	ra,76(sp)
 10019cc:	df001215 	stw	fp,72(sp)
 10019d0:	df001204 	addi	fp,sp,72
 10019d4:	e13fee15 	stw	r4,-72(fp)
 10019d8:	e17fef15 	stw	r5,-68(fp)
 10019dc:	e1bff015 	stw	r6,-64(fp)
 10019e0:	e1fff115 	stw	r7,-60(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 10019e4:	e0bfee17 	ldw	r2,-72(fp)
 10019e8:	10800f17 	ldw	r2,60(r2)
 10019ec:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 10019f0:	e0bfee17 	ldw	r2,-72(fp)
 10019f4:	10801017 	ldw	r2,64(r2)
 10019f8:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
 10019fc:	e0bfef17 	ldw	r2,-68(fp)
 1001a00:	e0bffb15 	stw	r2,-20(fp)
	register unsigned int r_x = x1;
 1001a04:	e0fff117 	ldw	r3,-60(fp)
 1001a08:	e0fffa15 	stw	r3,-24(fp)
	register unsigned int t_y = y0;
 1001a0c:	e13ff017 	ldw	r4,-64(fp)
 1001a10:	e13ff915 	stw	r4,-28(fp)
	register unsigned int b_y = y1;
 1001a14:	e0800217 	ldw	r2,8(fp)
 1001a18:	e0bff815 	stw	r2,-32(fp)
	register unsigned int local_color = color;
 1001a1c:	e0c00317 	ldw	r3,12(fp)
 1001a20:	e0fff715 	stw	r3,-36(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
 1001a24:	e13ffa17 	ldw	r4,-24(fp)
 1001a28:	e0bffb17 	ldw	r2,-20(fp)
 1001a2c:	2080062e 	bgeu	r4,r2,1001a48 <alt_up_pixel_buffer_dma_draw_box+0x84>
	{
		temp = l_x;
 1001a30:	e0fffb17 	ldw	r3,-20(fp)
 1001a34:	e0fffc15 	stw	r3,-16(fp)
		l_x = r_x;
 1001a38:	e13ffa17 	ldw	r4,-24(fp)
 1001a3c:	e13ffb15 	stw	r4,-20(fp)
		r_x = temp;
 1001a40:	e0bffc17 	ldw	r2,-16(fp)
 1001a44:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y > b_y)
 1001a48:	e0fff817 	ldw	r3,-32(fp)
 1001a4c:	e13ff917 	ldw	r4,-28(fp)
 1001a50:	1900062e 	bgeu	r3,r4,1001a6c <alt_up_pixel_buffer_dma_draw_box+0xa8>
	{
		temp = t_y;
 1001a54:	e0bff917 	ldw	r2,-28(fp)
 1001a58:	e0bffc15 	stw	r2,-16(fp)
		t_y = b_y;
 1001a5c:	e0fff817 	ldw	r3,-32(fp)
 1001a60:	e0fff915 	stw	r3,-28(fp)
		b_y = temp;
 1001a64:	e13ffc17 	ldw	r4,-16(fp)
 1001a68:	e13ff815 	stw	r4,-32(fp)
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
 1001a6c:	e0bffb17 	ldw	r2,-20(fp)
 1001a70:	e0fffe17 	ldw	r3,-8(fp)
 1001a74:	10c10d2e 	bgeu	r2,r3,1001eac <alt_up_pixel_buffer_dma_draw_box+0x4e8>
 1001a78:	e13ff917 	ldw	r4,-28(fp)
 1001a7c:	e0bffd17 	ldw	r2,-12(fp)
 1001a80:	20800136 	bltu	r4,r2,1001a88 <alt_up_pixel_buffer_dma_draw_box+0xc4>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 1001a84:	00010906 	br	1001eac <alt_up_pixel_buffer_dma_draw_box+0x4e8>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
 1001a88:	e0fffa17 	ldw	r3,-24(fp)
 1001a8c:	e13ffe17 	ldw	r4,-8(fp)
 1001a90:	19000336 	bltu	r3,r4,1001aa0 <alt_up_pixel_buffer_dma_draw_box+0xdc>
	{
		r_x = limit_x - 1;
 1001a94:	e0bffe17 	ldw	r2,-8(fp)
 1001a98:	10bfffc4 	addi	r2,r2,-1
 1001a9c:	e0bffa15 	stw	r2,-24(fp)
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
 1001aa0:	e0fff817 	ldw	r3,-32(fp)
 1001aa4:	e13ffd17 	ldw	r4,-12(fp)
 1001aa8:	19000336 	bltu	r3,r4,1001ab8 <alt_up_pixel_buffer_dma_draw_box+0xf4>
	{
		b_y = limit_y - 1;
 1001aac:	e0bffd17 	ldw	r2,-12(fp)
 1001ab0:	10bfffc4 	addi	r2,r2,-1
 1001ab4:	e0bff815 	stw	r2,-32(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 1001ab8:	e0800417 	ldw	r2,16(fp)
 1001abc:	10800058 	cmpnei	r2,r2,1
 1001ac0:	1000041e 	bne	r2,zero,1001ad4 <alt_up_pixel_buffer_dma_draw_box+0x110>
		addr = pixel_buffer->back_buffer_start_address;
 1001ac4:	e0bfee17 	ldw	r2,-72(fp)
 1001ac8:	10800c17 	ldw	r2,48(r2)
 1001acc:	e0bfff15 	stw	r2,-4(fp)
 1001ad0:	00000306 	br	1001ae0 <alt_up_pixel_buffer_dma_draw_box+0x11c>
	else
		addr = pixel_buffer->buffer_start_address;
 1001ad4:	e0bfee17 	ldw	r2,-72(fp)
 1001ad8:	10800b17 	ldw	r2,44(r2)
 1001adc:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 1001ae0:	e0bfee17 	ldw	r2,-72(fp)
 1001ae4:	10800d17 	ldw	r2,52(r2)
 1001ae8:	1004c03a 	cmpne	r2,r2,zero
 1001aec:	1000721e 	bne	r2,zero,1001cb8 <alt_up_pixel_buffer_dma_draw_box+0x2f4>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 1001af0:	e0bfee17 	ldw	r2,-72(fp)
 1001af4:	10801317 	ldw	r2,76(r2)
 1001af8:	e0bff415 	stw	r2,-48(fp)
		addr = addr + (t_y << offset_y);
 1001afc:	e0bff417 	ldw	r2,-48(fp)
 1001b00:	e0fff917 	ldw	r3,-28(fp)
 1001b04:	1884983a 	sll	r2,r3,r2
 1001b08:	e13fff17 	ldw	r4,-4(fp)
 1001b0c:	2089883a 	add	r4,r4,r2
 1001b10:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 1001b14:	e0bfee17 	ldw	r2,-72(fp)
 1001b18:	10800e17 	ldw	r2,56(r2)
 1001b1c:	10800058 	cmpnei	r2,r2,1
 1001b20:	10001e1e 	bne	r2,zero,1001b9c <alt_up_pixel_buffer_dma_draw_box+0x1d8>
			for (y = t_y; y <= b_y; y++)
 1001b24:	e0bff917 	ldw	r2,-28(fp)
 1001b28:	e0bff515 	stw	r2,-44(fp)
 1001b2c:	00001706 	br	1001b8c <alt_up_pixel_buffer_dma_draw_box+0x1c8>
			{
				for (x = l_x; x <= r_x; x++)
 1001b30:	e0fffb17 	ldw	r3,-20(fp)
 1001b34:	e0fff615 	stw	r3,-40(fp)
 1001b38:	00000806 	br	1001b5c <alt_up_pixel_buffer_dma_draw_box+0x198>
				{
					IOWR_8DIRECT(addr, x, local_color);
 1001b3c:	e0ffff17 	ldw	r3,-4(fp)
 1001b40:	e0bff617 	ldw	r2,-40(fp)
 1001b44:	1885883a 	add	r2,r3,r2
 1001b48:	e0fff717 	ldw	r3,-36(fp)
 1001b4c:	10c00025 	stbio	r3,0(r2)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 1001b50:	e13ff617 	ldw	r4,-40(fp)
 1001b54:	21000044 	addi	r4,r4,1
 1001b58:	e13ff615 	stw	r4,-40(fp)
 1001b5c:	e0bffa17 	ldw	r2,-24(fp)
 1001b60:	e0fff617 	ldw	r3,-40(fp)
 1001b64:	10fff52e 	bgeu	r2,r3,1001b3c <alt_up_pixel_buffer_dma_draw_box+0x178>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
 1001b68:	e0fff417 	ldw	r3,-48(fp)
 1001b6c:	00800044 	movi	r2,1
 1001b70:	10c4983a 	sll	r2,r2,r3
 1001b74:	e13fff17 	ldw	r4,-4(fp)
 1001b78:	2089883a 	add	r4,r4,r2
 1001b7c:	e13fff15 	stw	r4,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 1001b80:	e0bff517 	ldw	r2,-44(fp)
 1001b84:	10800044 	addi	r2,r2,1
 1001b88:	e0bff515 	stw	r2,-44(fp)
 1001b8c:	e0fff817 	ldw	r3,-32(fp)
 1001b90:	e13ff517 	ldw	r4,-44(fp)
 1001b94:	193fe62e 	bgeu	r3,r4,1001b30 <alt_up_pixel_buffer_dma_draw_box+0x16c>
 1001b98:	0000c406 	br	1001eac <alt_up_pixel_buffer_dma_draw_box+0x4e8>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 1001b9c:	e0bfee17 	ldw	r2,-72(fp)
 1001ba0:	10800e17 	ldw	r2,56(r2)
 1001ba4:	10800098 	cmpnei	r2,r2,2
 1001ba8:	1000211e 	bne	r2,zero,1001c30 <alt_up_pixel_buffer_dma_draw_box+0x26c>
			for (y = t_y; y <= b_y; y++)
 1001bac:	e0bff917 	ldw	r2,-28(fp)
 1001bb0:	e0bff515 	stw	r2,-44(fp)
 1001bb4:	00001a06 	br	1001c20 <alt_up_pixel_buffer_dma_draw_box+0x25c>
			{
				for (x = l_x; x <= r_x; x++)
 1001bb8:	e0fffb17 	ldw	r3,-20(fp)
 1001bbc:	e0fff615 	stw	r3,-40(fp)
 1001bc0:	00000b06 	br	1001bf0 <alt_up_pixel_buffer_dma_draw_box+0x22c>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
 1001bc4:	e13ff617 	ldw	r4,-40(fp)
 1001bc8:	e13ff617 	ldw	r4,-40(fp)
 1001bcc:	2105883a 	add	r2,r4,r4
 1001bd0:	1007883a 	mov	r3,r2
 1001bd4:	e0bfff17 	ldw	r2,-4(fp)
 1001bd8:	1885883a 	add	r2,r3,r2
 1001bdc:	e0fff717 	ldw	r3,-36(fp)
 1001be0:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 1001be4:	e0bff617 	ldw	r2,-40(fp)
 1001be8:	10800044 	addi	r2,r2,1
 1001bec:	e0bff615 	stw	r2,-40(fp)
 1001bf0:	e0fffa17 	ldw	r3,-24(fp)
 1001bf4:	e13ff617 	ldw	r4,-40(fp)
 1001bf8:	193ff22e 	bgeu	r3,r4,1001bc4 <alt_up_pixel_buffer_dma_draw_box+0x200>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
 1001bfc:	e0fff417 	ldw	r3,-48(fp)
 1001c00:	00800044 	movi	r2,1
 1001c04:	10c4983a 	sll	r2,r2,r3
 1001c08:	e0ffff17 	ldw	r3,-4(fp)
 1001c0c:	1887883a 	add	r3,r3,r2
 1001c10:	e0ffff15 	stw	r3,-4(fp)
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 1001c14:	e13ff517 	ldw	r4,-44(fp)
 1001c18:	21000044 	addi	r4,r4,1
 1001c1c:	e13ff515 	stw	r4,-44(fp)
 1001c20:	e0bff817 	ldw	r2,-32(fp)
 1001c24:	e0fff517 	ldw	r3,-44(fp)
 1001c28:	10ffe32e 	bgeu	r2,r3,1001bb8 <alt_up_pixel_buffer_dma_draw_box+0x1f4>
 1001c2c:	00009f06 	br	1001eac <alt_up_pixel_buffer_dma_draw_box+0x4e8>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 1001c30:	e13ff917 	ldw	r4,-28(fp)
 1001c34:	e13ff515 	stw	r4,-44(fp)
 1001c38:	00001b06 	br	1001ca8 <alt_up_pixel_buffer_dma_draw_box+0x2e4>
			{
				for (x = l_x; x <= r_x; x++)
 1001c3c:	e0bffb17 	ldw	r2,-20(fp)
 1001c40:	e0bff615 	stw	r2,-40(fp)
 1001c44:	00000c06 	br	1001c78 <alt_up_pixel_buffer_dma_draw_box+0x2b4>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
 1001c48:	e0fff617 	ldw	r3,-40(fp)
 1001c4c:	e0fff617 	ldw	r3,-40(fp)
 1001c50:	18c5883a 	add	r2,r3,r3
 1001c54:	1085883a 	add	r2,r2,r2
 1001c58:	1007883a 	mov	r3,r2
 1001c5c:	e0bfff17 	ldw	r2,-4(fp)
 1001c60:	1885883a 	add	r2,r3,r2
 1001c64:	e0fff717 	ldw	r3,-36(fp)
 1001c68:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 1001c6c:	e13ff617 	ldw	r4,-40(fp)
 1001c70:	21000044 	addi	r4,r4,1
 1001c74:	e13ff615 	stw	r4,-40(fp)
 1001c78:	e0bffa17 	ldw	r2,-24(fp)
 1001c7c:	e0fff617 	ldw	r3,-40(fp)
 1001c80:	10fff12e 	bgeu	r2,r3,1001c48 <alt_up_pixel_buffer_dma_draw_box+0x284>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
 1001c84:	e0fff417 	ldw	r3,-48(fp)
 1001c88:	00800044 	movi	r2,1
 1001c8c:	10c4983a 	sll	r2,r2,r3
 1001c90:	e13fff17 	ldw	r4,-4(fp)
 1001c94:	2089883a 	add	r4,r4,r2
 1001c98:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 1001c9c:	e0bff517 	ldw	r2,-44(fp)
 1001ca0:	10800044 	addi	r2,r2,1
 1001ca4:	e0bff515 	stw	r2,-44(fp)
 1001ca8:	e0fff817 	ldw	r3,-32(fp)
 1001cac:	e13ff517 	ldw	r4,-44(fp)
 1001cb0:	193fe22e 	bgeu	r3,r4,1001c3c <alt_up_pixel_buffer_dma_draw_box+0x278>
 1001cb4:	00007d06 	br	1001eac <alt_up_pixel_buffer_dma_draw_box+0x4e8>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 1001cb8:	e0bfee17 	ldw	r2,-72(fp)
 1001cbc:	10800e17 	ldw	r2,56(r2)
 1001cc0:	10800058 	cmpnei	r2,r2,1
 1001cc4:	1000221e 	bne	r2,zero,1001d50 <alt_up_pixel_buffer_dma_draw_box+0x38c>
			addr = addr + t_y * limit_x;
 1001cc8:	e13ff917 	ldw	r4,-28(fp)
 1001ccc:	e17ffe17 	ldw	r5,-8(fp)
 1001cd0:	10041540 	call	1004154 <__mulsi3>
 1001cd4:	e0ffff17 	ldw	r3,-4(fp)
 1001cd8:	1887883a 	add	r3,r3,r2
 1001cdc:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
 1001ce0:	e13ff917 	ldw	r4,-28(fp)
 1001ce4:	e13ff215 	stw	r4,-56(fp)
 1001ce8:	00001506 	br	1001d40 <alt_up_pixel_buffer_dma_draw_box+0x37c>
			{
				for (x = l_x; x <= r_x; x++)
 1001cec:	e0bffb17 	ldw	r2,-20(fp)
 1001cf0:	e0bff315 	stw	r2,-52(fp)
 1001cf4:	00000806 	br	1001d18 <alt_up_pixel_buffer_dma_draw_box+0x354>
				{
					IOWR_8DIRECT(addr, x, local_color);
 1001cf8:	e0ffff17 	ldw	r3,-4(fp)
 1001cfc:	e0bff317 	ldw	r2,-52(fp)
 1001d00:	1885883a 	add	r2,r3,r2
 1001d04:	e0fff717 	ldw	r3,-36(fp)
 1001d08:	10c00025 	stbio	r3,0(r2)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 1001d0c:	e0fff317 	ldw	r3,-52(fp)
 1001d10:	18c00044 	addi	r3,r3,1
 1001d14:	e0fff315 	stw	r3,-52(fp)
 1001d18:	e13ffa17 	ldw	r4,-24(fp)
 1001d1c:	e0bff317 	ldw	r2,-52(fp)
 1001d20:	20bff52e 	bgeu	r4,r2,1001cf8 <alt_up_pixel_buffer_dma_draw_box+0x334>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
 1001d24:	e0ffff17 	ldw	r3,-4(fp)
 1001d28:	e13ffe17 	ldw	r4,-8(fp)
 1001d2c:	1907883a 	add	r3,r3,r4
 1001d30:	e0ffff15 	stw	r3,-4(fp)
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 1001d34:	e0bff217 	ldw	r2,-56(fp)
 1001d38:	10800044 	addi	r2,r2,1
 1001d3c:	e0bff215 	stw	r2,-56(fp)
 1001d40:	e0fff817 	ldw	r3,-32(fp)
 1001d44:	e13ff217 	ldw	r4,-56(fp)
 1001d48:	193fe82e 	bgeu	r3,r4,1001cec <alt_up_pixel_buffer_dma_draw_box+0x328>
 1001d4c:	00005706 	br	1001eac <alt_up_pixel_buffer_dma_draw_box+0x4e8>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 1001d50:	e0bfee17 	ldw	r2,-72(fp)
 1001d54:	10800e17 	ldw	r2,56(r2)
 1001d58:	10800098 	cmpnei	r2,r2,2
 1001d5c:	1000291e 	bne	r2,zero,1001e04 <alt_up_pixel_buffer_dma_draw_box+0x440>
			limit_x = limit_x << 1;
 1001d60:	e0fffe17 	ldw	r3,-8(fp)
 1001d64:	e0fffe17 	ldw	r3,-8(fp)
 1001d68:	18c5883a 	add	r2,r3,r3
 1001d6c:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
 1001d70:	e13ff917 	ldw	r4,-28(fp)
 1001d74:	e17ffe17 	ldw	r5,-8(fp)
 1001d78:	10041540 	call	1004154 <__mulsi3>
 1001d7c:	e13fff17 	ldw	r4,-4(fp)
 1001d80:	2089883a 	add	r4,r4,r2
 1001d84:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
 1001d88:	e0bff917 	ldw	r2,-28(fp)
 1001d8c:	e0bff215 	stw	r2,-56(fp)
 1001d90:	00001806 	br	1001df4 <alt_up_pixel_buffer_dma_draw_box+0x430>
			{
				for (x = l_x; x <= r_x; x++)
 1001d94:	e0fffb17 	ldw	r3,-20(fp)
 1001d98:	e0fff315 	stw	r3,-52(fp)
 1001d9c:	00000b06 	br	1001dcc <alt_up_pixel_buffer_dma_draw_box+0x408>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
 1001da0:	e13ff317 	ldw	r4,-52(fp)
 1001da4:	e13ff317 	ldw	r4,-52(fp)
 1001da8:	2105883a 	add	r2,r4,r4
 1001dac:	1007883a 	mov	r3,r2
 1001db0:	e0bfff17 	ldw	r2,-4(fp)
 1001db4:	1885883a 	add	r2,r3,r2
 1001db8:	e0fff717 	ldw	r3,-36(fp)
 1001dbc:	10c0002d 	sthio	r3,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 1001dc0:	e0bff317 	ldw	r2,-52(fp)
 1001dc4:	10800044 	addi	r2,r2,1
 1001dc8:	e0bff315 	stw	r2,-52(fp)
 1001dcc:	e0fffa17 	ldw	r3,-24(fp)
 1001dd0:	e13ff317 	ldw	r4,-52(fp)
 1001dd4:	193ff22e 	bgeu	r3,r4,1001da0 <alt_up_pixel_buffer_dma_draw_box+0x3dc>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
 1001dd8:	e0bfff17 	ldw	r2,-4(fp)
 1001ddc:	e0fffe17 	ldw	r3,-8(fp)
 1001de0:	10c5883a 	add	r2,r2,r3
 1001de4:	e0bfff15 	stw	r2,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 1001de8:	e13ff217 	ldw	r4,-56(fp)
 1001dec:	21000044 	addi	r4,r4,1
 1001df0:	e13ff215 	stw	r4,-56(fp)
 1001df4:	e0bff817 	ldw	r2,-32(fp)
 1001df8:	e0fff217 	ldw	r3,-56(fp)
 1001dfc:	10ffe52e 	bgeu	r2,r3,1001d94 <alt_up_pixel_buffer_dma_draw_box+0x3d0>
 1001e00:	00002a06 	br	1001eac <alt_up_pixel_buffer_dma_draw_box+0x4e8>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
 1001e04:	e13ffe17 	ldw	r4,-8(fp)
 1001e08:	e13ffe17 	ldw	r4,-8(fp)
 1001e0c:	2105883a 	add	r2,r4,r4
 1001e10:	1085883a 	add	r2,r2,r2
 1001e14:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
 1001e18:	e13ff917 	ldw	r4,-28(fp)
 1001e1c:	e17ffe17 	ldw	r5,-8(fp)
 1001e20:	10041540 	call	1004154 <__mulsi3>
 1001e24:	e0ffff17 	ldw	r3,-4(fp)
 1001e28:	1887883a 	add	r3,r3,r2
 1001e2c:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
 1001e30:	e13ff917 	ldw	r4,-28(fp)
 1001e34:	e13ff215 	stw	r4,-56(fp)
 1001e38:	00001906 	br	1001ea0 <alt_up_pixel_buffer_dma_draw_box+0x4dc>
			{
				for (x = l_x; x <= r_x; x++)
 1001e3c:	e0bffb17 	ldw	r2,-20(fp)
 1001e40:	e0bff315 	stw	r2,-52(fp)
 1001e44:	00000c06 	br	1001e78 <alt_up_pixel_buffer_dma_draw_box+0x4b4>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
 1001e48:	e0fff317 	ldw	r3,-52(fp)
 1001e4c:	e0fff317 	ldw	r3,-52(fp)
 1001e50:	18c5883a 	add	r2,r3,r3
 1001e54:	1085883a 	add	r2,r2,r2
 1001e58:	1007883a 	mov	r3,r2
 1001e5c:	e0bfff17 	ldw	r2,-4(fp)
 1001e60:	1885883a 	add	r2,r3,r2
 1001e64:	e0fff717 	ldw	r3,-36(fp)
 1001e68:	10c00035 	stwio	r3,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 1001e6c:	e13ff317 	ldw	r4,-52(fp)
 1001e70:	21000044 	addi	r4,r4,1
 1001e74:	e13ff315 	stw	r4,-52(fp)
 1001e78:	e0bffa17 	ldw	r2,-24(fp)
 1001e7c:	e0fff317 	ldw	r3,-52(fp)
 1001e80:	10fff12e 	bgeu	r2,r3,1001e48 <alt_up_pixel_buffer_dma_draw_box+0x484>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
 1001e84:	e13fff17 	ldw	r4,-4(fp)
 1001e88:	e0bffe17 	ldw	r2,-8(fp)
 1001e8c:	2089883a 	add	r4,r4,r2
 1001e90:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 1001e94:	e0fff217 	ldw	r3,-56(fp)
 1001e98:	18c00044 	addi	r3,r3,1
 1001e9c:	e0fff215 	stw	r3,-56(fp)
 1001ea0:	e13ff817 	ldw	r4,-32(fp)
 1001ea4:	e0bff217 	ldw	r2,-56(fp)
 1001ea8:	20bfe42e 	bgeu	r4,r2,1001e3c <alt_up_pixel_buffer_dma_draw_box+0x478>
				}
				addr = addr + limit_x;
			}
		}
	}
}
 1001eac:	e037883a 	mov	sp,fp
 1001eb0:	dfc00117 	ldw	ra,4(sp)
 1001eb4:	df000017 	ldw	fp,0(sp)
 1001eb8:	dec00204 	addi	sp,sp,8
 1001ebc:	f800283a 	ret

01001ec0 <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
 1001ec0:	defff104 	addi	sp,sp,-60
 1001ec4:	dfc00e15 	stw	ra,56(sp)
 1001ec8:	df000d15 	stw	fp,52(sp)
 1001ecc:	df000d04 	addi	fp,sp,52
 1001ed0:	e13ff315 	stw	r4,-52(fp)
 1001ed4:	e17ff415 	stw	r5,-48(fp)
 1001ed8:	e1bff515 	stw	r6,-44(fp)
 1001edc:	e1fff615 	stw	r7,-40(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 1001ee0:	e0bff317 	ldw	r2,-52(fp)
 1001ee4:	10800f17 	ldw	r2,60(r2)
 1001ee8:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 1001eec:	e0bff317 	ldw	r2,-52(fp)
 1001ef0:	10801017 	ldw	r2,64(r2)
 1001ef4:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int l_x = x0;
 1001ef8:	e0bff417 	ldw	r2,-48(fp)
 1001efc:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int r_x = x1;
 1001f00:	e0fff517 	ldw	r3,-44(fp)
 1001f04:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int line_y = y;
 1001f08:	e13ff617 	ldw	r4,-40(fp)
 1001f0c:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
 1001f10:	e0800217 	ldw	r2,8(fp)
 1001f14:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
 1001f18:	e0fffb17 	ldw	r3,-20(fp)
 1001f1c:	e13ffc17 	ldw	r4,-16(fp)
 1001f20:	1900042e 	bgeu	r3,r4,1001f34 <alt_up_pixel_buffer_dma_draw_hline+0x74>
	{
		temp = l_x;
 1001f24:	e0bffc17 	ldw	r2,-16(fp)
		l_x = r_x;
 1001f28:	e0fffb17 	ldw	r3,-20(fp)
 1001f2c:	e0fffc15 	stw	r3,-16(fp)
		r_x = temp;
 1001f30:	e0bffb15 	stw	r2,-20(fp)
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
 1001f34:	e13ffc17 	ldw	r4,-16(fp)
 1001f38:	e0bffe17 	ldw	r2,-8(fp)
 1001f3c:	2080b12e 	bgeu	r4,r2,1002204 <alt_up_pixel_buffer_dma_draw_hline+0x344>
 1001f40:	e13ffa17 	ldw	r4,-24(fp)
 1001f44:	e0fffd17 	ldw	r3,-12(fp)
 1001f48:	20c00136 	bltu	r4,r3,1001f50 <alt_up_pixel_buffer_dma_draw_hline+0x90>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 1001f4c:	0000ad06 	br	1002204 <alt_up_pixel_buffer_dma_draw_hline+0x344>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
 1001f50:	e0bffb17 	ldw	r2,-20(fp)
 1001f54:	e0fffe17 	ldw	r3,-8(fp)
 1001f58:	10c00336 	bltu	r2,r3,1001f68 <alt_up_pixel_buffer_dma_draw_hline+0xa8>
	{
		r_x = limit_x - 1;
 1001f5c:	e13ffe17 	ldw	r4,-8(fp)
 1001f60:	213fffc4 	addi	r4,r4,-1
 1001f64:	e13ffb15 	stw	r4,-20(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 1001f68:	e0800317 	ldw	r2,12(fp)
 1001f6c:	10800058 	cmpnei	r2,r2,1
 1001f70:	1000041e 	bne	r2,zero,1001f84 <alt_up_pixel_buffer_dma_draw_hline+0xc4>
		addr = pixel_buffer->back_buffer_start_address;
 1001f74:	e0bff317 	ldw	r2,-52(fp)
 1001f78:	10800c17 	ldw	r2,48(r2)
 1001f7c:	e0bfff15 	stw	r2,-4(fp)
 1001f80:	00000306 	br	1001f90 <alt_up_pixel_buffer_dma_draw_hline+0xd0>
	else
		addr = pixel_buffer->buffer_start_address;
 1001f84:	e0bff317 	ldw	r2,-52(fp)
 1001f88:	10800b17 	ldw	r2,44(r2)
 1001f8c:	e0bfff15 	stw	r2,-4(fp)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 1001f90:	e0bff317 	ldw	r2,-52(fp)
 1001f94:	10800d17 	ldw	r2,52(r2)
 1001f98:	1004c03a 	cmpne	r2,r2,zero
 1001f9c:	1000431e 	bne	r2,zero,10020ac <alt_up_pixel_buffer_dma_draw_hline+0x1ec>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 1001fa0:	e0bff317 	ldw	r2,-52(fp)
 1001fa4:	10801317 	ldw	r2,76(r2)
		addr = addr + (line_y << offset_y);
 1001fa8:	e0fffa17 	ldw	r3,-24(fp)
 1001fac:	1884983a 	sll	r2,r3,r2
 1001fb0:	e13fff17 	ldw	r4,-4(fp)
 1001fb4:	2089883a 	add	r4,r4,r2
 1001fb8:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 1001fbc:	e0bff317 	ldw	r2,-52(fp)
 1001fc0:	10800e17 	ldw	r2,56(r2)
 1001fc4:	10800058 	cmpnei	r2,r2,1
 1001fc8:	10000f1e 	bne	r2,zero,1002008 <alt_up_pixel_buffer_dma_draw_hline+0x148>
			for (x = l_x; x <= r_x; x++)
 1001fcc:	e0bffc17 	ldw	r2,-16(fp)
 1001fd0:	e0bff815 	stw	r2,-32(fp)
 1001fd4:	00000806 	br	1001ff8 <alt_up_pixel_buffer_dma_draw_hline+0x138>
			{
				IOWR_8DIRECT(addr, x, local_color);
 1001fd8:	e0ffff17 	ldw	r3,-4(fp)
 1001fdc:	e0bff817 	ldw	r2,-32(fp)
 1001fe0:	1885883a 	add	r2,r3,r2
 1001fe4:	e0fff917 	ldw	r3,-28(fp)
 1001fe8:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
 1001fec:	e0fff817 	ldw	r3,-32(fp)
 1001ff0:	18c00044 	addi	r3,r3,1
 1001ff4:	e0fff815 	stw	r3,-32(fp)
 1001ff8:	e13ffb17 	ldw	r4,-20(fp)
 1001ffc:	e0bff817 	ldw	r2,-32(fp)
 1002000:	20bff52e 	bgeu	r4,r2,1001fd8 <alt_up_pixel_buffer_dma_draw_hline+0x118>
 1002004:	00007f06 	br	1002204 <alt_up_pixel_buffer_dma_draw_hline+0x344>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 1002008:	e0bff317 	ldw	r2,-52(fp)
 100200c:	10800e17 	ldw	r2,56(r2)
 1002010:	10800098 	cmpnei	r2,r2,2
 1002014:	1000121e 	bne	r2,zero,1002060 <alt_up_pixel_buffer_dma_draw_hline+0x1a0>
			for (x = l_x; x <= r_x; x++)
 1002018:	e0fffc17 	ldw	r3,-16(fp)
 100201c:	e0fff815 	stw	r3,-32(fp)
 1002020:	00000b06 	br	1002050 <alt_up_pixel_buffer_dma_draw_hline+0x190>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
 1002024:	e13ff817 	ldw	r4,-32(fp)
 1002028:	e13ff817 	ldw	r4,-32(fp)
 100202c:	2105883a 	add	r2,r4,r4
 1002030:	1007883a 	mov	r3,r2
 1002034:	e0bfff17 	ldw	r2,-4(fp)
 1002038:	1885883a 	add	r2,r3,r2
 100203c:	e0fff917 	ldw	r3,-28(fp)
 1002040:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
 1002044:	e0bff817 	ldw	r2,-32(fp)
 1002048:	10800044 	addi	r2,r2,1
 100204c:	e0bff815 	stw	r2,-32(fp)
 1002050:	e0fffb17 	ldw	r3,-20(fp)
 1002054:	e13ff817 	ldw	r4,-32(fp)
 1002058:	193ff22e 	bgeu	r3,r4,1002024 <alt_up_pixel_buffer_dma_draw_hline+0x164>
 100205c:	00006906 	br	1002204 <alt_up_pixel_buffer_dma_draw_hline+0x344>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
 1002060:	e0bffc17 	ldw	r2,-16(fp)
 1002064:	e0bff815 	stw	r2,-32(fp)
 1002068:	00000c06 	br	100209c <alt_up_pixel_buffer_dma_draw_hline+0x1dc>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
 100206c:	e0fff817 	ldw	r3,-32(fp)
 1002070:	e0fff817 	ldw	r3,-32(fp)
 1002074:	18c5883a 	add	r2,r3,r3
 1002078:	1085883a 	add	r2,r2,r2
 100207c:	1007883a 	mov	r3,r2
 1002080:	e0bfff17 	ldw	r2,-4(fp)
 1002084:	1885883a 	add	r2,r3,r2
 1002088:	e0fff917 	ldw	r3,-28(fp)
 100208c:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
 1002090:	e13ff817 	ldw	r4,-32(fp)
 1002094:	21000044 	addi	r4,r4,1
 1002098:	e13ff815 	stw	r4,-32(fp)
 100209c:	e0bffb17 	ldw	r2,-20(fp)
 10020a0:	e0fff817 	ldw	r3,-32(fp)
 10020a4:	10fff12e 	bgeu	r2,r3,100206c <alt_up_pixel_buffer_dma_draw_hline+0x1ac>
 10020a8:	00005606 	br	1002204 <alt_up_pixel_buffer_dma_draw_hline+0x344>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 10020ac:	e0bff317 	ldw	r2,-52(fp)
 10020b0:	10800e17 	ldw	r2,56(r2)
 10020b4:	10800058 	cmpnei	r2,r2,1
 10020b8:	1000151e 	bne	r2,zero,1002110 <alt_up_pixel_buffer_dma_draw_hline+0x250>
			addr = addr + line_y * limit_x;
 10020bc:	e13ffa17 	ldw	r4,-24(fp)
 10020c0:	e17ffe17 	ldw	r5,-8(fp)
 10020c4:	10041540 	call	1004154 <__mulsi3>
 10020c8:	e13fff17 	ldw	r4,-4(fp)
 10020cc:	2089883a 	add	r4,r4,r2
 10020d0:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
 10020d4:	e0bffc17 	ldw	r2,-16(fp)
 10020d8:	e0bff715 	stw	r2,-36(fp)
 10020dc:	00000806 	br	1002100 <alt_up_pixel_buffer_dma_draw_hline+0x240>
			{
				IOWR_8DIRECT(addr, x, local_color);
 10020e0:	e0ffff17 	ldw	r3,-4(fp)
 10020e4:	e0bff717 	ldw	r2,-36(fp)
 10020e8:	1885883a 	add	r2,r3,r2
 10020ec:	e0fff917 	ldw	r3,-28(fp)
 10020f0:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 10020f4:	e0fff717 	ldw	r3,-36(fp)
 10020f8:	18c00044 	addi	r3,r3,1
 10020fc:	e0fff715 	stw	r3,-36(fp)
 1002100:	e13ffb17 	ldw	r4,-20(fp)
 1002104:	e0bff717 	ldw	r2,-36(fp)
 1002108:	20bff52e 	bgeu	r4,r2,10020e0 <alt_up_pixel_buffer_dma_draw_hline+0x220>
 100210c:	00003d06 	br	1002204 <alt_up_pixel_buffer_dma_draw_hline+0x344>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 1002110:	e0bff317 	ldw	r2,-52(fp)
 1002114:	10800e17 	ldw	r2,56(r2)
 1002118:	10800098 	cmpnei	r2,r2,2
 100211c:	10001c1e 	bne	r2,zero,1002190 <alt_up_pixel_buffer_dma_draw_hline+0x2d0>
			limit_x = limit_x << 1;
 1002120:	e0fffe17 	ldw	r3,-8(fp)
 1002124:	e0fffe17 	ldw	r3,-8(fp)
 1002128:	18c5883a 	add	r2,r3,r3
 100212c:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
 1002130:	e13ffa17 	ldw	r4,-24(fp)
 1002134:	e17ffe17 	ldw	r5,-8(fp)
 1002138:	10041540 	call	1004154 <__mulsi3>
 100213c:	e13fff17 	ldw	r4,-4(fp)
 1002140:	2089883a 	add	r4,r4,r2
 1002144:	e13fff15 	stw	r4,-4(fp)
			for (x = l_x; x <= r_x; x++)
 1002148:	e0bffc17 	ldw	r2,-16(fp)
 100214c:	e0bff715 	stw	r2,-36(fp)
 1002150:	00000b06 	br	1002180 <alt_up_pixel_buffer_dma_draw_hline+0x2c0>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
 1002154:	e0fff717 	ldw	r3,-36(fp)
 1002158:	e0fff717 	ldw	r3,-36(fp)
 100215c:	18c5883a 	add	r2,r3,r3
 1002160:	1007883a 	mov	r3,r2
 1002164:	e0bfff17 	ldw	r2,-4(fp)
 1002168:	1885883a 	add	r2,r3,r2
 100216c:	e0fff917 	ldw	r3,-28(fp)
 1002170:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 1002174:	e13ff717 	ldw	r4,-36(fp)
 1002178:	21000044 	addi	r4,r4,1
 100217c:	e13ff715 	stw	r4,-36(fp)
 1002180:	e0bffb17 	ldw	r2,-20(fp)
 1002184:	e0fff717 	ldw	r3,-36(fp)
 1002188:	10fff22e 	bgeu	r2,r3,1002154 <alt_up_pixel_buffer_dma_draw_hline+0x294>
 100218c:	00001d06 	br	1002204 <alt_up_pixel_buffer_dma_draw_hline+0x344>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			limit_x = limit_x << 2;
 1002190:	e13ffe17 	ldw	r4,-8(fp)
 1002194:	e13ffe17 	ldw	r4,-8(fp)
 1002198:	2105883a 	add	r2,r4,r4
 100219c:	1085883a 	add	r2,r2,r2
 10021a0:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + line_y * limit_x;
 10021a4:	e13ffa17 	ldw	r4,-24(fp)
 10021a8:	e17ffe17 	ldw	r5,-8(fp)
 10021ac:	10041540 	call	1004154 <__mulsi3>
 10021b0:	e0ffff17 	ldw	r3,-4(fp)
 10021b4:	1887883a 	add	r3,r3,r2
 10021b8:	e0ffff15 	stw	r3,-4(fp)
			for (x = l_x; x <= r_x; x++)
 10021bc:	e13ffc17 	ldw	r4,-16(fp)
 10021c0:	e13ff715 	stw	r4,-36(fp)
 10021c4:	00000c06 	br	10021f8 <alt_up_pixel_buffer_dma_draw_hline+0x338>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
 10021c8:	e0fff717 	ldw	r3,-36(fp)
 10021cc:	e0fff717 	ldw	r3,-36(fp)
 10021d0:	18c5883a 	add	r2,r3,r3
 10021d4:	1085883a 	add	r2,r2,r2
 10021d8:	1007883a 	mov	r3,r2
 10021dc:	e0bfff17 	ldw	r2,-4(fp)
 10021e0:	1885883a 	add	r2,r3,r2
 10021e4:	e0fff917 	ldw	r3,-28(fp)
 10021e8:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 10021ec:	e13ff717 	ldw	r4,-36(fp)
 10021f0:	21000044 	addi	r4,r4,1
 10021f4:	e13ff715 	stw	r4,-36(fp)
 10021f8:	e0bffb17 	ldw	r2,-20(fp)
 10021fc:	e0fff717 	ldw	r3,-36(fp)
 1002200:	10fff12e 	bgeu	r2,r3,10021c8 <alt_up_pixel_buffer_dma_draw_hline+0x308>
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
		}
	}
}
 1002204:	e037883a 	mov	sp,fp
 1002208:	dfc00117 	ldw	ra,4(sp)
 100220c:	df000017 	ldw	fp,0(sp)
 1002210:	dec00204 	addi	sp,sp,8
 1002214:	f800283a 	ret

01002218 <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
 1002218:	defff004 	addi	sp,sp,-64
 100221c:	dfc00f15 	stw	ra,60(sp)
 1002220:	df000e15 	stw	fp,56(sp)
 1002224:	df000e04 	addi	fp,sp,56
 1002228:	e13ff215 	stw	r4,-56(fp)
 100222c:	e17ff315 	stw	r5,-52(fp)
 1002230:	e1bff415 	stw	r6,-48(fp)
 1002234:	e1fff515 	stw	r7,-44(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 1002238:	e0bff217 	ldw	r2,-56(fp)
 100223c:	10800f17 	ldw	r2,60(r2)
 1002240:	e0bffe15 	stw	r2,-8(fp)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 1002244:	e0bff217 	ldw	r2,-56(fp)
 1002248:	10801017 	ldw	r2,64(r2)
 100224c:	e0bffd15 	stw	r2,-12(fp)
	register unsigned int temp;
	register unsigned int line_x = x;
 1002250:	e0bff317 	ldw	r2,-52(fp)
 1002254:	e0bffc15 	stw	r2,-16(fp)
	register unsigned int t_y = y0;
 1002258:	e0fff417 	ldw	r3,-48(fp)
 100225c:	e0fffb15 	stw	r3,-20(fp)
	register unsigned int b_y = y1;
 1002260:	e13ff517 	ldw	r4,-44(fp)
 1002264:	e13ffa15 	stw	r4,-24(fp)
	register unsigned int local_color = color;
 1002268:	e0800217 	ldw	r2,8(fp)
 100226c:	e0bff915 	stw	r2,-28(fp)
	
	/* Check coordinates */
	if (t_y > b_y)
 1002270:	e0fffa17 	ldw	r3,-24(fp)
 1002274:	e13ffb17 	ldw	r4,-20(fp)
 1002278:	1900042e 	bgeu	r3,r4,100228c <alt_up_pixel_buffer_dma_draw_vline+0x74>
	{
		temp = t_y;
 100227c:	e0bffb17 	ldw	r2,-20(fp)
		t_y = b_y;
 1002280:	e0fffa17 	ldw	r3,-24(fp)
 1002284:	e0fffb15 	stw	r3,-20(fp)
		b_y = temp;
 1002288:	e0bffa15 	stw	r2,-24(fp)
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
 100228c:	e13ffc17 	ldw	r4,-16(fp)
 1002290:	e0bffe17 	ldw	r2,-8(fp)
 1002294:	2080d12e 	bgeu	r4,r2,10025dc <alt_up_pixel_buffer_dma_draw_vline+0x3c4>
 1002298:	e0fffb17 	ldw	r3,-20(fp)
 100229c:	e13ffd17 	ldw	r4,-12(fp)
 10022a0:	19000136 	bltu	r3,r4,10022a8 <alt_up_pixel_buffer_dma_draw_vline+0x90>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 10022a4:	0000cd06 	br	10025dc <alt_up_pixel_buffer_dma_draw_vline+0x3c4>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
 10022a8:	e0bffa17 	ldw	r2,-24(fp)
 10022ac:	e0fffd17 	ldw	r3,-12(fp)
 10022b0:	10c00336 	bltu	r2,r3,10022c0 <alt_up_pixel_buffer_dma_draw_vline+0xa8>
	{
		b_y = limit_y - 1;
 10022b4:	e13ffd17 	ldw	r4,-12(fp)
 10022b8:	213fffc4 	addi	r4,r4,-1
 10022bc:	e13ffa15 	stw	r4,-24(fp)
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 10022c0:	e0800317 	ldw	r2,12(fp)
 10022c4:	10800058 	cmpnei	r2,r2,1
 10022c8:	1000041e 	bne	r2,zero,10022dc <alt_up_pixel_buffer_dma_draw_vline+0xc4>
		addr = pixel_buffer->back_buffer_start_address;
 10022cc:	e0bff217 	ldw	r2,-56(fp)
 10022d0:	10800c17 	ldw	r2,48(r2)
 10022d4:	e0bfff15 	stw	r2,-4(fp)
 10022d8:	00000306 	br	10022e8 <alt_up_pixel_buffer_dma_draw_vline+0xd0>
	else
		addr = pixel_buffer->buffer_start_address;
 10022dc:	e0bff217 	ldw	r2,-56(fp)
 10022e0:	10800b17 	ldw	r2,44(r2)
 10022e4:	e0bfff15 	stw	r2,-4(fp)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 10022e8:	e0bff217 	ldw	r2,-56(fp)
 10022ec:	10800d17 	ldw	r2,52(r2)
 10022f0:	1004c03a 	cmpne	r2,r2,zero
 10022f4:	1000571e 	bne	r2,zero,1002454 <alt_up_pixel_buffer_dma_draw_vline+0x23c>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 10022f8:	e0bff217 	ldw	r2,-56(fp)
 10022fc:	10801317 	ldw	r2,76(r2)
 1002300:	e0bff715 	stw	r2,-36(fp)
		addr = addr + (t_y << offset_y);
 1002304:	e0bff717 	ldw	r2,-36(fp)
 1002308:	e0fffb17 	ldw	r3,-20(fp)
 100230c:	1884983a 	sll	r2,r3,r2
 1002310:	e13fff17 	ldw	r4,-4(fp)
 1002314:	2089883a 	add	r4,r4,r2
 1002318:	e13fff15 	stw	r4,-4(fp)
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 100231c:	e0bff217 	ldw	r2,-56(fp)
 1002320:	10800e17 	ldw	r2,56(r2)
 1002324:	10800058 	cmpnei	r2,r2,1
 1002328:	1000151e 	bne	r2,zero,1002380 <alt_up_pixel_buffer_dma_draw_vline+0x168>
			for (y = t_y; y <= b_y; y++)
 100232c:	e0bffb17 	ldw	r2,-20(fp)
 1002330:	e0bff815 	stw	r2,-32(fp)
 1002334:	00000e06 	br	1002370 <alt_up_pixel_buffer_dma_draw_vline+0x158>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
 1002338:	e0ffff17 	ldw	r3,-4(fp)
 100233c:	e0bffc17 	ldw	r2,-16(fp)
 1002340:	1885883a 	add	r2,r3,r2
 1002344:	e0fff917 	ldw	r3,-28(fp)
 1002348:	10c00025 	stbio	r3,0(r2)
				addr = addr + (1 << offset_y);
 100234c:	e0fff717 	ldw	r3,-36(fp)
 1002350:	00800044 	movi	r2,1
 1002354:	10c4983a 	sll	r2,r2,r3
 1002358:	e0ffff17 	ldw	r3,-4(fp)
 100235c:	1887883a 	add	r3,r3,r2
 1002360:	e0ffff15 	stw	r3,-4(fp)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 1002364:	e13ff817 	ldw	r4,-32(fp)
 1002368:	21000044 	addi	r4,r4,1
 100236c:	e13ff815 	stw	r4,-32(fp)
 1002370:	e0bffa17 	ldw	r2,-24(fp)
 1002374:	e0fff817 	ldw	r3,-32(fp)
 1002378:	10ffef2e 	bgeu	r2,r3,1002338 <alt_up_pixel_buffer_dma_draw_vline+0x120>
 100237c:	00009706 	br	10025dc <alt_up_pixel_buffer_dma_draw_vline+0x3c4>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 1002380:	e0bff217 	ldw	r2,-56(fp)
 1002384:	10800e17 	ldw	r2,56(r2)
 1002388:	10800098 	cmpnei	r2,r2,2
 100238c:	1000181e 	bne	r2,zero,10023f0 <alt_up_pixel_buffer_dma_draw_vline+0x1d8>
			for (y = t_y; y <= b_y; y++)
 1002390:	e13ffb17 	ldw	r4,-20(fp)
 1002394:	e13ff815 	stw	r4,-32(fp)
 1002398:	00001106 	br	10023e0 <alt_up_pixel_buffer_dma_draw_vline+0x1c8>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
 100239c:	e0fffc17 	ldw	r3,-16(fp)
 10023a0:	e0fffc17 	ldw	r3,-16(fp)
 10023a4:	18c5883a 	add	r2,r3,r3
 10023a8:	1007883a 	mov	r3,r2
 10023ac:	e0bfff17 	ldw	r2,-4(fp)
 10023b0:	1885883a 	add	r2,r3,r2
 10023b4:	e0fff917 	ldw	r3,-28(fp)
 10023b8:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
 10023bc:	e0fff717 	ldw	r3,-36(fp)
 10023c0:	00800044 	movi	r2,1
 10023c4:	10c4983a 	sll	r2,r2,r3
 10023c8:	e13fff17 	ldw	r4,-4(fp)
 10023cc:	2089883a 	add	r4,r4,r2
 10023d0:	e13fff15 	stw	r4,-4(fp)
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 10023d4:	e0bff817 	ldw	r2,-32(fp)
 10023d8:	10800044 	addi	r2,r2,1
 10023dc:	e0bff815 	stw	r2,-32(fp)
 10023e0:	e0fffa17 	ldw	r3,-24(fp)
 10023e4:	e13ff817 	ldw	r4,-32(fp)
 10023e8:	193fec2e 	bgeu	r3,r4,100239c <alt_up_pixel_buffer_dma_draw_vline+0x184>
 10023ec:	00007b06 	br	10025dc <alt_up_pixel_buffer_dma_draw_vline+0x3c4>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 10023f0:	e0bffb17 	ldw	r2,-20(fp)
 10023f4:	e0bff815 	stw	r2,-32(fp)
 10023f8:	00001206 	br	1002444 <alt_up_pixel_buffer_dma_draw_vline+0x22c>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
 10023fc:	e0fffc17 	ldw	r3,-16(fp)
 1002400:	e0fffc17 	ldw	r3,-16(fp)
 1002404:	18c5883a 	add	r2,r3,r3
 1002408:	1085883a 	add	r2,r2,r2
 100240c:	1007883a 	mov	r3,r2
 1002410:	e0bfff17 	ldw	r2,-4(fp)
 1002414:	1885883a 	add	r2,r3,r2
 1002418:	e0fff917 	ldw	r3,-28(fp)
 100241c:	10c00035 	stwio	r3,0(r2)
				addr = addr + (1 << offset_y);
 1002420:	e0fff717 	ldw	r3,-36(fp)
 1002424:	00800044 	movi	r2,1
 1002428:	10c4983a 	sll	r2,r2,r3
 100242c:	e13fff17 	ldw	r4,-4(fp)
 1002430:	2089883a 	add	r4,r4,r2
 1002434:	e13fff15 	stw	r4,-4(fp)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 1002438:	e0bff817 	ldw	r2,-32(fp)
 100243c:	10800044 	addi	r2,r2,1
 1002440:	e0bff815 	stw	r2,-32(fp)
 1002444:	e0fffa17 	ldw	r3,-24(fp)
 1002448:	e13ff817 	ldw	r4,-32(fp)
 100244c:	193feb2e 	bgeu	r3,r4,10023fc <alt_up_pixel_buffer_dma_draw_vline+0x1e4>
 1002450:	00006206 	br	10025dc <alt_up_pixel_buffer_dma_draw_vline+0x3c4>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 1002454:	e0bff217 	ldw	r2,-56(fp)
 1002458:	10800e17 	ldw	r2,56(r2)
 100245c:	10800058 	cmpnei	r2,r2,1
 1002460:	1000191e 	bne	r2,zero,10024c8 <alt_up_pixel_buffer_dma_draw_vline+0x2b0>
			addr = addr + t_y * limit_x;
 1002464:	e13ffb17 	ldw	r4,-20(fp)
 1002468:	e17ffe17 	ldw	r5,-8(fp)
 100246c:	10041540 	call	1004154 <__mulsi3>
 1002470:	e0ffff17 	ldw	r3,-4(fp)
 1002474:	1887883a 	add	r3,r3,r2
 1002478:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
 100247c:	e13ffb17 	ldw	r4,-20(fp)
 1002480:	e13ff615 	stw	r4,-40(fp)
 1002484:	00000c06 	br	10024b8 <alt_up_pixel_buffer_dma_draw_vline+0x2a0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
 1002488:	e0ffff17 	ldw	r3,-4(fp)
 100248c:	e0bffc17 	ldw	r2,-16(fp)
 1002490:	1885883a 	add	r2,r3,r2
 1002494:	e0fff917 	ldw	r3,-28(fp)
 1002498:	10c00025 	stbio	r3,0(r2)
				addr = addr + limit_x;
 100249c:	e0bfff17 	ldw	r2,-4(fp)
 10024a0:	e0fffe17 	ldw	r3,-8(fp)
 10024a4:	10c5883a 	add	r2,r2,r3
 10024a8:	e0bfff15 	stw	r2,-4(fp)
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 10024ac:	e13ff617 	ldw	r4,-40(fp)
 10024b0:	21000044 	addi	r4,r4,1
 10024b4:	e13ff615 	stw	r4,-40(fp)
 10024b8:	e0bffa17 	ldw	r2,-24(fp)
 10024bc:	e0fff617 	ldw	r3,-40(fp)
 10024c0:	10fff12e 	bgeu	r2,r3,1002488 <alt_up_pixel_buffer_dma_draw_vline+0x270>
 10024c4:	00004506 	br	10025dc <alt_up_pixel_buffer_dma_draw_vline+0x3c4>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 10024c8:	e0bff217 	ldw	r2,-56(fp)
 10024cc:	10800e17 	ldw	r2,56(r2)
 10024d0:	10800098 	cmpnei	r2,r2,2
 10024d4:	1000201e 	bne	r2,zero,1002558 <alt_up_pixel_buffer_dma_draw_vline+0x340>
			limit_x = limit_x << 1;
 10024d8:	e13ffe17 	ldw	r4,-8(fp)
 10024dc:	e13ffe17 	ldw	r4,-8(fp)
 10024e0:	2105883a 	add	r2,r4,r4
 10024e4:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
 10024e8:	e13ffb17 	ldw	r4,-20(fp)
 10024ec:	e17ffe17 	ldw	r5,-8(fp)
 10024f0:	10041540 	call	1004154 <__mulsi3>
 10024f4:	e0ffff17 	ldw	r3,-4(fp)
 10024f8:	1887883a 	add	r3,r3,r2
 10024fc:	e0ffff15 	stw	r3,-4(fp)
			for (y = t_y; y <= b_y; y++)
 1002500:	e13ffb17 	ldw	r4,-20(fp)
 1002504:	e13ff615 	stw	r4,-40(fp)
 1002508:	00000f06 	br	1002548 <alt_up_pixel_buffer_dma_draw_vline+0x330>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
 100250c:	e0fffc17 	ldw	r3,-16(fp)
 1002510:	e0fffc17 	ldw	r3,-16(fp)
 1002514:	18c5883a 	add	r2,r3,r3
 1002518:	1007883a 	mov	r3,r2
 100251c:	e0bfff17 	ldw	r2,-4(fp)
 1002520:	1885883a 	add	r2,r3,r2
 1002524:	e0fff917 	ldw	r3,-28(fp)
 1002528:	10c0002d 	sthio	r3,0(r2)
				addr = addr + limit_x;
 100252c:	e13fff17 	ldw	r4,-4(fp)
 1002530:	e0bffe17 	ldw	r2,-8(fp)
 1002534:	2089883a 	add	r4,r4,r2
 1002538:	e13fff15 	stw	r4,-4(fp)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 100253c:	e0fff617 	ldw	r3,-40(fp)
 1002540:	18c00044 	addi	r3,r3,1
 1002544:	e0fff615 	stw	r3,-40(fp)
 1002548:	e13ffa17 	ldw	r4,-24(fp)
 100254c:	e0bff617 	ldw	r2,-40(fp)
 1002550:	20bfee2e 	bgeu	r4,r2,100250c <alt_up_pixel_buffer_dma_draw_vline+0x2f4>
 1002554:	00002106 	br	10025dc <alt_up_pixel_buffer_dma_draw_vline+0x3c4>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
 1002558:	e0fffe17 	ldw	r3,-8(fp)
 100255c:	e0fffe17 	ldw	r3,-8(fp)
 1002560:	18c5883a 	add	r2,r3,r3
 1002564:	1085883a 	add	r2,r2,r2
 1002568:	e0bffe15 	stw	r2,-8(fp)
			addr = addr + t_y * limit_x;
 100256c:	e13ffb17 	ldw	r4,-20(fp)
 1002570:	e17ffe17 	ldw	r5,-8(fp)
 1002574:	10041540 	call	1004154 <__mulsi3>
 1002578:	e13fff17 	ldw	r4,-4(fp)
 100257c:	2089883a 	add	r4,r4,r2
 1002580:	e13fff15 	stw	r4,-4(fp)
			for (y = t_y; y <= b_y; y++)
 1002584:	e0bffb17 	ldw	r2,-20(fp)
 1002588:	e0bff615 	stw	r2,-40(fp)
 100258c:	00001006 	br	10025d0 <alt_up_pixel_buffer_dma_draw_vline+0x3b8>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
 1002590:	e0fffc17 	ldw	r3,-16(fp)
 1002594:	e0fffc17 	ldw	r3,-16(fp)
 1002598:	18c5883a 	add	r2,r3,r3
 100259c:	1085883a 	add	r2,r2,r2
 10025a0:	1007883a 	mov	r3,r2
 10025a4:	e0bfff17 	ldw	r2,-4(fp)
 10025a8:	1885883a 	add	r2,r3,r2
 10025ac:	e0fff917 	ldw	r3,-28(fp)
 10025b0:	10c00035 	stwio	r3,0(r2)
				addr = addr + limit_x;
 10025b4:	e13fff17 	ldw	r4,-4(fp)
 10025b8:	e0bffe17 	ldw	r2,-8(fp)
 10025bc:	2089883a 	add	r4,r4,r2
 10025c0:	e13fff15 	stw	r4,-4(fp)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 10025c4:	e0fff617 	ldw	r3,-40(fp)
 10025c8:	18c00044 	addi	r3,r3,1
 10025cc:	e0fff615 	stw	r3,-40(fp)
 10025d0:	e13ffa17 	ldw	r4,-24(fp)
 10025d4:	e0bff617 	ldw	r2,-40(fp)
 10025d8:	20bfed2e 	bgeu	r4,r2,1002590 <alt_up_pixel_buffer_dma_draw_vline+0x378>
				IOWR_32DIRECT(addr, line_x << 2, local_color);
				addr = addr + limit_x;
			}
		}
	}
}
 10025dc:	e037883a 	mov	sp,fp
 10025e0:	dfc00117 	ldw	ra,4(sp)
 10025e4:	df000017 	ldw	fp,0(sp)
 10025e8:	dec00204 	addi	sp,sp,8
 10025ec:	f800283a 	ret

010025f0 <alt_up_pixel_buffer_dma_draw_rectangle>:

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
 10025f0:	defff804 	addi	sp,sp,-32
 10025f4:	dfc00715 	stw	ra,28(sp)
 10025f8:	df000615 	stw	fp,24(sp)
 10025fc:	df000604 	addi	fp,sp,24
 1002600:	e13ffc15 	stw	r4,-16(fp)
 1002604:	e17ffd15 	stw	r5,-12(fp)
 1002608:	e1bffe15 	stw	r6,-8(fp)
 100260c:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
 1002610:	e0800317 	ldw	r2,12(fp)
 1002614:	d8800015 	stw	r2,0(sp)
 1002618:	e0800417 	ldw	r2,16(fp)
 100261c:	d8800115 	stw	r2,4(sp)
 1002620:	e13ffc17 	ldw	r4,-16(fp)
 1002624:	e17ffd17 	ldw	r5,-12(fp)
 1002628:	e1bfff17 	ldw	r6,-4(fp)
 100262c:	e1fffe17 	ldw	r7,-8(fp)
 1002630:	1001ec00 	call	1001ec0 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
 1002634:	e0800317 	ldw	r2,12(fp)
 1002638:	d8800015 	stw	r2,0(sp)
 100263c:	e0800417 	ldw	r2,16(fp)
 1002640:	d8800115 	stw	r2,4(sp)
 1002644:	e13ffc17 	ldw	r4,-16(fp)
 1002648:	e17ffd17 	ldw	r5,-12(fp)
 100264c:	e1bfff17 	ldw	r6,-4(fp)
 1002650:	e1c00217 	ldw	r7,8(fp)
 1002654:	1001ec00 	call	1001ec0 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
 1002658:	e0800317 	ldw	r2,12(fp)
 100265c:	d8800015 	stw	r2,0(sp)
 1002660:	e0800417 	ldw	r2,16(fp)
 1002664:	d8800115 	stw	r2,4(sp)
 1002668:	e13ffc17 	ldw	r4,-16(fp)
 100266c:	e17ffd17 	ldw	r5,-12(fp)
 1002670:	e1bffe17 	ldw	r6,-8(fp)
 1002674:	e1c00217 	ldw	r7,8(fp)
 1002678:	10022180 	call	1002218 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
 100267c:	e0800317 	ldw	r2,12(fp)
 1002680:	d8800015 	stw	r2,0(sp)
 1002684:	e0800417 	ldw	r2,16(fp)
 1002688:	d8800115 	stw	r2,4(sp)
 100268c:	e13ffc17 	ldw	r4,-16(fp)
 1002690:	e17fff17 	ldw	r5,-4(fp)
 1002694:	e1bffe17 	ldw	r6,-8(fp)
 1002698:	e1c00217 	ldw	r7,8(fp)
 100269c:	10022180 	call	1002218 <alt_up_pixel_buffer_dma_draw_vline>
}
 10026a0:	e037883a 	mov	sp,fp
 10026a4:	dfc00117 	ldw	ra,4(sp)
 10026a8:	df000017 	ldw	fp,0(sp)
 10026ac:	dec00204 	addi	sp,sp,8
 10026b0:	f800283a 	ret

010026b4 <helper_plot_pixel>:

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
 10026b4:	defffa04 	addi	sp,sp,-24
 10026b8:	dfc00515 	stw	ra,20(sp)
 10026bc:	df000415 	stw	fp,16(sp)
 10026c0:	df000404 	addi	fp,sp,16
 10026c4:	e13ffc15 	stw	r4,-16(fp)
 10026c8:	e17ffd15 	stw	r5,-12(fp)
 10026cc:	e1bffe15 	stw	r6,-8(fp)
 10026d0:	e1ffff15 	stw	r7,-4(fp)
	if (mode == 0)
 10026d4:	e0c00317 	ldw	r3,12(fp)
 10026d8:	1804c03a 	cmpne	r2,r3,zero
 10026dc:	10000b1e 	bne	r2,zero,100270c <helper_plot_pixel+0x58>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
 10026e0:	e13ffd17 	ldw	r4,-12(fp)
 10026e4:	e17fff17 	ldw	r5,-4(fp)
 10026e8:	10041540 	call	1004154 <__mulsi3>
 10026ec:	e0fffe17 	ldw	r3,-8(fp)
 10026f0:	10c5883a 	add	r2,r2,r3
 10026f4:	1007883a 	mov	r3,r2
 10026f8:	e0bffc17 	ldw	r2,-16(fp)
 10026fc:	1885883a 	add	r2,r3,r2
 1002700:	e0c00217 	ldw	r3,8(fp)
 1002704:	10c00025 	stbio	r3,0(r2)
 1002708:	00001b06 	br	1002778 <helper_plot_pixel+0xc4>
	else if (mode == 1)
 100270c:	e0c00317 	ldw	r3,12(fp)
 1002710:	18800058 	cmpnei	r2,r3,1
 1002714:	10000c1e 	bne	r2,zero,1002748 <helper_plot_pixel+0x94>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
 1002718:	e13ffd17 	ldw	r4,-12(fp)
 100271c:	e17fff17 	ldw	r5,-4(fp)
 1002720:	10041540 	call	1004154 <__mulsi3>
 1002724:	e0fffe17 	ldw	r3,-8(fp)
 1002728:	10c5883a 	add	r2,r2,r3
 100272c:	1085883a 	add	r2,r2,r2
 1002730:	1007883a 	mov	r3,r2
 1002734:	e0bffc17 	ldw	r2,-16(fp)
 1002738:	1885883a 	add	r2,r3,r2
 100273c:	e0c00217 	ldw	r3,8(fp)
 1002740:	10c0002d 	sthio	r3,0(r2)
 1002744:	00000c06 	br	1002778 <helper_plot_pixel+0xc4>
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
 1002748:	e13ffd17 	ldw	r4,-12(fp)
 100274c:	e17fff17 	ldw	r5,-4(fp)
 1002750:	10041540 	call	1004154 <__mulsi3>
 1002754:	e0fffe17 	ldw	r3,-8(fp)
 1002758:	10c5883a 	add	r2,r2,r3
 100275c:	1085883a 	add	r2,r2,r2
 1002760:	1085883a 	add	r2,r2,r2
 1002764:	1007883a 	mov	r3,r2
 1002768:	e0bffc17 	ldw	r2,-16(fp)
 100276c:	1885883a 	add	r2,r3,r2
 1002770:	e0c00217 	ldw	r3,8(fp)
 1002774:	10c00035 	stwio	r3,0(r2)
}
 1002778:	e037883a 	mov	sp,fp
 100277c:	dfc00117 	ldw	ra,4(sp)
 1002780:	df000017 	ldw	fp,0(sp)
 1002784:	dec00204 	addi	sp,sp,8
 1002788:	f800283a 	ret

0100278c <alt_up_pixel_buffer_dma_draw_line>:

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
 100278c:	deffe404 	addi	sp,sp,-112
 1002790:	dfc01b15 	stw	ra,108(sp)
 1002794:	df001a15 	stw	fp,104(sp)
 1002798:	df001a04 	addi	fp,sp,104
 100279c:	e13fe815 	stw	r4,-96(fp)
 10027a0:	e17fe915 	stw	r5,-92(fp)
 10027a4:	e1bfea15 	stw	r6,-88(fp)
 10027a8:	e1ffeb15 	stw	r7,-84(fp)
	register int x_0 = x0;
 10027ac:	e0bfe917 	ldw	r2,-92(fp)
 10027b0:	e0bffa15 	stw	r2,-24(fp)
	register int y_0 = y0;
 10027b4:	e0ffea17 	ldw	r3,-88(fp)
 10027b8:	e0fff915 	stw	r3,-28(fp)
	register int x_1 = x1;
 10027bc:	e13feb17 	ldw	r4,-84(fp)
 10027c0:	e13ff815 	stw	r4,-32(fp)
	register int y_1 = y1;
 10027c4:	e0800217 	ldw	r2,8(fp)
 10027c8:	e0bff715 	stw	r2,-36(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
 10027cc:	e0fff717 	ldw	r3,-36(fp)
 10027d0:	e13ff917 	ldw	r4,-28(fp)
 10027d4:	1905c83a 	sub	r2,r3,r4
 10027d8:	e0bfff15 	stw	r2,-4(fp)
 10027dc:	e0ffff17 	ldw	r3,-4(fp)
 10027e0:	1804403a 	cmpge	r2,r3,zero
 10027e4:	1000031e 	bne	r2,zero,10027f4 <alt_up_pixel_buffer_dma_draw_line+0x68>
 10027e8:	e13fff17 	ldw	r4,-4(fp)
 10027ec:	0109c83a 	sub	r4,zero,r4
 10027f0:	e13fff15 	stw	r4,-4(fp)
 10027f4:	e0fff817 	ldw	r3,-32(fp)
 10027f8:	e13ffa17 	ldw	r4,-24(fp)
 10027fc:	1905c83a 	sub	r2,r3,r4
 1002800:	e0bffe15 	stw	r2,-8(fp)
 1002804:	e0fffe17 	ldw	r3,-8(fp)
 1002808:	1804403a 	cmpge	r2,r3,zero
 100280c:	1000031e 	bne	r2,zero,100281c <alt_up_pixel_buffer_dma_draw_line+0x90>
 1002810:	e13ffe17 	ldw	r4,-8(fp)
 1002814:	0109c83a 	sub	r4,zero,r4
 1002818:	e13ffe15 	stw	r4,-8(fp)
 100281c:	e0fffe17 	ldw	r3,-8(fp)
 1002820:	e13fff17 	ldw	r4,-4(fp)
 1002824:	1904803a 	cmplt	r2,r3,r4
 1002828:	e0bff605 	stb	r2,-40(fp)
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
 100282c:	e0bfe817 	ldw	r2,-96(fp)
 1002830:	10800e17 	ldw	r2,56(r2)
 1002834:	10800060 	cmpeqi	r2,r2,1
 1002838:	10000c1e 	bne	r2,zero,100286c <alt_up_pixel_buffer_dma_draw_line+0xe0>
 100283c:	e0bfe817 	ldw	r2,-96(fp)
 1002840:	10800e17 	ldw	r2,56(r2)
 1002844:	10800098 	cmpnei	r2,r2,2
 1002848:	1000031e 	bne	r2,zero,1002858 <alt_up_pixel_buffer_dma_draw_line+0xcc>
 100284c:	00800044 	movi	r2,1
 1002850:	e0bffc15 	stw	r2,-16(fp)
 1002854:	00000206 	br	1002860 <alt_up_pixel_buffer_dma_draw_line+0xd4>
 1002858:	00c00084 	movi	r3,2
 100285c:	e0fffc15 	stw	r3,-16(fp)
 1002860:	e13ffc17 	ldw	r4,-16(fp)
 1002864:	e13ffd15 	stw	r4,-12(fp)
 1002868:	00000106 	br	1002870 <alt_up_pixel_buffer_dma_draw_line+0xe4>
 100286c:	e03ffd15 	stw	zero,-12(fp)
 1002870:	e0bffd17 	ldw	r2,-12(fp)
 1002874:	e0bfef15 	stw	r2,-68(fp)
	register int line_color = color;
 1002878:	e0c00317 	ldw	r3,12(fp)
 100287c:	e0ffee15 	stw	r3,-72(fp)
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
 1002880:	e0bfe817 	ldw	r2,-96(fp)
 1002884:	10800d17 	ldw	r2,52(r2)
 1002888:	1004c03a 	cmpne	r2,r2,zero
 100288c:	1000091e 	bne	r2,zero,10028b4 <alt_up_pixel_buffer_dma_draw_line+0x128>
 1002890:	e0bfe817 	ldw	r2,-96(fp)
 1002894:	10c01317 	ldw	r3,76(r2)
 1002898:	e0bfef17 	ldw	r2,-68(fp)
 100289c:	1885c83a 	sub	r2,r3,r2
 10028a0:	1007883a 	mov	r3,r2
 10028a4:	00800044 	movi	r2,1
 10028a8:	10c4983a 	sll	r2,r2,r3
 10028ac:	e0bffb15 	stw	r2,-20(fp)
 10028b0:	00000306 	br	10028c0 <alt_up_pixel_buffer_dma_draw_line+0x134>
 10028b4:	e0bfe817 	ldw	r2,-96(fp)
 10028b8:	10800f17 	ldw	r2,60(r2)
 10028bc:	e0bffb15 	stw	r2,-20(fp)
 10028c0:	e13ffb17 	ldw	r4,-20(fp)
 10028c4:	e13fec15 	stw	r4,-80(fp)

	if (backbuffer == 1)
 10028c8:	e0800417 	ldw	r2,16(fp)
 10028cc:	10800058 	cmpnei	r2,r2,1
 10028d0:	1000041e 	bne	r2,zero,10028e4 <alt_up_pixel_buffer_dma_draw_line+0x158>
		buffer_start = pixel_buffer->back_buffer_start_address;
 10028d4:	e0bfe817 	ldw	r2,-96(fp)
 10028d8:	10800c17 	ldw	r2,48(r2)
 10028dc:	e0bfed15 	stw	r2,-76(fp)
 10028e0:	00000306 	br	10028f0 <alt_up_pixel_buffer_dma_draw_line+0x164>
	else
		buffer_start = pixel_buffer->buffer_start_address;
 10028e4:	e0bfe817 	ldw	r2,-96(fp)
 10028e8:	10800b17 	ldw	r2,44(r2)
 10028ec:	e0bfed15 	stw	r2,-76(fp)

	/* Preprocessing inputs */
	if (steep > 0) {
 10028f0:	e0fff603 	ldbu	r3,-40(fp)
 10028f4:	18803fcc 	andi	r2,r3,255
 10028f8:	1080201c 	xori	r2,r2,128
 10028fc:	10bfe004 	addi	r2,r2,-128
 1002900:	10800050 	cmplti	r2,r2,1
 1002904:	10000c1e 	bne	r2,zero,1002938 <alt_up_pixel_buffer_dma_draw_line+0x1ac>
		// Swap x_0 and y_0
		error = x_0;
 1002908:	e13ffa17 	ldw	r4,-24(fp)
 100290c:	e13ff315 	stw	r4,-52(fp)
		x_0 = y_0;
 1002910:	e0bff917 	ldw	r2,-28(fp)
 1002914:	e0bffa15 	stw	r2,-24(fp)
		y_0 = error;
 1002918:	e0fff317 	ldw	r3,-52(fp)
 100291c:	e0fff915 	stw	r3,-28(fp)
		// Swap x_1 and y_1
		error = x_1;
 1002920:	e13ff817 	ldw	r4,-32(fp)
 1002924:	e13ff315 	stw	r4,-52(fp)
		x_1 = y_1;
 1002928:	e0bff717 	ldw	r2,-36(fp)
 100292c:	e0bff815 	stw	r2,-32(fp)
		y_1 = error;
 1002930:	e0fff317 	ldw	r3,-52(fp)
 1002934:	e0fff715 	stw	r3,-36(fp)
	}
	if (x_0 > x_1) {
 1002938:	e13ff817 	ldw	r4,-32(fp)
 100293c:	e0bffa17 	ldw	r2,-24(fp)
 1002940:	20800c0e 	bge	r4,r2,1002974 <alt_up_pixel_buffer_dma_draw_line+0x1e8>
		// Swap x_0 and x_1
		error = x_0;
 1002944:	e0fffa17 	ldw	r3,-24(fp)
 1002948:	e0fff315 	stw	r3,-52(fp)
		x_0 = x_1;
 100294c:	e13ff817 	ldw	r4,-32(fp)
 1002950:	e13ffa15 	stw	r4,-24(fp)
		x_1 = error;
 1002954:	e0bff317 	ldw	r2,-52(fp)
 1002958:	e0bff815 	stw	r2,-32(fp)
		// Swap y_0 and y_1
		error = y_0;
 100295c:	e0fff917 	ldw	r3,-28(fp)
 1002960:	e0fff315 	stw	r3,-52(fp)
		y_0 = y_1;
 1002964:	e13ff717 	ldw	r4,-36(fp)
 1002968:	e13ff915 	stw	r4,-28(fp)
		y_1 = error;
 100296c:	e0bff317 	ldw	r2,-52(fp)
 1002970:	e0bff715 	stw	r2,-36(fp)
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
 1002974:	e0fff817 	ldw	r3,-32(fp)
 1002978:	e13ffa17 	ldw	r4,-24(fp)
 100297c:	1907c83a 	sub	r3,r3,r4
 1002980:	e0fff515 	stw	r3,-44(fp)
	deltay = ABS(y_1 - y_0);
 1002984:	e0fff717 	ldw	r3,-36(fp)
 1002988:	e13ff917 	ldw	r4,-28(fp)
 100298c:	1905c83a 	sub	r2,r3,r4
 1002990:	e0bff415 	stw	r2,-48(fp)
 1002994:	e0fff417 	ldw	r3,-48(fp)
 1002998:	1804403a 	cmpge	r2,r3,zero
 100299c:	1000031e 	bne	r2,zero,10029ac <alt_up_pixel_buffer_dma_draw_line+0x220>
 10029a0:	e13ff417 	ldw	r4,-48(fp)
 10029a4:	0109c83a 	sub	r4,zero,r4
 10029a8:	e13ff415 	stw	r4,-48(fp)
	error = -(deltax / 2); 
 10029ac:	e0fff517 	ldw	r3,-44(fp)
 10029b0:	1804d7fa 	srli	r2,r3,31
 10029b4:	e13ff517 	ldw	r4,-44(fp)
 10029b8:	1105883a 	add	r2,r2,r4
 10029bc:	1005d07a 	srai	r2,r2,1
 10029c0:	0085c83a 	sub	r2,zero,r2
 10029c4:	e0bff315 	stw	r2,-52(fp)
	y = y_0;
 10029c8:	e0bff917 	ldw	r2,-28(fp)
 10029cc:	e0bff015 	stw	r2,-64(fp)
	if (y_0 < y_1)
 10029d0:	e0fff917 	ldw	r3,-28(fp)
 10029d4:	e13ff717 	ldw	r4,-36(fp)
 10029d8:	1900030e 	bge	r3,r4,10029e8 <alt_up_pixel_buffer_dma_draw_line+0x25c>
		ystep = 1;
 10029dc:	00800044 	movi	r2,1
 10029e0:	e0bff215 	stw	r2,-56(fp)
 10029e4:	00000206 	br	10029f0 <alt_up_pixel_buffer_dma_draw_line+0x264>
	else
		ystep = -1;
 10029e8:	00ffffc4 	movi	r3,-1
 10029ec:	e0fff215 	stw	r3,-56(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
 10029f0:	e13ff603 	ldbu	r4,-40(fp)
 10029f4:	20803fcc 	andi	r2,r4,255
 10029f8:	1080201c 	xori	r2,r2,128
 10029fc:	10bfe004 	addi	r2,r2,-128
 1002a00:	10800058 	cmpnei	r2,r2,1
 1002a04:	1000221e 	bne	r2,zero,1002a90 <alt_up_pixel_buffer_dma_draw_line+0x304>
	{
		for (x=x_0; x <= x_1; x++) {
 1002a08:	e0bffa17 	ldw	r2,-24(fp)
 1002a0c:	e0bff115 	stw	r2,-60(fp)
 1002a10:	00001b06 	br	1002a80 <alt_up_pixel_buffer_dma_draw_line+0x2f4>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
 1002a14:	e0ffee17 	ldw	r3,-72(fp)
 1002a18:	d8c00015 	stw	r3,0(sp)
 1002a1c:	e13fef17 	ldw	r4,-68(fp)
 1002a20:	d9000115 	stw	r4,4(sp)
 1002a24:	e13fed17 	ldw	r4,-76(fp)
 1002a28:	e17fec17 	ldw	r5,-80(fp)
 1002a2c:	e1bff017 	ldw	r6,-64(fp)
 1002a30:	e1fff117 	ldw	r7,-60(fp)
 1002a34:	10026b40 	call	10026b4 <helper_plot_pixel>
			error = error + deltay;
 1002a38:	e0bff317 	ldw	r2,-52(fp)
 1002a3c:	e0fff417 	ldw	r3,-48(fp)
 1002a40:	10c5883a 	add	r2,r2,r3
 1002a44:	e0bff315 	stw	r2,-52(fp)
			if (error > 0) {
 1002a48:	e13ff317 	ldw	r4,-52(fp)
 1002a4c:	20800050 	cmplti	r2,r4,1
 1002a50:	1000081e 	bne	r2,zero,1002a74 <alt_up_pixel_buffer_dma_draw_line+0x2e8>
				y = y + ystep;
 1002a54:	e0bff017 	ldw	r2,-64(fp)
 1002a58:	e0fff217 	ldw	r3,-56(fp)
 1002a5c:	10c5883a 	add	r2,r2,r3
 1002a60:	e0bff015 	stw	r2,-64(fp)
				error = error - deltax;
 1002a64:	e13ff317 	ldw	r4,-52(fp)
 1002a68:	e0bff517 	ldw	r2,-44(fp)
 1002a6c:	2089c83a 	sub	r4,r4,r2
 1002a70:	e13ff315 	stw	r4,-52(fp)

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
 1002a74:	e0fff117 	ldw	r3,-60(fp)
 1002a78:	18c00044 	addi	r3,r3,1
 1002a7c:	e0fff115 	stw	r3,-60(fp)
 1002a80:	e13ff817 	ldw	r4,-32(fp)
 1002a84:	e0bff117 	ldw	r2,-60(fp)
 1002a88:	20bfe20e 	bge	r4,r2,1002a14 <alt_up_pixel_buffer_dma_draw_line+0x288>
 1002a8c:	00002106 	br	1002b14 <alt_up_pixel_buffer_dma_draw_line+0x388>
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
 1002a90:	e0fffa17 	ldw	r3,-24(fp)
 1002a94:	e0fff115 	stw	r3,-60(fp)
 1002a98:	00001b06 	br	1002b08 <alt_up_pixel_buffer_dma_draw_line+0x37c>
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
 1002a9c:	e13fee17 	ldw	r4,-72(fp)
 1002aa0:	d9000015 	stw	r4,0(sp)
 1002aa4:	e0bfef17 	ldw	r2,-68(fp)
 1002aa8:	d8800115 	stw	r2,4(sp)
 1002aac:	e13fed17 	ldw	r4,-76(fp)
 1002ab0:	e17fec17 	ldw	r5,-80(fp)
 1002ab4:	e1bff117 	ldw	r6,-60(fp)
 1002ab8:	e1fff017 	ldw	r7,-64(fp)
 1002abc:	10026b40 	call	10026b4 <helper_plot_pixel>
			error = error + deltay;
 1002ac0:	e0fff317 	ldw	r3,-52(fp)
 1002ac4:	e13ff417 	ldw	r4,-48(fp)
 1002ac8:	1907883a 	add	r3,r3,r4
 1002acc:	e0fff315 	stw	r3,-52(fp)
			if (error > 0) {
 1002ad0:	e0fff317 	ldw	r3,-52(fp)
 1002ad4:	18800050 	cmplti	r2,r3,1
 1002ad8:	1000081e 	bne	r2,zero,1002afc <alt_up_pixel_buffer_dma_draw_line+0x370>
				y = y + ystep;
 1002adc:	e13ff017 	ldw	r4,-64(fp)
 1002ae0:	e0bff217 	ldw	r2,-56(fp)
 1002ae4:	2089883a 	add	r4,r4,r2
 1002ae8:	e13ff015 	stw	r4,-64(fp)
				error = error - deltax;
 1002aec:	e0fff317 	ldw	r3,-52(fp)
 1002af0:	e13ff517 	ldw	r4,-44(fp)
 1002af4:	1907c83a 	sub	r3,r3,r4
 1002af8:	e0fff315 	stw	r3,-52(fp)
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
 1002afc:	e0bff117 	ldw	r2,-60(fp)
 1002b00:	10800044 	addi	r2,r2,1
 1002b04:	e0bff115 	stw	r2,-60(fp)
 1002b08:	e0fff817 	ldw	r3,-32(fp)
 1002b0c:	e13ff117 	ldw	r4,-60(fp)
 1002b10:	193fe20e 	bge	r3,r4,1002a9c <alt_up_pixel_buffer_dma_draw_line+0x310>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
 1002b14:	e037883a 	mov	sp,fp
 1002b18:	dfc00117 	ldw	ra,4(sp)
 1002b1c:	df000017 	ldw	fp,0(sp)
 1002b20:	dec00204 	addi	sp,sp,8
 1002b24:	f800283a 	ret

01002b28 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 1002b28:	defff404 	addi	sp,sp,-48
 1002b2c:	df000b15 	stw	fp,44(sp)
 1002b30:	df000b04 	addi	fp,sp,44
 1002b34:	e13ffb15 	stw	r4,-20(fp)
 1002b38:	e17ffc15 	stw	r5,-16(fp)
 1002b3c:	e1bffd15 	stw	r6,-12(fp)
 1002b40:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 1002b44:	e03ff915 	stw	zero,-28(fp)
 1002b48:	00804034 	movhi	r2,256
 1002b4c:	109c1404 	addi	r2,r2,28752
 1002b50:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 1002b54:	1005003a 	cmpeq	r2,r2,zero
 1002b58:	1000411e 	bne	r2,zero,1002c60 <alt_alarm_start+0x138>
  {
    if (alarm)
 1002b5c:	e0bffb17 	ldw	r2,-20(fp)
 1002b60:	1005003a 	cmpeq	r2,r2,zero
 1002b64:	10003b1e 	bne	r2,zero,1002c54 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 1002b68:	e0fffb17 	ldw	r3,-20(fp)
 1002b6c:	e0bffd17 	ldw	r2,-12(fp)
 1002b70:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 1002b74:	e0fffb17 	ldw	r3,-20(fp)
 1002b78:	e0bffe17 	ldw	r2,-8(fp)
 1002b7c:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1002b80:	0005303a 	rdctl	r2,status
 1002b84:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1002b88:	e0fff817 	ldw	r3,-32(fp)
 1002b8c:	00bfff84 	movi	r2,-2
 1002b90:	1884703a 	and	r2,r3,r2
 1002b94:	1001703a 	wrctl	status,r2
  
  return context;
 1002b98:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 1002b9c:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 1002ba0:	00804034 	movhi	r2,256
 1002ba4:	109c1504 	addi	r2,r2,28756
 1002ba8:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 1002bac:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 1002bb0:	e0fffc17 	ldw	r3,-16(fp)
 1002bb4:	e0bff917 	ldw	r2,-28(fp)
 1002bb8:	1885883a 	add	r2,r3,r2
 1002bbc:	10c00044 	addi	r3,r2,1
 1002bc0:	e0bffb17 	ldw	r2,-20(fp)
 1002bc4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 1002bc8:	e0bffb17 	ldw	r2,-20(fp)
 1002bcc:	10c00217 	ldw	r3,8(r2)
 1002bd0:	e0bff917 	ldw	r2,-28(fp)
 1002bd4:	1880042e 	bgeu	r3,r2,1002be8 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 1002bd8:	e0fffb17 	ldw	r3,-20(fp)
 1002bdc:	00800044 	movi	r2,1
 1002be0:	18800405 	stb	r2,16(r3)
 1002be4:	00000206 	br	1002bf0 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 1002be8:	e0bffb17 	ldw	r2,-20(fp)
 1002bec:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 1002bf0:	e0fffb17 	ldw	r3,-20(fp)
 1002bf4:	00804034 	movhi	r2,256
 1002bf8:	10965804 	addi	r2,r2,22880
 1002bfc:	e0bff615 	stw	r2,-40(fp)
 1002c00:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 1002c04:	e0fff717 	ldw	r3,-36(fp)
 1002c08:	e0bff617 	ldw	r2,-40(fp)
 1002c0c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 1002c10:	e0bff617 	ldw	r2,-40(fp)
 1002c14:	10c00017 	ldw	r3,0(r2)
 1002c18:	e0bff717 	ldw	r2,-36(fp)
 1002c1c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 1002c20:	e0bff617 	ldw	r2,-40(fp)
 1002c24:	10c00017 	ldw	r3,0(r2)
 1002c28:	e0bff717 	ldw	r2,-36(fp)
 1002c2c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 1002c30:	e0fff617 	ldw	r3,-40(fp)
 1002c34:	e0bff717 	ldw	r2,-36(fp)
 1002c38:	18800015 	stw	r2,0(r3)
 1002c3c:	e0bffa17 	ldw	r2,-24(fp)
 1002c40:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1002c44:	e0bff517 	ldw	r2,-44(fp)
 1002c48:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 1002c4c:	e03fff15 	stw	zero,-4(fp)
 1002c50:	00000506 	br	1002c68 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 1002c54:	00bffa84 	movi	r2,-22
 1002c58:	e0bfff15 	stw	r2,-4(fp)
 1002c5c:	00000206 	br	1002c68 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 1002c60:	00bfde84 	movi	r2,-134
 1002c64:	e0bfff15 	stw	r2,-4(fp)
 1002c68:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 1002c6c:	e037883a 	mov	sp,fp
 1002c70:	df000017 	ldw	fp,0(sp)
 1002c74:	dec00104 	addi	sp,sp,4
 1002c78:	f800283a 	ret

01002c7c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 1002c7c:	defff804 	addi	sp,sp,-32
 1002c80:	dfc00715 	stw	ra,28(sp)
 1002c84:	df000615 	stw	fp,24(sp)
 1002c88:	df000604 	addi	fp,sp,24
 1002c8c:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 1002c90:	e0bffc17 	ldw	r2,-16(fp)
 1002c94:	1004803a 	cmplt	r2,r2,zero
 1002c98:	1000091e 	bne	r2,zero,1002cc0 <close+0x44>
 1002c9c:	e13ffc17 	ldw	r4,-16(fp)
 1002ca0:	01400304 	movi	r5,12
 1002ca4:	10041540 	call	1004154 <__mulsi3>
 1002ca8:	1007883a 	mov	r3,r2
 1002cac:	00804034 	movhi	r2,256
 1002cb0:	1094f104 	addi	r2,r2,21444
 1002cb4:	1887883a 	add	r3,r3,r2
 1002cb8:	e0ffff15 	stw	r3,-4(fp)
 1002cbc:	00000106 	br	1002cc4 <close+0x48>
 1002cc0:	e03fff15 	stw	zero,-4(fp)
 1002cc4:	e0bfff17 	ldw	r2,-4(fp)
 1002cc8:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 1002ccc:	e0bffb17 	ldw	r2,-20(fp)
 1002cd0:	1005003a 	cmpeq	r2,r2,zero
 1002cd4:	10001d1e 	bne	r2,zero,1002d4c <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 1002cd8:	e0bffb17 	ldw	r2,-20(fp)
 1002cdc:	10800017 	ldw	r2,0(r2)
 1002ce0:	10800417 	ldw	r2,16(r2)
 1002ce4:	1005003a 	cmpeq	r2,r2,zero
 1002ce8:	1000071e 	bne	r2,zero,1002d08 <close+0x8c>
 1002cec:	e0bffb17 	ldw	r2,-20(fp)
 1002cf0:	10800017 	ldw	r2,0(r2)
 1002cf4:	10800417 	ldw	r2,16(r2)
 1002cf8:	e13ffb17 	ldw	r4,-20(fp)
 1002cfc:	103ee83a 	callr	r2
 1002d00:	e0bffe15 	stw	r2,-8(fp)
 1002d04:	00000106 	br	1002d0c <close+0x90>
 1002d08:	e03ffe15 	stw	zero,-8(fp)
 1002d0c:	e0bffe17 	ldw	r2,-8(fp)
 1002d10:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 1002d14:	e13ffc17 	ldw	r4,-16(fp)
 1002d18:	10037b00 	call	10037b0 <alt_release_fd>
    if (rval < 0)
 1002d1c:	e0bffa17 	ldw	r2,-24(fp)
 1002d20:	1004403a 	cmpge	r2,r2,zero
 1002d24:	1000071e 	bne	r2,zero,1002d44 <close+0xc8>
    {
      ALT_ERRNO = -rval;
 1002d28:	1002d7c0 	call	1002d7c <alt_get_errno>
 1002d2c:	e0fffa17 	ldw	r3,-24(fp)
 1002d30:	00c7c83a 	sub	r3,zero,r3
 1002d34:	10c00015 	stw	r3,0(r2)
      return -1;
 1002d38:	00bfffc4 	movi	r2,-1
 1002d3c:	e0bffd15 	stw	r2,-12(fp)
 1002d40:	00000806 	br	1002d64 <close+0xe8>
    }
    return 0;
 1002d44:	e03ffd15 	stw	zero,-12(fp)
 1002d48:	00000606 	br	1002d64 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1002d4c:	1002d7c0 	call	1002d7c <alt_get_errno>
 1002d50:	1007883a 	mov	r3,r2
 1002d54:	00801444 	movi	r2,81
 1002d58:	18800015 	stw	r2,0(r3)
    return -1;
 1002d5c:	00bfffc4 	movi	r2,-1
 1002d60:	e0bffd15 	stw	r2,-12(fp)
 1002d64:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 1002d68:	e037883a 	mov	sp,fp
 1002d6c:	dfc00117 	ldw	ra,4(sp)
 1002d70:	df000017 	ldw	fp,0(sp)
 1002d74:	dec00204 	addi	sp,sp,8
 1002d78:	f800283a 	ret

01002d7c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1002d7c:	defffd04 	addi	sp,sp,-12
 1002d80:	dfc00215 	stw	ra,8(sp)
 1002d84:	df000115 	stw	fp,4(sp)
 1002d88:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1002d8c:	00804034 	movhi	r2,256
 1002d90:	10965604 	addi	r2,r2,22872
 1002d94:	10800017 	ldw	r2,0(r2)
 1002d98:	1005003a 	cmpeq	r2,r2,zero
 1002d9c:	1000061e 	bne	r2,zero,1002db8 <alt_get_errno+0x3c>
 1002da0:	00804034 	movhi	r2,256
 1002da4:	10965604 	addi	r2,r2,22872
 1002da8:	10800017 	ldw	r2,0(r2)
 1002dac:	103ee83a 	callr	r2
 1002db0:	e0bfff15 	stw	r2,-4(fp)
 1002db4:	00000306 	br	1002dc4 <alt_get_errno+0x48>
 1002db8:	00804034 	movhi	r2,256
 1002dbc:	109c1604 	addi	r2,r2,28760
 1002dc0:	e0bfff15 	stw	r2,-4(fp)
 1002dc4:	e0bfff17 	ldw	r2,-4(fp)
}
 1002dc8:	e037883a 	mov	sp,fp
 1002dcc:	dfc00117 	ldw	ra,4(sp)
 1002dd0:	df000017 	ldw	fp,0(sp)
 1002dd4:	dec00204 	addi	sp,sp,8
 1002dd8:	f800283a 	ret

01002ddc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 1002ddc:	deffff04 	addi	sp,sp,-4
 1002de0:	df000015 	stw	fp,0(sp)
 1002de4:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 1002de8:	e037883a 	mov	sp,fp
 1002dec:	df000017 	ldw	fp,0(sp)
 1002df0:	dec00104 	addi	sp,sp,4
 1002df4:	f800283a 	ret

01002df8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 1002df8:	defffc04 	addi	sp,sp,-16
 1002dfc:	df000315 	stw	fp,12(sp)
 1002e00:	df000304 	addi	fp,sp,12
 1002e04:	e13ffd15 	stw	r4,-12(fp)
 1002e08:	e17ffe15 	stw	r5,-8(fp)
 1002e0c:	e1bfff15 	stw	r6,-4(fp)
  return len;
 1002e10:	e0bfff17 	ldw	r2,-4(fp)
}
 1002e14:	e037883a 	mov	sp,fp
 1002e18:	df000017 	ldw	fp,0(sp)
 1002e1c:	dec00104 	addi	sp,sp,4
 1002e20:	f800283a 	ret

01002e24 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 1002e24:	defff904 	addi	sp,sp,-28
 1002e28:	dfc00615 	stw	ra,24(sp)
 1002e2c:	df000515 	stw	fp,20(sp)
 1002e30:	df000504 	addi	fp,sp,20
 1002e34:	e13ffd15 	stw	r4,-12(fp)
 1002e38:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 1002e3c:	e0bffd17 	ldw	r2,-12(fp)
 1002e40:	1005003a 	cmpeq	r2,r2,zero
 1002e44:	1000041e 	bne	r2,zero,1002e58 <alt_dev_llist_insert+0x34>
 1002e48:	e0bffd17 	ldw	r2,-12(fp)
 1002e4c:	10800217 	ldw	r2,8(r2)
 1002e50:	1004c03a 	cmpne	r2,r2,zero
 1002e54:	1000071e 	bne	r2,zero,1002e74 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 1002e58:	1002ed80 	call	1002ed8 <alt_get_errno>
 1002e5c:	1007883a 	mov	r3,r2
 1002e60:	00800584 	movi	r2,22
 1002e64:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 1002e68:	00bffa84 	movi	r2,-22
 1002e6c:	e0bfff15 	stw	r2,-4(fp)
 1002e70:	00001306 	br	1002ec0 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 1002e74:	e0fffd17 	ldw	r3,-12(fp)
 1002e78:	e0bffe17 	ldw	r2,-8(fp)
 1002e7c:	e0bffb15 	stw	r2,-20(fp)
 1002e80:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 1002e84:	e0fffc17 	ldw	r3,-16(fp)
 1002e88:	e0bffb17 	ldw	r2,-20(fp)
 1002e8c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 1002e90:	e0bffb17 	ldw	r2,-20(fp)
 1002e94:	10c00017 	ldw	r3,0(r2)
 1002e98:	e0bffc17 	ldw	r2,-16(fp)
 1002e9c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 1002ea0:	e0bffb17 	ldw	r2,-20(fp)
 1002ea4:	10c00017 	ldw	r3,0(r2)
 1002ea8:	e0bffc17 	ldw	r2,-16(fp)
 1002eac:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 1002eb0:	e0fffb17 	ldw	r3,-20(fp)
 1002eb4:	e0bffc17 	ldw	r2,-16(fp)
 1002eb8:	18800015 	stw	r2,0(r3)

  return 0;  
 1002ebc:	e03fff15 	stw	zero,-4(fp)
 1002ec0:	e0bfff17 	ldw	r2,-4(fp)
}
 1002ec4:	e037883a 	mov	sp,fp
 1002ec8:	dfc00117 	ldw	ra,4(sp)
 1002ecc:	df000017 	ldw	fp,0(sp)
 1002ed0:	dec00204 	addi	sp,sp,8
 1002ed4:	f800283a 	ret

01002ed8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1002ed8:	defffd04 	addi	sp,sp,-12
 1002edc:	dfc00215 	stw	ra,8(sp)
 1002ee0:	df000115 	stw	fp,4(sp)
 1002ee4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1002ee8:	00804034 	movhi	r2,256
 1002eec:	10965604 	addi	r2,r2,22872
 1002ef0:	10800017 	ldw	r2,0(r2)
 1002ef4:	1005003a 	cmpeq	r2,r2,zero
 1002ef8:	1000061e 	bne	r2,zero,1002f14 <alt_get_errno+0x3c>
 1002efc:	00804034 	movhi	r2,256
 1002f00:	10965604 	addi	r2,r2,22872
 1002f04:	10800017 	ldw	r2,0(r2)
 1002f08:	103ee83a 	callr	r2
 1002f0c:	e0bfff15 	stw	r2,-4(fp)
 1002f10:	00000306 	br	1002f20 <alt_get_errno+0x48>
 1002f14:	00804034 	movhi	r2,256
 1002f18:	109c1604 	addi	r2,r2,28760
 1002f1c:	e0bfff15 	stw	r2,-4(fp)
 1002f20:	e0bfff17 	ldw	r2,-4(fp)
}
 1002f24:	e037883a 	mov	sp,fp
 1002f28:	dfc00117 	ldw	ra,4(sp)
 1002f2c:	df000017 	ldw	fp,0(sp)
 1002f30:	dec00204 	addi	sp,sp,8
 1002f34:	f800283a 	ret

01002f38 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 1002f38:	defffd04 	addi	sp,sp,-12
 1002f3c:	dfc00215 	stw	ra,8(sp)
 1002f40:	df000115 	stw	fp,4(sp)
 1002f44:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 1002f48:	00bfff04 	movi	r2,-4
 1002f4c:	00c04034 	movhi	r3,256
 1002f50:	18d07c04 	addi	r3,r3,16880
 1002f54:	1885883a 	add	r2,r3,r2
 1002f58:	e0bfff15 	stw	r2,-4(fp)
 1002f5c:	00000606 	br	1002f78 <_do_ctors+0x40>
        (*ctor) (); 
 1002f60:	e0bfff17 	ldw	r2,-4(fp)
 1002f64:	10800017 	ldw	r2,0(r2)
 1002f68:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 1002f6c:	e0bfff17 	ldw	r2,-4(fp)
 1002f70:	10bfff04 	addi	r2,r2,-4
 1002f74:	e0bfff15 	stw	r2,-4(fp)
 1002f78:	e0ffff17 	ldw	r3,-4(fp)
 1002f7c:	00804034 	movhi	r2,256
 1002f80:	10907b04 	addi	r2,r2,16876
 1002f84:	18bff62e 	bgeu	r3,r2,1002f60 <_do_ctors+0x28>
        (*ctor) (); 
}
 1002f88:	e037883a 	mov	sp,fp
 1002f8c:	dfc00117 	ldw	ra,4(sp)
 1002f90:	df000017 	ldw	fp,0(sp)
 1002f94:	dec00204 	addi	sp,sp,8
 1002f98:	f800283a 	ret

01002f9c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 1002f9c:	defffd04 	addi	sp,sp,-12
 1002fa0:	dfc00215 	stw	ra,8(sp)
 1002fa4:	df000115 	stw	fp,4(sp)
 1002fa8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 1002fac:	00bfff04 	movi	r2,-4
 1002fb0:	00c04034 	movhi	r3,256
 1002fb4:	18d07c04 	addi	r3,r3,16880
 1002fb8:	1885883a 	add	r2,r3,r2
 1002fbc:	e0bfff15 	stw	r2,-4(fp)
 1002fc0:	00000606 	br	1002fdc <_do_dtors+0x40>
        (*dtor) (); 
 1002fc4:	e0bfff17 	ldw	r2,-4(fp)
 1002fc8:	10800017 	ldw	r2,0(r2)
 1002fcc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 1002fd0:	e0bfff17 	ldw	r2,-4(fp)
 1002fd4:	10bfff04 	addi	r2,r2,-4
 1002fd8:	e0bfff15 	stw	r2,-4(fp)
 1002fdc:	e0ffff17 	ldw	r3,-4(fp)
 1002fe0:	00804034 	movhi	r2,256
 1002fe4:	10907c04 	addi	r2,r2,16880
 1002fe8:	18bff62e 	bgeu	r3,r2,1002fc4 <_do_dtors+0x28>
        (*dtor) (); 
}
 1002fec:	e037883a 	mov	sp,fp
 1002ff0:	dfc00117 	ldw	ra,4(sp)
 1002ff4:	df000017 	ldw	fp,0(sp)
 1002ff8:	dec00204 	addi	sp,sp,8
 1002ffc:	f800283a 	ret

01003000 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 1003000:	defff904 	addi	sp,sp,-28
 1003004:	dfc00615 	stw	ra,24(sp)
 1003008:	df000515 	stw	fp,20(sp)
 100300c:	df000504 	addi	fp,sp,20
 1003010:	e13ffd15 	stw	r4,-12(fp)
 1003014:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 1003018:	e0bffe17 	ldw	r2,-8(fp)
 100301c:	10800017 	ldw	r2,0(r2)
 1003020:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 1003024:	e13ffd17 	ldw	r4,-12(fp)
 1003028:	1003df80 	call	1003df8 <strlen>
 100302c:	10800044 	addi	r2,r2,1
 1003030:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 1003034:	00000d06 	br	100306c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 1003038:	e0bffc17 	ldw	r2,-16(fp)
 100303c:	11000217 	ldw	r4,8(r2)
 1003040:	e1bffb17 	ldw	r6,-20(fp)
 1003044:	e17ffd17 	ldw	r5,-12(fp)
 1003048:	1003c280 	call	1003c28 <memcmp>
 100304c:	1004c03a 	cmpne	r2,r2,zero
 1003050:	1000031e 	bne	r2,zero,1003060 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 1003054:	e0bffc17 	ldw	r2,-16(fp)
 1003058:	e0bfff15 	stw	r2,-4(fp)
 100305c:	00000706 	br	100307c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 1003060:	e0bffc17 	ldw	r2,-16(fp)
 1003064:	10800017 	ldw	r2,0(r2)
 1003068:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 100306c:	e0fffe17 	ldw	r3,-8(fp)
 1003070:	e0bffc17 	ldw	r2,-16(fp)
 1003074:	10fff01e 	bne	r2,r3,1003038 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 1003078:	e03fff15 	stw	zero,-4(fp)
 100307c:	e0bfff17 	ldw	r2,-4(fp)
}
 1003080:	e037883a 	mov	sp,fp
 1003084:	dfc00117 	ldw	ra,4(sp)
 1003088:	df000017 	ldw	fp,0(sp)
 100308c:	dec00204 	addi	sp,sp,8
 1003090:	f800283a 	ret

01003094 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 1003094:	deffff04 	addi	sp,sp,-4
 1003098:	df000015 	stw	fp,0(sp)
 100309c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 10030a0:	e037883a 	mov	sp,fp
 10030a4:	df000017 	ldw	fp,0(sp)
 10030a8:	dec00104 	addi	sp,sp,4
 10030ac:	f800283a 	ret

010030b0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 10030b0:	defff904 	addi	sp,sp,-28
 10030b4:	dfc00615 	stw	ra,24(sp)
 10030b8:	df000515 	stw	fp,20(sp)
 10030bc:	df000504 	addi	fp,sp,20
 10030c0:	e13ffc15 	stw	r4,-16(fp)
 10030c4:	e17ffd15 	stw	r5,-12(fp)
 10030c8:	e1bffe15 	stw	r6,-8(fp)
 10030cc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 10030d0:	e0800217 	ldw	r2,8(fp)
 10030d4:	d8800015 	stw	r2,0(sp)
 10030d8:	e13ffc17 	ldw	r4,-16(fp)
 10030dc:	e17ffd17 	ldw	r5,-12(fp)
 10030e0:	e1bffe17 	ldw	r6,-8(fp)
 10030e4:	e1ffff17 	ldw	r7,-4(fp)
 10030e8:	10032840 	call	1003284 <alt_iic_isr_register>
}  
 10030ec:	e037883a 	mov	sp,fp
 10030f0:	dfc00117 	ldw	ra,4(sp)
 10030f4:	df000017 	ldw	fp,0(sp)
 10030f8:	dec00204 	addi	sp,sp,8
 10030fc:	f800283a 	ret

01003100 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 1003100:	defff904 	addi	sp,sp,-28
 1003104:	df000615 	stw	fp,24(sp)
 1003108:	df000604 	addi	fp,sp,24
 100310c:	e13ffe15 	stw	r4,-8(fp)
 1003110:	e17fff15 	stw	r5,-4(fp)
 1003114:	e0bfff17 	ldw	r2,-4(fp)
 1003118:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100311c:	0005303a 	rdctl	r2,status
 1003120:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1003124:	e0fffb17 	ldw	r3,-20(fp)
 1003128:	00bfff84 	movi	r2,-2
 100312c:	1884703a 	and	r2,r3,r2
 1003130:	1001703a 	wrctl	status,r2
  
  return context;
 1003134:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1003138:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 100313c:	e0fffc17 	ldw	r3,-16(fp)
 1003140:	00800044 	movi	r2,1
 1003144:	10c4983a 	sll	r2,r2,r3
 1003148:	1007883a 	mov	r3,r2
 100314c:	00804034 	movhi	r2,256
 1003150:	109c1304 	addi	r2,r2,28748
 1003154:	10800017 	ldw	r2,0(r2)
 1003158:	1886b03a 	or	r3,r3,r2
 100315c:	00804034 	movhi	r2,256
 1003160:	109c1304 	addi	r2,r2,28748
 1003164:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 1003168:	00804034 	movhi	r2,256
 100316c:	109c1304 	addi	r2,r2,28748
 1003170:	10800017 	ldw	r2,0(r2)
 1003174:	100170fa 	wrctl	ienable,r2
 1003178:	e0bffd17 	ldw	r2,-12(fp)
 100317c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1003180:	e0bffa17 	ldw	r2,-24(fp)
 1003184:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 1003188:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 100318c:	e037883a 	mov	sp,fp
 1003190:	df000017 	ldw	fp,0(sp)
 1003194:	dec00104 	addi	sp,sp,4
 1003198:	f800283a 	ret

0100319c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 100319c:	defff904 	addi	sp,sp,-28
 10031a0:	df000615 	stw	fp,24(sp)
 10031a4:	df000604 	addi	fp,sp,24
 10031a8:	e13ffe15 	stw	r4,-8(fp)
 10031ac:	e17fff15 	stw	r5,-4(fp)
 10031b0:	e0bfff17 	ldw	r2,-4(fp)
 10031b4:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10031b8:	0005303a 	rdctl	r2,status
 10031bc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10031c0:	e0fffb17 	ldw	r3,-20(fp)
 10031c4:	00bfff84 	movi	r2,-2
 10031c8:	1884703a 	and	r2,r3,r2
 10031cc:	1001703a 	wrctl	status,r2
  
  return context;
 10031d0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 10031d4:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
 10031d8:	e0fffc17 	ldw	r3,-16(fp)
 10031dc:	00800044 	movi	r2,1
 10031e0:	10c4983a 	sll	r2,r2,r3
 10031e4:	0084303a 	nor	r2,zero,r2
 10031e8:	1007883a 	mov	r3,r2
 10031ec:	00804034 	movhi	r2,256
 10031f0:	109c1304 	addi	r2,r2,28748
 10031f4:	10800017 	ldw	r2,0(r2)
 10031f8:	1886703a 	and	r3,r3,r2
 10031fc:	00804034 	movhi	r2,256
 1003200:	109c1304 	addi	r2,r2,28748
 1003204:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 1003208:	00804034 	movhi	r2,256
 100320c:	109c1304 	addi	r2,r2,28748
 1003210:	10800017 	ldw	r2,0(r2)
 1003214:	100170fa 	wrctl	ienable,r2
 1003218:	e0bffd17 	ldw	r2,-12(fp)
 100321c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1003220:	e0bffa17 	ldw	r2,-24(fp)
 1003224:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 1003228:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 100322c:	e037883a 	mov	sp,fp
 1003230:	df000017 	ldw	fp,0(sp)
 1003234:	dec00104 	addi	sp,sp,4
 1003238:	f800283a 	ret

0100323c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 100323c:	defffc04 	addi	sp,sp,-16
 1003240:	df000315 	stw	fp,12(sp)
 1003244:	df000304 	addi	fp,sp,12
 1003248:	e13ffe15 	stw	r4,-8(fp)
 100324c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 1003250:	000530fa 	rdctl	r2,ienable
 1003254:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 1003258:	e0ffff17 	ldw	r3,-4(fp)
 100325c:	00800044 	movi	r2,1
 1003260:	10c4983a 	sll	r2,r2,r3
 1003264:	1007883a 	mov	r3,r2
 1003268:	e0bffd17 	ldw	r2,-12(fp)
 100326c:	1884703a 	and	r2,r3,r2
 1003270:	1004c03a 	cmpne	r2,r2,zero
}
 1003274:	e037883a 	mov	sp,fp
 1003278:	df000017 	ldw	fp,0(sp)
 100327c:	dec00104 	addi	sp,sp,4
 1003280:	f800283a 	ret

01003284 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 1003284:	defff404 	addi	sp,sp,-48
 1003288:	dfc00b15 	stw	ra,44(sp)
 100328c:	df000a15 	stw	fp,40(sp)
 1003290:	df000a04 	addi	fp,sp,40
 1003294:	e13ffb15 	stw	r4,-20(fp)
 1003298:	e17ffc15 	stw	r5,-16(fp)
 100329c:	e1bffd15 	stw	r6,-12(fp)
 10032a0:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
 10032a4:	00bffa84 	movi	r2,-22
 10032a8:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 10032ac:	e0bffc17 	ldw	r2,-16(fp)
 10032b0:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 10032b4:	e0bff917 	ldw	r2,-28(fp)
 10032b8:	10800808 	cmpgei	r2,r2,32
 10032bc:	1000291e 	bne	r2,zero,1003364 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10032c0:	0005303a 	rdctl	r2,status
 10032c4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10032c8:	e0fff717 	ldw	r3,-36(fp)
 10032cc:	00bfff84 	movi	r2,-2
 10032d0:	1884703a 	and	r2,r3,r2
 10032d4:	1001703a 	wrctl	status,r2
  
  return context;
 10032d8:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 10032dc:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
 10032e0:	e0bff917 	ldw	r2,-28(fp)
 10032e4:	00c04034 	movhi	r3,256
 10032e8:	18dc1704 	addi	r3,r3,28764
 10032ec:	100490fa 	slli	r2,r2,3
 10032f0:	10c7883a 	add	r3,r2,r3
 10032f4:	e0bffd17 	ldw	r2,-12(fp)
 10032f8:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
 10032fc:	e0bff917 	ldw	r2,-28(fp)
 1003300:	00c04034 	movhi	r3,256
 1003304:	18dc1704 	addi	r3,r3,28764
 1003308:	100490fa 	slli	r2,r2,3
 100330c:	10c5883a 	add	r2,r2,r3
 1003310:	10c00104 	addi	r3,r2,4
 1003314:	e0bffe17 	ldw	r2,-8(fp)
 1003318:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 100331c:	e0bffd17 	ldw	r2,-12(fp)
 1003320:	1005003a 	cmpeq	r2,r2,zero
 1003324:	1000051e 	bne	r2,zero,100333c <alt_iic_isr_register+0xb8>
 1003328:	e17ff917 	ldw	r5,-28(fp)
 100332c:	e13ffb17 	ldw	r4,-20(fp)
 1003330:	10031000 	call	1003100 <alt_ic_irq_enable>
 1003334:	e0bfff15 	stw	r2,-4(fp)
 1003338:	00000406 	br	100334c <alt_iic_isr_register+0xc8>
 100333c:	e17ff917 	ldw	r5,-28(fp)
 1003340:	e13ffb17 	ldw	r4,-20(fp)
 1003344:	100319c0 	call	100319c <alt_ic_irq_disable>
 1003348:	e0bfff15 	stw	r2,-4(fp)
 100334c:	e0bfff17 	ldw	r2,-4(fp)
 1003350:	e0bffa15 	stw	r2,-24(fp)
 1003354:	e0bff817 	ldw	r2,-32(fp)
 1003358:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100335c:	e0bff617 	ldw	r2,-40(fp)
 1003360:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 1003364:	e0bffa17 	ldw	r2,-24(fp)
}
 1003368:	e037883a 	mov	sp,fp
 100336c:	dfc00117 	ldw	ra,4(sp)
 1003370:	df000017 	ldw	fp,0(sp)
 1003374:	dec00204 	addi	sp,sp,8
 1003378:	f800283a 	ret

0100337c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 100337c:	defff804 	addi	sp,sp,-32
 1003380:	dfc00715 	stw	ra,28(sp)
 1003384:	df000615 	stw	fp,24(sp)
 1003388:	dc000515 	stw	r16,20(sp)
 100338c:	df000504 	addi	fp,sp,20
 1003390:	e13ffc15 	stw	r4,-16(fp)
 1003394:	e17ffd15 	stw	r5,-12(fp)
 1003398:	e1bffe15 	stw	r6,-8(fp)
 100339c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 10033a0:	e13ffd17 	ldw	r4,-12(fp)
 10033a4:	e17ffe17 	ldw	r5,-8(fp)
 10033a8:	e1bfff17 	ldw	r6,-4(fp)
 10033ac:	10035c40 	call	10035c4 <open>
 10033b0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 10033b4:	e0bffb17 	ldw	r2,-20(fp)
 10033b8:	1004803a 	cmplt	r2,r2,zero
 10033bc:	10001f1e 	bne	r2,zero,100343c <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
 10033c0:	e13ffb17 	ldw	r4,-20(fp)
 10033c4:	04004034 	movhi	r16,256
 10033c8:	8414f104 	addi	r16,r16,21444
 10033cc:	01400304 	movi	r5,12
 10033d0:	10041540 	call	1004154 <__mulsi3>
 10033d4:	1405883a 	add	r2,r2,r16
 10033d8:	10c00017 	ldw	r3,0(r2)
 10033dc:	e0bffc17 	ldw	r2,-16(fp)
 10033e0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 10033e4:	e13ffb17 	ldw	r4,-20(fp)
 10033e8:	04004034 	movhi	r16,256
 10033ec:	8414f104 	addi	r16,r16,21444
 10033f0:	01400304 	movi	r5,12
 10033f4:	10041540 	call	1004154 <__mulsi3>
 10033f8:	1405883a 	add	r2,r2,r16
 10033fc:	10800104 	addi	r2,r2,4
 1003400:	10c00017 	ldw	r3,0(r2)
 1003404:	e0bffc17 	ldw	r2,-16(fp)
 1003408:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 100340c:	e13ffb17 	ldw	r4,-20(fp)
 1003410:	04004034 	movhi	r16,256
 1003414:	8414f104 	addi	r16,r16,21444
 1003418:	01400304 	movi	r5,12
 100341c:	10041540 	call	1004154 <__mulsi3>
 1003420:	1405883a 	add	r2,r2,r16
 1003424:	10800204 	addi	r2,r2,8
 1003428:	10c00017 	ldw	r3,0(r2)
 100342c:	e0bffc17 	ldw	r2,-16(fp)
 1003430:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 1003434:	e13ffb17 	ldw	r4,-20(fp)
 1003438:	10037b00 	call	10037b0 <alt_release_fd>
  }
} 
 100343c:	e037883a 	mov	sp,fp
 1003440:	dfc00217 	ldw	ra,8(sp)
 1003444:	df000117 	ldw	fp,4(sp)
 1003448:	dc000017 	ldw	r16,0(sp)
 100344c:	dec00304 	addi	sp,sp,12
 1003450:	f800283a 	ret

01003454 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 1003454:	defffb04 	addi	sp,sp,-20
 1003458:	dfc00415 	stw	ra,16(sp)
 100345c:	df000315 	stw	fp,12(sp)
 1003460:	df000304 	addi	fp,sp,12
 1003464:	e13ffd15 	stw	r4,-12(fp)
 1003468:	e17ffe15 	stw	r5,-8(fp)
 100346c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 1003470:	01004034 	movhi	r4,256
 1003474:	2114f404 	addi	r4,r4,21456
 1003478:	e17ffd17 	ldw	r5,-12(fp)
 100347c:	01800044 	movi	r6,1
 1003480:	01c07fc4 	movi	r7,511
 1003484:	100337c0 	call	100337c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 1003488:	01004034 	movhi	r4,256
 100348c:	2114f104 	addi	r4,r4,21444
 1003490:	e17ffe17 	ldw	r5,-8(fp)
 1003494:	000d883a 	mov	r6,zero
 1003498:	01c07fc4 	movi	r7,511
 100349c:	100337c0 	call	100337c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 10034a0:	01004034 	movhi	r4,256
 10034a4:	2114f704 	addi	r4,r4,21468
 10034a8:	e17fff17 	ldw	r5,-4(fp)
 10034ac:	01800044 	movi	r6,1
 10034b0:	01c07fc4 	movi	r7,511
 10034b4:	100337c0 	call	100337c <alt_open_fd>
}  
 10034b8:	e037883a 	mov	sp,fp
 10034bc:	dfc00117 	ldw	ra,4(sp)
 10034c0:	df000017 	ldw	fp,0(sp)
 10034c4:	dec00204 	addi	sp,sp,8
 10034c8:	f800283a 	ret

010034cc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 10034cc:	defffa04 	addi	sp,sp,-24
 10034d0:	dfc00515 	stw	ra,20(sp)
 10034d4:	df000415 	stw	fp,16(sp)
 10034d8:	dc000315 	stw	r16,12(sp)
 10034dc:	df000304 	addi	fp,sp,12
 10034e0:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 10034e4:	e0bffe17 	ldw	r2,-8(fp)
 10034e8:	10800217 	ldw	r2,8(r2)
 10034ec:	10d00034 	orhi	r3,r2,16384
 10034f0:	e0bffe17 	ldw	r2,-8(fp)
 10034f4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 10034f8:	e03ffd15 	stw	zero,-12(fp)
 10034fc:	00002306 	br	100358c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 1003500:	e13ffd17 	ldw	r4,-12(fp)
 1003504:	04004034 	movhi	r16,256
 1003508:	8414f104 	addi	r16,r16,21444
 100350c:	01400304 	movi	r5,12
 1003510:	10041540 	call	1004154 <__mulsi3>
 1003514:	1405883a 	add	r2,r2,r16
 1003518:	10c00017 	ldw	r3,0(r2)
 100351c:	e0bffe17 	ldw	r2,-8(fp)
 1003520:	10800017 	ldw	r2,0(r2)
 1003524:	1880161e 	bne	r3,r2,1003580 <alt_file_locked+0xb4>
 1003528:	e13ffd17 	ldw	r4,-12(fp)
 100352c:	04004034 	movhi	r16,256
 1003530:	8414f104 	addi	r16,r16,21444
 1003534:	01400304 	movi	r5,12
 1003538:	10041540 	call	1004154 <__mulsi3>
 100353c:	1405883a 	add	r2,r2,r16
 1003540:	10800204 	addi	r2,r2,8
 1003544:	10800017 	ldw	r2,0(r2)
 1003548:	1004403a 	cmpge	r2,r2,zero
 100354c:	10000c1e 	bne	r2,zero,1003580 <alt_file_locked+0xb4>
 1003550:	e13ffd17 	ldw	r4,-12(fp)
 1003554:	01400304 	movi	r5,12
 1003558:	10041540 	call	1004154 <__mulsi3>
 100355c:	1007883a 	mov	r3,r2
 1003560:	00804034 	movhi	r2,256
 1003564:	1094f104 	addi	r2,r2,21444
 1003568:	1887883a 	add	r3,r3,r2
 100356c:	e0bffe17 	ldw	r2,-8(fp)
 1003570:	18800326 	beq	r3,r2,1003580 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 1003574:	00bffcc4 	movi	r2,-13
 1003578:	e0bfff15 	stw	r2,-4(fp)
 100357c:	00000a06 	br	10035a8 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 1003580:	e0bffd17 	ldw	r2,-12(fp)
 1003584:	10800044 	addi	r2,r2,1
 1003588:	e0bffd15 	stw	r2,-12(fp)
 100358c:	00804034 	movhi	r2,256
 1003590:	10965504 	addi	r2,r2,22868
 1003594:	10800017 	ldw	r2,0(r2)
 1003598:	1007883a 	mov	r3,r2
 100359c:	e0bffd17 	ldw	r2,-12(fp)
 10035a0:	18bfd72e 	bgeu	r3,r2,1003500 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 10035a4:	e03fff15 	stw	zero,-4(fp)
 10035a8:	e0bfff17 	ldw	r2,-4(fp)
}
 10035ac:	e037883a 	mov	sp,fp
 10035b0:	dfc00217 	ldw	ra,8(sp)
 10035b4:	df000117 	ldw	fp,4(sp)
 10035b8:	dc000017 	ldw	r16,0(sp)
 10035bc:	dec00304 	addi	sp,sp,12
 10035c0:	f800283a 	ret

010035c4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 10035c4:	defff404 	addi	sp,sp,-48
 10035c8:	dfc00b15 	stw	ra,44(sp)
 10035cc:	df000a15 	stw	fp,40(sp)
 10035d0:	df000a04 	addi	fp,sp,40
 10035d4:	e13ffb15 	stw	r4,-20(fp)
 10035d8:	e17ffc15 	stw	r5,-16(fp)
 10035dc:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 10035e0:	00bfffc4 	movi	r2,-1
 10035e4:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 10035e8:	00bffb44 	movi	r2,-19
 10035ec:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 10035f0:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 10035f4:	e13ffb17 	ldw	r4,-20(fp)
 10035f8:	01404034 	movhi	r5,256
 10035fc:	29565304 	addi	r5,r5,22860
 1003600:	10030000 	call	1003000 <alt_find_dev>
 1003604:	e0bffa15 	stw	r2,-24(fp)
 1003608:	e0bffa17 	ldw	r2,-24(fp)
 100360c:	1004c03a 	cmpne	r2,r2,zero
 1003610:	1000051e 	bne	r2,zero,1003628 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 1003614:	e13ffb17 	ldw	r4,-20(fp)
 1003618:	10039ec0 	call	10039ec <alt_find_file>
 100361c:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 1003620:	00800044 	movi	r2,1
 1003624:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 1003628:	e0bffa17 	ldw	r2,-24(fp)
 100362c:	1005003a 	cmpeq	r2,r2,zero
 1003630:	1000311e 	bne	r2,zero,10036f8 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
 1003634:	e13ffa17 	ldw	r4,-24(fp)
 1003638:	1003b0c0 	call	1003b0c <alt_get_fd>
 100363c:	e0bff815 	stw	r2,-32(fp)
 1003640:	e0bff817 	ldw	r2,-32(fp)
 1003644:	1004403a 	cmpge	r2,r2,zero
 1003648:	1000031e 	bne	r2,zero,1003658 <open+0x94>
    {
      status = index;
 100364c:	e0bff817 	ldw	r2,-32(fp)
 1003650:	e0bff715 	stw	r2,-36(fp)
 1003654:	00002a06 	br	1003700 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
 1003658:	e13ff817 	ldw	r4,-32(fp)
 100365c:	01400304 	movi	r5,12
 1003660:	10041540 	call	1004154 <__mulsi3>
 1003664:	1007883a 	mov	r3,r2
 1003668:	00804034 	movhi	r2,256
 100366c:	1094f104 	addi	r2,r2,21444
 1003670:	1885883a 	add	r2,r3,r2
 1003674:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 1003678:	e0fffc17 	ldw	r3,-16(fp)
 100367c:	00900034 	movhi	r2,16384
 1003680:	10bfffc4 	addi	r2,r2,-1
 1003684:	1886703a 	and	r3,r3,r2
 1003688:	e0bff917 	ldw	r2,-28(fp)
 100368c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 1003690:	e0bff617 	ldw	r2,-40(fp)
 1003694:	1004c03a 	cmpne	r2,r2,zero
 1003698:	1000061e 	bne	r2,zero,10036b4 <open+0xf0>
 100369c:	e13ff917 	ldw	r4,-28(fp)
 10036a0:	10034cc0 	call	10034cc <alt_file_locked>
 10036a4:	e0bff715 	stw	r2,-36(fp)
 10036a8:	e0bff717 	ldw	r2,-36(fp)
 10036ac:	1004803a 	cmplt	r2,r2,zero
 10036b0:	1000131e 	bne	r2,zero,1003700 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 10036b4:	e0bffa17 	ldw	r2,-24(fp)
 10036b8:	10800317 	ldw	r2,12(r2)
 10036bc:	1005003a 	cmpeq	r2,r2,zero
 10036c0:	1000091e 	bne	r2,zero,10036e8 <open+0x124>
 10036c4:	e0bffa17 	ldw	r2,-24(fp)
 10036c8:	10800317 	ldw	r2,12(r2)
 10036cc:	e13ff917 	ldw	r4,-28(fp)
 10036d0:	e17ffb17 	ldw	r5,-20(fp)
 10036d4:	e1bffc17 	ldw	r6,-16(fp)
 10036d8:	e1fffd17 	ldw	r7,-12(fp)
 10036dc:	103ee83a 	callr	r2
 10036e0:	e0bfff15 	stw	r2,-4(fp)
 10036e4:	00000106 	br	10036ec <open+0x128>
 10036e8:	e03fff15 	stw	zero,-4(fp)
 10036ec:	e0bfff17 	ldw	r2,-4(fp)
 10036f0:	e0bff715 	stw	r2,-36(fp)
 10036f4:	00000206 	br	1003700 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 10036f8:	00bffb44 	movi	r2,-19
 10036fc:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 1003700:	e0bff717 	ldw	r2,-36(fp)
 1003704:	1004403a 	cmpge	r2,r2,zero
 1003708:	1000091e 	bne	r2,zero,1003730 <open+0x16c>
  {
    alt_release_fd (index);  
 100370c:	e13ff817 	ldw	r4,-32(fp)
 1003710:	10037b00 	call	10037b0 <alt_release_fd>
    ALT_ERRNO = -status;
 1003714:	10037500 	call	1003750 <alt_get_errno>
 1003718:	e0fff717 	ldw	r3,-36(fp)
 100371c:	00c7c83a 	sub	r3,zero,r3
 1003720:	10c00015 	stw	r3,0(r2)
    return -1;
 1003724:	00bfffc4 	movi	r2,-1
 1003728:	e0bffe15 	stw	r2,-8(fp)
 100372c:	00000206 	br	1003738 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
 1003730:	e0bff817 	ldw	r2,-32(fp)
 1003734:	e0bffe15 	stw	r2,-8(fp)
 1003738:	e0bffe17 	ldw	r2,-8(fp)
}
 100373c:	e037883a 	mov	sp,fp
 1003740:	dfc00117 	ldw	ra,4(sp)
 1003744:	df000017 	ldw	fp,0(sp)
 1003748:	dec00204 	addi	sp,sp,8
 100374c:	f800283a 	ret

01003750 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1003750:	defffd04 	addi	sp,sp,-12
 1003754:	dfc00215 	stw	ra,8(sp)
 1003758:	df000115 	stw	fp,4(sp)
 100375c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1003760:	00804034 	movhi	r2,256
 1003764:	10965604 	addi	r2,r2,22872
 1003768:	10800017 	ldw	r2,0(r2)
 100376c:	1005003a 	cmpeq	r2,r2,zero
 1003770:	1000061e 	bne	r2,zero,100378c <alt_get_errno+0x3c>
 1003774:	00804034 	movhi	r2,256
 1003778:	10965604 	addi	r2,r2,22872
 100377c:	10800017 	ldw	r2,0(r2)
 1003780:	103ee83a 	callr	r2
 1003784:	e0bfff15 	stw	r2,-4(fp)
 1003788:	00000306 	br	1003798 <alt_get_errno+0x48>
 100378c:	00804034 	movhi	r2,256
 1003790:	109c1604 	addi	r2,r2,28760
 1003794:	e0bfff15 	stw	r2,-4(fp)
 1003798:	e0bfff17 	ldw	r2,-4(fp)
}
 100379c:	e037883a 	mov	sp,fp
 10037a0:	dfc00117 	ldw	ra,4(sp)
 10037a4:	df000017 	ldw	fp,0(sp)
 10037a8:	dec00204 	addi	sp,sp,8
 10037ac:	f800283a 	ret

010037b0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 10037b0:	defffc04 	addi	sp,sp,-16
 10037b4:	dfc00315 	stw	ra,12(sp)
 10037b8:	df000215 	stw	fp,8(sp)
 10037bc:	dc000115 	stw	r16,4(sp)
 10037c0:	df000104 	addi	fp,sp,4
 10037c4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 10037c8:	e0bfff17 	ldw	r2,-4(fp)
 10037cc:	108000d0 	cmplti	r2,r2,3
 10037d0:	10000f1e 	bne	r2,zero,1003810 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
 10037d4:	e13fff17 	ldw	r4,-4(fp)
 10037d8:	04004034 	movhi	r16,256
 10037dc:	8414f104 	addi	r16,r16,21444
 10037e0:	01400304 	movi	r5,12
 10037e4:	10041540 	call	1004154 <__mulsi3>
 10037e8:	1405883a 	add	r2,r2,r16
 10037ec:	10800204 	addi	r2,r2,8
 10037f0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 10037f4:	e13fff17 	ldw	r4,-4(fp)
 10037f8:	04004034 	movhi	r16,256
 10037fc:	8414f104 	addi	r16,r16,21444
 1003800:	01400304 	movi	r5,12
 1003804:	10041540 	call	1004154 <__mulsi3>
 1003808:	1405883a 	add	r2,r2,r16
 100380c:	10000015 	stw	zero,0(r2)
  }
}
 1003810:	e037883a 	mov	sp,fp
 1003814:	dfc00217 	ldw	ra,8(sp)
 1003818:	df000117 	ldw	fp,4(sp)
 100381c:	dc000017 	ldw	r16,0(sp)
 1003820:	dec00304 	addi	sp,sp,12
 1003824:	f800283a 	ret

01003828 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 1003828:	defffa04 	addi	sp,sp,-24
 100382c:	df000515 	stw	fp,20(sp)
 1003830:	df000504 	addi	fp,sp,20
 1003834:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1003838:	0005303a 	rdctl	r2,status
 100383c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1003840:	e0fffd17 	ldw	r3,-12(fp)
 1003844:	00bfff84 	movi	r2,-2
 1003848:	1884703a 	and	r2,r3,r2
 100384c:	1001703a 	wrctl	status,r2
  
  return context;
 1003850:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 1003854:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 1003858:	e0bfff17 	ldw	r2,-4(fp)
 100385c:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 1003860:	e0bffc17 	ldw	r2,-16(fp)
 1003864:	10c00017 	ldw	r3,0(r2)
 1003868:	e0bffc17 	ldw	r2,-16(fp)
 100386c:	10800117 	ldw	r2,4(r2)
 1003870:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 1003874:	e0bffc17 	ldw	r2,-16(fp)
 1003878:	10c00117 	ldw	r3,4(r2)
 100387c:	e0bffc17 	ldw	r2,-16(fp)
 1003880:	10800017 	ldw	r2,0(r2)
 1003884:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 1003888:	e0fffc17 	ldw	r3,-16(fp)
 100388c:	e0bffc17 	ldw	r2,-16(fp)
 1003890:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 1003894:	e0fffc17 	ldw	r3,-16(fp)
 1003898:	e0bffc17 	ldw	r2,-16(fp)
 100389c:	18800015 	stw	r2,0(r3)
 10038a0:	e0bffe17 	ldw	r2,-8(fp)
 10038a4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10038a8:	e0bffb17 	ldw	r2,-20(fp)
 10038ac:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 10038b0:	e037883a 	mov	sp,fp
 10038b4:	df000017 	ldw	fp,0(sp)
 10038b8:	dec00104 	addi	sp,sp,4
 10038bc:	f800283a 	ret

010038c0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 10038c0:	defffb04 	addi	sp,sp,-20
 10038c4:	dfc00415 	stw	ra,16(sp)
 10038c8:	df000315 	stw	fp,12(sp)
 10038cc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 10038d0:	d0a00717 	ldw	r2,-32740(gp)
 10038d4:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 10038d8:	d0a5c417 	ldw	r2,-26864(gp)
 10038dc:	10800044 	addi	r2,r2,1
 10038e0:	d0a5c415 	stw	r2,-26864(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 10038e4:	00003106 	br	10039ac <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 10038e8:	e0bffe17 	ldw	r2,-8(fp)
 10038ec:	10800017 	ldw	r2,0(r2)
 10038f0:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 10038f4:	e0bffe17 	ldw	r2,-8(fp)
 10038f8:	10800403 	ldbu	r2,16(r2)
 10038fc:	10803fcc 	andi	r2,r2,255
 1003900:	1005003a 	cmpeq	r2,r2,zero
 1003904:	1000051e 	bne	r2,zero,100391c <alt_tick+0x5c>
 1003908:	d0a5c417 	ldw	r2,-26864(gp)
 100390c:	1004c03a 	cmpne	r2,r2,zero
 1003910:	1000021e 	bne	r2,zero,100391c <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 1003914:	e0bffe17 	ldw	r2,-8(fp)
 1003918:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 100391c:	e0bffe17 	ldw	r2,-8(fp)
 1003920:	10c00217 	ldw	r3,8(r2)
 1003924:	d0a5c417 	ldw	r2,-26864(gp)
 1003928:	10c01e36 	bltu	r2,r3,10039a4 <alt_tick+0xe4>
 100392c:	e0bffe17 	ldw	r2,-8(fp)
 1003930:	10800403 	ldbu	r2,16(r2)
 1003934:	10803fcc 	andi	r2,r2,255
 1003938:	1004c03a 	cmpne	r2,r2,zero
 100393c:	1000191e 	bne	r2,zero,10039a4 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 1003940:	e0bffe17 	ldw	r2,-8(fp)
 1003944:	10c00317 	ldw	r3,12(r2)
 1003948:	e0bffe17 	ldw	r2,-8(fp)
 100394c:	11000517 	ldw	r4,20(r2)
 1003950:	183ee83a 	callr	r3
 1003954:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 1003958:	e0bffd17 	ldw	r2,-12(fp)
 100395c:	1004c03a 	cmpne	r2,r2,zero
 1003960:	1000031e 	bne	r2,zero,1003970 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 1003964:	e13ffe17 	ldw	r4,-8(fp)
 1003968:	10038280 	call	1003828 <alt_alarm_stop>
 100396c:	00000d06 	br	10039a4 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 1003970:	e0bffe17 	ldw	r2,-8(fp)
 1003974:	10c00217 	ldw	r3,8(r2)
 1003978:	e0bffd17 	ldw	r2,-12(fp)
 100397c:	1887883a 	add	r3,r3,r2
 1003980:	e0bffe17 	ldw	r2,-8(fp)
 1003984:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 1003988:	e0bffe17 	ldw	r2,-8(fp)
 100398c:	10c00217 	ldw	r3,8(r2)
 1003990:	d0a5c417 	ldw	r2,-26864(gp)
 1003994:	1880032e 	bgeu	r3,r2,10039a4 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 1003998:	e0fffe17 	ldw	r3,-8(fp)
 100399c:	00800044 	movi	r2,1
 10039a0:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 10039a4:	e0bfff17 	ldw	r2,-4(fp)
 10039a8:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 10039ac:	d0e00704 	addi	r3,gp,-32740
 10039b0:	e0bffe17 	ldw	r2,-8(fp)
 10039b4:	10ffcc1e 	bne	r2,r3,10038e8 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 10039b8:	e037883a 	mov	sp,fp
 10039bc:	dfc00117 	ldw	ra,4(sp)
 10039c0:	df000017 	ldw	fp,0(sp)
 10039c4:	dec00204 	addi	sp,sp,8
 10039c8:	f800283a 	ret

010039cc <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 10039cc:	deffff04 	addi	sp,sp,-4
 10039d0:	df000015 	stw	fp,0(sp)
 10039d4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 10039d8:	000170fa 	wrctl	ienable,zero
}
 10039dc:	e037883a 	mov	sp,fp
 10039e0:	df000017 	ldw	fp,0(sp)
 10039e4:	dec00104 	addi	sp,sp,4
 10039e8:	f800283a 	ret

010039ec <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 10039ec:	defffa04 	addi	sp,sp,-24
 10039f0:	dfc00515 	stw	ra,20(sp)
 10039f4:	df000415 	stw	fp,16(sp)
 10039f8:	df000404 	addi	fp,sp,16
 10039fc:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 1003a00:	00804034 	movhi	r2,256
 1003a04:	10965104 	addi	r2,r2,22852
 1003a08:	10800017 	ldw	r2,0(r2)
 1003a0c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 1003a10:	00003306 	br	1003ae0 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 1003a14:	e0bffd17 	ldw	r2,-12(fp)
 1003a18:	11000217 	ldw	r4,8(r2)
 1003a1c:	1003df80 	call	1003df8 <strlen>
 1003a20:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 1003a24:	e0bffd17 	ldw	r2,-12(fp)
 1003a28:	10c00217 	ldw	r3,8(r2)
 1003a2c:	e0bffc17 	ldw	r2,-16(fp)
 1003a30:	1885883a 	add	r2,r3,r2
 1003a34:	10bfffc4 	addi	r2,r2,-1
 1003a38:	10800003 	ldbu	r2,0(r2)
 1003a3c:	10803fcc 	andi	r2,r2,255
 1003a40:	1080201c 	xori	r2,r2,128
 1003a44:	10bfe004 	addi	r2,r2,-128
 1003a48:	10800bd8 	cmpnei	r2,r2,47
 1003a4c:	1000031e 	bne	r2,zero,1003a5c <alt_find_file+0x70>
    {
      len -= 1;
 1003a50:	e0bffc17 	ldw	r2,-16(fp)
 1003a54:	10bfffc4 	addi	r2,r2,-1
 1003a58:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 1003a5c:	e0bffc17 	ldw	r2,-16(fp)
 1003a60:	1007883a 	mov	r3,r2
 1003a64:	e0bffe17 	ldw	r2,-8(fp)
 1003a68:	1885883a 	add	r2,r3,r2
 1003a6c:	10800003 	ldbu	r2,0(r2)
 1003a70:	10803fcc 	andi	r2,r2,255
 1003a74:	1080201c 	xori	r2,r2,128
 1003a78:	10bfe004 	addi	r2,r2,-128
 1003a7c:	10800be0 	cmpeqi	r2,r2,47
 1003a80:	10000a1e 	bne	r2,zero,1003aac <alt_find_file+0xc0>
 1003a84:	e0bffc17 	ldw	r2,-16(fp)
 1003a88:	1007883a 	mov	r3,r2
 1003a8c:	e0bffe17 	ldw	r2,-8(fp)
 1003a90:	1885883a 	add	r2,r3,r2
 1003a94:	10800003 	ldbu	r2,0(r2)
 1003a98:	10803fcc 	andi	r2,r2,255
 1003a9c:	1080201c 	xori	r2,r2,128
 1003aa0:	10bfe004 	addi	r2,r2,-128
 1003aa4:	1004c03a 	cmpne	r2,r2,zero
 1003aa8:	10000a1e 	bne	r2,zero,1003ad4 <alt_find_file+0xe8>
 1003aac:	e0bffd17 	ldw	r2,-12(fp)
 1003ab0:	11000217 	ldw	r4,8(r2)
 1003ab4:	e1bffc17 	ldw	r6,-16(fp)
 1003ab8:	e17ffe17 	ldw	r5,-8(fp)
 1003abc:	1003c280 	call	1003c28 <memcmp>
 1003ac0:	1004c03a 	cmpne	r2,r2,zero
 1003ac4:	1000031e 	bne	r2,zero,1003ad4 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 1003ac8:	e0bffd17 	ldw	r2,-12(fp)
 1003acc:	e0bfff15 	stw	r2,-4(fp)
 1003ad0:	00000806 	br	1003af4 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 1003ad4:	e0bffd17 	ldw	r2,-12(fp)
 1003ad8:	10800017 	ldw	r2,0(r2)
 1003adc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 1003ae0:	00c04034 	movhi	r3,256
 1003ae4:	18d65104 	addi	r3,r3,22852
 1003ae8:	e0bffd17 	ldw	r2,-12(fp)
 1003aec:	10ffc91e 	bne	r2,r3,1003a14 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 1003af0:	e03fff15 	stw	zero,-4(fp)
 1003af4:	e0bfff17 	ldw	r2,-4(fp)
}
 1003af8:	e037883a 	mov	sp,fp
 1003afc:	dfc00117 	ldw	ra,4(sp)
 1003b00:	df000017 	ldw	fp,0(sp)
 1003b04:	dec00204 	addi	sp,sp,8
 1003b08:	f800283a 	ret

01003b0c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 1003b0c:	defffa04 	addi	sp,sp,-24
 1003b10:	dfc00515 	stw	ra,20(sp)
 1003b14:	df000415 	stw	fp,16(sp)
 1003b18:	dc000315 	stw	r16,12(sp)
 1003b1c:	df000304 	addi	fp,sp,12
 1003b20:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 1003b24:	00bffa04 	movi	r2,-24
 1003b28:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 1003b2c:	e03ffe15 	stw	zero,-8(fp)
 1003b30:	00002006 	br	1003bb4 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
 1003b34:	e13ffe17 	ldw	r4,-8(fp)
 1003b38:	04004034 	movhi	r16,256
 1003b3c:	8414f104 	addi	r16,r16,21444
 1003b40:	01400304 	movi	r5,12
 1003b44:	10041540 	call	1004154 <__mulsi3>
 1003b48:	1405883a 	add	r2,r2,r16
 1003b4c:	10800017 	ldw	r2,0(r2)
 1003b50:	1004c03a 	cmpne	r2,r2,zero
 1003b54:	1000141e 	bne	r2,zero,1003ba8 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
 1003b58:	e13ffe17 	ldw	r4,-8(fp)
 1003b5c:	04004034 	movhi	r16,256
 1003b60:	8414f104 	addi	r16,r16,21444
 1003b64:	01400304 	movi	r5,12
 1003b68:	10041540 	call	1004154 <__mulsi3>
 1003b6c:	1407883a 	add	r3,r2,r16
 1003b70:	e0bfff17 	ldw	r2,-4(fp)
 1003b74:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 1003b78:	00804034 	movhi	r2,256
 1003b7c:	10965504 	addi	r2,r2,22868
 1003b80:	10c00017 	ldw	r3,0(r2)
 1003b84:	e0bffe17 	ldw	r2,-8(fp)
 1003b88:	1880040e 	bge	r3,r2,1003b9c <alt_get_fd+0x90>
      {
        alt_max_fd = i;
 1003b8c:	00c04034 	movhi	r3,256
 1003b90:	18d65504 	addi	r3,r3,22868
 1003b94:	e0bffe17 	ldw	r2,-8(fp)
 1003b98:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 1003b9c:	e0bffe17 	ldw	r2,-8(fp)
 1003ba0:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 1003ba4:	00000606 	br	1003bc0 <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 1003ba8:	e0bffe17 	ldw	r2,-8(fp)
 1003bac:	10800044 	addi	r2,r2,1
 1003bb0:	e0bffe15 	stw	r2,-8(fp)
 1003bb4:	e0bffe17 	ldw	r2,-8(fp)
 1003bb8:	10800810 	cmplti	r2,r2,32
 1003bbc:	103fdd1e 	bne	r2,zero,1003b34 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 1003bc0:	e0bffd17 	ldw	r2,-12(fp)
}
 1003bc4:	e037883a 	mov	sp,fp
 1003bc8:	dfc00217 	ldw	ra,8(sp)
 1003bcc:	df000117 	ldw	fp,4(sp)
 1003bd0:	dc000017 	ldw	r16,0(sp)
 1003bd4:	dec00304 	addi	sp,sp,12
 1003bd8:	f800283a 	ret

01003bdc <atexit>:
 1003bdc:	200b883a 	mov	r5,r4
 1003be0:	000d883a 	mov	r6,zero
 1003be4:	0009883a 	mov	r4,zero
 1003be8:	000f883a 	mov	r7,zero
 1003bec:	1003e6c1 	jmpi	1003e6c <__register_exitproc>

01003bf0 <exit>:
 1003bf0:	defffe04 	addi	sp,sp,-8
 1003bf4:	000b883a 	mov	r5,zero
 1003bf8:	dc000015 	stw	r16,0(sp)
 1003bfc:	dfc00115 	stw	ra,4(sp)
 1003c00:	2021883a 	mov	r16,r4
 1003c04:	1003fa40 	call	1003fa4 <__call_exitprocs>
 1003c08:	00804034 	movhi	r2,256
 1003c0c:	10965b04 	addi	r2,r2,22892
 1003c10:	11000017 	ldw	r4,0(r2)
 1003c14:	20800f17 	ldw	r2,60(r4)
 1003c18:	10000126 	beq	r2,zero,1003c20 <exit+0x30>
 1003c1c:	103ee83a 	callr	r2
 1003c20:	8009883a 	mov	r4,r16
 1003c24:	10041cc0 	call	10041cc <_exit>

01003c28 <memcmp>:
 1003c28:	00c000c4 	movi	r3,3
 1003c2c:	1980032e 	bgeu	r3,r6,1003c3c <memcmp+0x14>
 1003c30:	2144b03a 	or	r2,r4,r5
 1003c34:	10c4703a 	and	r2,r2,r3
 1003c38:	10000f26 	beq	r2,zero,1003c78 <memcmp+0x50>
 1003c3c:	31ffffc4 	addi	r7,r6,-1
 1003c40:	3000061e 	bne	r6,zero,1003c5c <memcmp+0x34>
 1003c44:	00000a06 	br	1003c70 <memcmp+0x48>
 1003c48:	39ffffc4 	addi	r7,r7,-1
 1003c4c:	00bfffc4 	movi	r2,-1
 1003c50:	21000044 	addi	r4,r4,1
 1003c54:	29400044 	addi	r5,r5,1
 1003c58:	38800526 	beq	r7,r2,1003c70 <memcmp+0x48>
 1003c5c:	20c00003 	ldbu	r3,0(r4)
 1003c60:	28800003 	ldbu	r2,0(r5)
 1003c64:	18bff826 	beq	r3,r2,1003c48 <memcmp+0x20>
 1003c68:	1885c83a 	sub	r2,r3,r2
 1003c6c:	f800283a 	ret
 1003c70:	0005883a 	mov	r2,zero
 1003c74:	f800283a 	ret
 1003c78:	180f883a 	mov	r7,r3
 1003c7c:	20c00017 	ldw	r3,0(r4)
 1003c80:	28800017 	ldw	r2,0(r5)
 1003c84:	18bfed1e 	bne	r3,r2,1003c3c <memcmp+0x14>
 1003c88:	31bfff04 	addi	r6,r6,-4
 1003c8c:	21000104 	addi	r4,r4,4
 1003c90:	29400104 	addi	r5,r5,4
 1003c94:	39bff936 	bltu	r7,r6,1003c7c <memcmp+0x54>
 1003c98:	003fe806 	br	1003c3c <memcmp+0x14>

01003c9c <memcpy>:
 1003c9c:	01c003c4 	movi	r7,15
 1003ca0:	2007883a 	mov	r3,r4
 1003ca4:	3980032e 	bgeu	r7,r6,1003cb4 <memcpy+0x18>
 1003ca8:	2904b03a 	or	r2,r5,r4
 1003cac:	108000cc 	andi	r2,r2,3
 1003cb0:	10000926 	beq	r2,zero,1003cd8 <memcpy+0x3c>
 1003cb4:	30000626 	beq	r6,zero,1003cd0 <memcpy+0x34>
 1003cb8:	30cd883a 	add	r6,r6,r3
 1003cbc:	28800003 	ldbu	r2,0(r5)
 1003cc0:	29400044 	addi	r5,r5,1
 1003cc4:	18800005 	stb	r2,0(r3)
 1003cc8:	18c00044 	addi	r3,r3,1
 1003ccc:	30fffb1e 	bne	r6,r3,1003cbc <memcpy+0x20>
 1003cd0:	2005883a 	mov	r2,r4
 1003cd4:	f800283a 	ret
 1003cd8:	3811883a 	mov	r8,r7
 1003cdc:	200f883a 	mov	r7,r4
 1003ce0:	28c00017 	ldw	r3,0(r5)
 1003ce4:	31bffc04 	addi	r6,r6,-16
 1003ce8:	38c00015 	stw	r3,0(r7)
 1003cec:	28800117 	ldw	r2,4(r5)
 1003cf0:	38800115 	stw	r2,4(r7)
 1003cf4:	28c00217 	ldw	r3,8(r5)
 1003cf8:	38c00215 	stw	r3,8(r7)
 1003cfc:	28800317 	ldw	r2,12(r5)
 1003d00:	29400404 	addi	r5,r5,16
 1003d04:	38800315 	stw	r2,12(r7)
 1003d08:	39c00404 	addi	r7,r7,16
 1003d0c:	41bff436 	bltu	r8,r6,1003ce0 <memcpy+0x44>
 1003d10:	008000c4 	movi	r2,3
 1003d14:	1180072e 	bgeu	r2,r6,1003d34 <memcpy+0x98>
 1003d18:	1007883a 	mov	r3,r2
 1003d1c:	28800017 	ldw	r2,0(r5)
 1003d20:	31bfff04 	addi	r6,r6,-4
 1003d24:	29400104 	addi	r5,r5,4
 1003d28:	38800015 	stw	r2,0(r7)
 1003d2c:	39c00104 	addi	r7,r7,4
 1003d30:	19bffa36 	bltu	r3,r6,1003d1c <memcpy+0x80>
 1003d34:	3807883a 	mov	r3,r7
 1003d38:	003fde06 	br	1003cb4 <memcpy+0x18>

01003d3c <strcmp>:
 1003d3c:	2144b03a 	or	r2,r4,r5
 1003d40:	108000cc 	andi	r2,r2,3
 1003d44:	10001d1e 	bne	r2,zero,1003dbc <strcmp+0x80>
 1003d48:	200f883a 	mov	r7,r4
 1003d4c:	28800017 	ldw	r2,0(r5)
 1003d50:	21000017 	ldw	r4,0(r4)
 1003d54:	280d883a 	mov	r6,r5
 1003d58:	2080161e 	bne	r4,r2,1003db4 <strcmp+0x78>
 1003d5c:	023fbff4 	movhi	r8,65279
 1003d60:	423fbfc4 	addi	r8,r8,-257
 1003d64:	2207883a 	add	r3,r4,r8
 1003d68:	01602074 	movhi	r5,32897
 1003d6c:	29602004 	addi	r5,r5,-32640
 1003d70:	1946703a 	and	r3,r3,r5
 1003d74:	0104303a 	nor	r2,zero,r4
 1003d78:	10c4703a 	and	r2,r2,r3
 1003d7c:	10001c1e 	bne	r2,zero,1003df0 <strcmp+0xb4>
 1003d80:	4013883a 	mov	r9,r8
 1003d84:	2811883a 	mov	r8,r5
 1003d88:	00000106 	br	1003d90 <strcmp+0x54>
 1003d8c:	1800181e 	bne	r3,zero,1003df0 <strcmp+0xb4>
 1003d90:	39c00104 	addi	r7,r7,4
 1003d94:	39000017 	ldw	r4,0(r7)
 1003d98:	31800104 	addi	r6,r6,4
 1003d9c:	31400017 	ldw	r5,0(r6)
 1003da0:	2245883a 	add	r2,r4,r9
 1003da4:	1204703a 	and	r2,r2,r8
 1003da8:	0106303a 	nor	r3,zero,r4
 1003dac:	1886703a 	and	r3,r3,r2
 1003db0:	217ff626 	beq	r4,r5,1003d8c <strcmp+0x50>
 1003db4:	3809883a 	mov	r4,r7
 1003db8:	300b883a 	mov	r5,r6
 1003dbc:	20c00007 	ldb	r3,0(r4)
 1003dc0:	1800051e 	bne	r3,zero,1003dd8 <strcmp+0x9c>
 1003dc4:	00000606 	br	1003de0 <strcmp+0xa4>
 1003dc8:	21000044 	addi	r4,r4,1
 1003dcc:	20c00007 	ldb	r3,0(r4)
 1003dd0:	29400044 	addi	r5,r5,1
 1003dd4:	18000226 	beq	r3,zero,1003de0 <strcmp+0xa4>
 1003dd8:	28800007 	ldb	r2,0(r5)
 1003ddc:	18bffa26 	beq	r3,r2,1003dc8 <strcmp+0x8c>
 1003de0:	20c00003 	ldbu	r3,0(r4)
 1003de4:	28800003 	ldbu	r2,0(r5)
 1003de8:	1885c83a 	sub	r2,r3,r2
 1003dec:	f800283a 	ret
 1003df0:	0005883a 	mov	r2,zero
 1003df4:	f800283a 	ret

01003df8 <strlen>:
 1003df8:	208000cc 	andi	r2,r4,3
 1003dfc:	2011883a 	mov	r8,r4
 1003e00:	1000161e 	bne	r2,zero,1003e5c <strlen+0x64>
 1003e04:	20c00017 	ldw	r3,0(r4)
 1003e08:	017fbff4 	movhi	r5,65279
 1003e0c:	297fbfc4 	addi	r5,r5,-257
 1003e10:	01e02074 	movhi	r7,32897
 1003e14:	39e02004 	addi	r7,r7,-32640
 1003e18:	1945883a 	add	r2,r3,r5
 1003e1c:	11c4703a 	and	r2,r2,r7
 1003e20:	00c6303a 	nor	r3,zero,r3
 1003e24:	1886703a 	and	r3,r3,r2
 1003e28:	18000c1e 	bne	r3,zero,1003e5c <strlen+0x64>
 1003e2c:	280d883a 	mov	r6,r5
 1003e30:	380b883a 	mov	r5,r7
 1003e34:	21000104 	addi	r4,r4,4
 1003e38:	20800017 	ldw	r2,0(r4)
 1003e3c:	1187883a 	add	r3,r2,r6
 1003e40:	1946703a 	and	r3,r3,r5
 1003e44:	0084303a 	nor	r2,zero,r2
 1003e48:	10c4703a 	and	r2,r2,r3
 1003e4c:	103ff926 	beq	r2,zero,1003e34 <strlen+0x3c>
 1003e50:	20800007 	ldb	r2,0(r4)
 1003e54:	10000326 	beq	r2,zero,1003e64 <strlen+0x6c>
 1003e58:	21000044 	addi	r4,r4,1
 1003e5c:	20800007 	ldb	r2,0(r4)
 1003e60:	103ffd1e 	bne	r2,zero,1003e58 <strlen+0x60>
 1003e64:	2205c83a 	sub	r2,r4,r8
 1003e68:	f800283a 	ret

01003e6c <__register_exitproc>:
 1003e6c:	defffa04 	addi	sp,sp,-24
 1003e70:	00804034 	movhi	r2,256
 1003e74:	10965b04 	addi	r2,r2,22892
 1003e78:	dc000015 	stw	r16,0(sp)
 1003e7c:	14000017 	ldw	r16,0(r2)
 1003e80:	dd000415 	stw	r20,16(sp)
 1003e84:	2829883a 	mov	r20,r5
 1003e88:	81405217 	ldw	r5,328(r16)
 1003e8c:	dcc00315 	stw	r19,12(sp)
 1003e90:	dc800215 	stw	r18,8(sp)
 1003e94:	dc400115 	stw	r17,4(sp)
 1003e98:	dfc00515 	stw	ra,20(sp)
 1003e9c:	2023883a 	mov	r17,r4
 1003ea0:	3027883a 	mov	r19,r6
 1003ea4:	3825883a 	mov	r18,r7
 1003ea8:	28002526 	beq	r5,zero,1003f40 <__register_exitproc+0xd4>
 1003eac:	29000117 	ldw	r4,4(r5)
 1003eb0:	008007c4 	movi	r2,31
 1003eb4:	11002716 	blt	r2,r4,1003f54 <__register_exitproc+0xe8>
 1003eb8:	8800101e 	bne	r17,zero,1003efc <__register_exitproc+0x90>
 1003ebc:	2105883a 	add	r2,r4,r4
 1003ec0:	1085883a 	add	r2,r2,r2
 1003ec4:	20c00044 	addi	r3,r4,1
 1003ec8:	1145883a 	add	r2,r2,r5
 1003ecc:	0009883a 	mov	r4,zero
 1003ed0:	15000215 	stw	r20,8(r2)
 1003ed4:	28c00115 	stw	r3,4(r5)
 1003ed8:	2005883a 	mov	r2,r4
 1003edc:	dfc00517 	ldw	ra,20(sp)
 1003ee0:	dd000417 	ldw	r20,16(sp)
 1003ee4:	dcc00317 	ldw	r19,12(sp)
 1003ee8:	dc800217 	ldw	r18,8(sp)
 1003eec:	dc400117 	ldw	r17,4(sp)
 1003ef0:	dc000017 	ldw	r16,0(sp)
 1003ef4:	dec00604 	addi	sp,sp,24
 1003ef8:	f800283a 	ret
 1003efc:	29802204 	addi	r6,r5,136
 1003f00:	00800044 	movi	r2,1
 1003f04:	110e983a 	sll	r7,r2,r4
 1003f08:	30c04017 	ldw	r3,256(r6)
 1003f0c:	2105883a 	add	r2,r4,r4
 1003f10:	1085883a 	add	r2,r2,r2
 1003f14:	1185883a 	add	r2,r2,r6
 1003f18:	19c6b03a 	or	r3,r3,r7
 1003f1c:	14802015 	stw	r18,128(r2)
 1003f20:	14c00015 	stw	r19,0(r2)
 1003f24:	00800084 	movi	r2,2
 1003f28:	30c04015 	stw	r3,256(r6)
 1003f2c:	88bfe31e 	bne	r17,r2,1003ebc <__register_exitproc+0x50>
 1003f30:	30804117 	ldw	r2,260(r6)
 1003f34:	11c4b03a 	or	r2,r2,r7
 1003f38:	30804115 	stw	r2,260(r6)
 1003f3c:	003fdf06 	br	1003ebc <__register_exitproc+0x50>
 1003f40:	00804034 	movhi	r2,256
 1003f44:	109c5704 	addi	r2,r2,29020
 1003f48:	100b883a 	mov	r5,r2
 1003f4c:	80805215 	stw	r2,328(r16)
 1003f50:	003fd606 	br	1003eac <__register_exitproc+0x40>
 1003f54:	00800034 	movhi	r2,0
 1003f58:	10800004 	addi	r2,r2,0
 1003f5c:	1000021e 	bne	r2,zero,1003f68 <__register_exitproc+0xfc>
 1003f60:	013fffc4 	movi	r4,-1
 1003f64:	003fdc06 	br	1003ed8 <__register_exitproc+0x6c>
 1003f68:	01006404 	movi	r4,400
 1003f6c:	103ee83a 	callr	r2
 1003f70:	1007883a 	mov	r3,r2
 1003f74:	103ffa26 	beq	r2,zero,1003f60 <__register_exitproc+0xf4>
 1003f78:	80805217 	ldw	r2,328(r16)
 1003f7c:	180b883a 	mov	r5,r3
 1003f80:	18000115 	stw	zero,4(r3)
 1003f84:	18800015 	stw	r2,0(r3)
 1003f88:	80c05215 	stw	r3,328(r16)
 1003f8c:	18006215 	stw	zero,392(r3)
 1003f90:	18006315 	stw	zero,396(r3)
 1003f94:	0009883a 	mov	r4,zero
 1003f98:	883fc826 	beq	r17,zero,1003ebc <__register_exitproc+0x50>
 1003f9c:	003fd706 	br	1003efc <__register_exitproc+0x90>

01003fa0 <register_fini>:
 1003fa0:	f800283a 	ret

01003fa4 <__call_exitprocs>:
 1003fa4:	00804034 	movhi	r2,256
 1003fa8:	10965b04 	addi	r2,r2,22892
 1003fac:	10800017 	ldw	r2,0(r2)
 1003fb0:	defff304 	addi	sp,sp,-52
 1003fb4:	df000b15 	stw	fp,44(sp)
 1003fb8:	d8800115 	stw	r2,4(sp)
 1003fbc:	00800034 	movhi	r2,0
 1003fc0:	10800004 	addi	r2,r2,0
 1003fc4:	1005003a 	cmpeq	r2,r2,zero
 1003fc8:	d8800215 	stw	r2,8(sp)
 1003fcc:	d8800117 	ldw	r2,4(sp)
 1003fd0:	dd400815 	stw	r21,32(sp)
 1003fd4:	dd000715 	stw	r20,28(sp)
 1003fd8:	10805204 	addi	r2,r2,328
 1003fdc:	dfc00c15 	stw	ra,48(sp)
 1003fe0:	ddc00a15 	stw	r23,40(sp)
 1003fe4:	dd800915 	stw	r22,36(sp)
 1003fe8:	dcc00615 	stw	r19,24(sp)
 1003fec:	dc800515 	stw	r18,20(sp)
 1003ff0:	dc400415 	stw	r17,16(sp)
 1003ff4:	dc000315 	stw	r16,12(sp)
 1003ff8:	282b883a 	mov	r21,r5
 1003ffc:	2039883a 	mov	fp,r4
 1004000:	d8800015 	stw	r2,0(sp)
 1004004:	2829003a 	cmpeq	r20,r5,zero
 1004008:	d8800117 	ldw	r2,4(sp)
 100400c:	14405217 	ldw	r17,328(r2)
 1004010:	88001026 	beq	r17,zero,1004054 <__call_exitprocs+0xb0>
 1004014:	ddc00017 	ldw	r23,0(sp)
 1004018:	88800117 	ldw	r2,4(r17)
 100401c:	8c802204 	addi	r18,r17,136
 1004020:	143fffc4 	addi	r16,r2,-1
 1004024:	80000916 	blt	r16,zero,100404c <__call_exitprocs+0xa8>
 1004028:	05bfffc4 	movi	r22,-1
 100402c:	a000151e 	bne	r20,zero,1004084 <__call_exitprocs+0xe0>
 1004030:	8409883a 	add	r4,r16,r16
 1004034:	2105883a 	add	r2,r4,r4
 1004038:	1485883a 	add	r2,r2,r18
 100403c:	10c02017 	ldw	r3,128(r2)
 1004040:	a8c01126 	beq	r21,r3,1004088 <__call_exitprocs+0xe4>
 1004044:	843fffc4 	addi	r16,r16,-1
 1004048:	85bff81e 	bne	r16,r22,100402c <__call_exitprocs+0x88>
 100404c:	d8800217 	ldw	r2,8(sp)
 1004050:	10003126 	beq	r2,zero,1004118 <__call_exitprocs+0x174>
 1004054:	dfc00c17 	ldw	ra,48(sp)
 1004058:	df000b17 	ldw	fp,44(sp)
 100405c:	ddc00a17 	ldw	r23,40(sp)
 1004060:	dd800917 	ldw	r22,36(sp)
 1004064:	dd400817 	ldw	r21,32(sp)
 1004068:	dd000717 	ldw	r20,28(sp)
 100406c:	dcc00617 	ldw	r19,24(sp)
 1004070:	dc800517 	ldw	r18,20(sp)
 1004074:	dc400417 	ldw	r17,16(sp)
 1004078:	dc000317 	ldw	r16,12(sp)
 100407c:	dec00d04 	addi	sp,sp,52
 1004080:	f800283a 	ret
 1004084:	8409883a 	add	r4,r16,r16
 1004088:	88c00117 	ldw	r3,4(r17)
 100408c:	2105883a 	add	r2,r4,r4
 1004090:	1445883a 	add	r2,r2,r17
 1004094:	18ffffc4 	addi	r3,r3,-1
 1004098:	11800217 	ldw	r6,8(r2)
 100409c:	1c001526 	beq	r3,r16,10040f4 <__call_exitprocs+0x150>
 10040a0:	10000215 	stw	zero,8(r2)
 10040a4:	303fe726 	beq	r6,zero,1004044 <__call_exitprocs+0xa0>
 10040a8:	00c00044 	movi	r3,1
 10040ac:	1c06983a 	sll	r3,r3,r16
 10040b0:	90804017 	ldw	r2,256(r18)
 10040b4:	8cc00117 	ldw	r19,4(r17)
 10040b8:	1884703a 	and	r2,r3,r2
 10040bc:	10001426 	beq	r2,zero,1004110 <__call_exitprocs+0x16c>
 10040c0:	90804117 	ldw	r2,260(r18)
 10040c4:	1884703a 	and	r2,r3,r2
 10040c8:	10000c1e 	bne	r2,zero,10040fc <__call_exitprocs+0x158>
 10040cc:	2105883a 	add	r2,r4,r4
 10040d0:	1485883a 	add	r2,r2,r18
 10040d4:	11400017 	ldw	r5,0(r2)
 10040d8:	e009883a 	mov	r4,fp
 10040dc:	303ee83a 	callr	r6
 10040e0:	88800117 	ldw	r2,4(r17)
 10040e4:	98bfc81e 	bne	r19,r2,1004008 <__call_exitprocs+0x64>
 10040e8:	b8800017 	ldw	r2,0(r23)
 10040ec:	147fd526 	beq	r2,r17,1004044 <__call_exitprocs+0xa0>
 10040f0:	003fc506 	br	1004008 <__call_exitprocs+0x64>
 10040f4:	8c000115 	stw	r16,4(r17)
 10040f8:	003fea06 	br	10040a4 <__call_exitprocs+0x100>
 10040fc:	2105883a 	add	r2,r4,r4
 1004100:	1485883a 	add	r2,r2,r18
 1004104:	11000017 	ldw	r4,0(r2)
 1004108:	303ee83a 	callr	r6
 100410c:	003ff406 	br	10040e0 <__call_exitprocs+0x13c>
 1004110:	303ee83a 	callr	r6
 1004114:	003ff206 	br	10040e0 <__call_exitprocs+0x13c>
 1004118:	88800117 	ldw	r2,4(r17)
 100411c:	1000081e 	bne	r2,zero,1004140 <__call_exitprocs+0x19c>
 1004120:	89000017 	ldw	r4,0(r17)
 1004124:	20000726 	beq	r4,zero,1004144 <__call_exitprocs+0x1a0>
 1004128:	b9000015 	stw	r4,0(r23)
 100412c:	8809883a 	mov	r4,r17
 1004130:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 1004134:	bc400017 	ldw	r17,0(r23)
 1004138:	883fb71e 	bne	r17,zero,1004018 <__call_exitprocs+0x74>
 100413c:	003fc506 	br	1004054 <__call_exitprocs+0xb0>
 1004140:	89000017 	ldw	r4,0(r17)
 1004144:	882f883a 	mov	r23,r17
 1004148:	2023883a 	mov	r17,r4
 100414c:	883fb21e 	bne	r17,zero,1004018 <__call_exitprocs+0x74>
 1004150:	003fc006 	br	1004054 <__call_exitprocs+0xb0>

01004154 <__mulsi3>:
 1004154:	20000a26 	beq	r4,zero,1004180 <__mulsi3+0x2c>
 1004158:	0007883a 	mov	r3,zero
 100415c:	2080004c 	andi	r2,r4,1
 1004160:	1005003a 	cmpeq	r2,r2,zero
 1004164:	2008d07a 	srli	r4,r4,1
 1004168:	1000011e 	bne	r2,zero,1004170 <__mulsi3+0x1c>
 100416c:	1947883a 	add	r3,r3,r5
 1004170:	294b883a 	add	r5,r5,r5
 1004174:	203ff91e 	bne	r4,zero,100415c <__mulsi3+0x8>
 1004178:	1805883a 	mov	r2,r3
 100417c:	f800283a 	ret
 1004180:	0007883a 	mov	r3,zero
 1004184:	1805883a 	mov	r2,r3
 1004188:	f800283a 	ret

0100418c <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 100418c:	defffd04 	addi	sp,sp,-12
 1004190:	df000215 	stw	fp,8(sp)
 1004194:	df000204 	addi	fp,sp,8
 1004198:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 100419c:	e0bfff17 	ldw	r2,-4(fp)
 10041a0:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 10041a4:	e0bffe17 	ldw	r2,-8(fp)
 10041a8:	1005003a 	cmpeq	r2,r2,zero
 10041ac:	1000021e 	bne	r2,zero,10041b8 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 10041b0:	002af070 	cmpltui	zero,zero,43969
 10041b4:	00000106 	br	10041bc <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 10041b8:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 10041bc:	e037883a 	mov	sp,fp
 10041c0:	df000017 	ldw	fp,0(sp)
 10041c4:	dec00104 	addi	sp,sp,4
 10041c8:	f800283a 	ret

010041cc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 10041cc:	defffd04 	addi	sp,sp,-12
 10041d0:	dfc00215 	stw	ra,8(sp)
 10041d4:	df000115 	stw	fp,4(sp)
 10041d8:	df000104 	addi	fp,sp,4
 10041dc:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 10041e0:	e13fff17 	ldw	r4,-4(fp)
 10041e4:	100418c0 	call	100418c <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 10041e8:	003fff06 	br	10041e8 <_exit+0x1c>
 10041ec:	01003fa0 	cmpeqi	r4,zero,254
